Index: radio/src/gui/480x272/model_setup.cpp
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>/*\n * Copyright (C) OpenTX\n *\n * Based on code named\n *   th9x - http://code.google.com/p/th9x\n *   er9x - http://code.google.com/p/er9x\n *   gruvin9x - http://code.google.com/p/gruvin9x\n *\n * License GPLv2: http://www.gnu.org/licenses/gpl-2.0.html\n *\n * This program is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License version 2 as\n * published by the Free Software Foundation.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n */\n\n#include \"opentx.h\"\n#include \"storage/modelslist.h\"\n\nuint8_t g_moduleIdx;\n\nenum MenuModelSetupItems {\n  ITEM_MODEL_SETUP_NAME,\n  ITEM_MODEL_SETUP_BITMAP,\n  ITEM_MODEL_SETUP_TIMER1,\n  ITEM_MODEL_SETUP_TIMER1_NAME,\n  ITEM_MODEL_SETUP_TIMER1_PERSISTENT,\n  ITEM_MODEL_SETUP_TIMER1_MINUTE_BEEP,\n  ITEM_MODEL_SETUP_TIMER1_COUNTDOWN_BEEP,\n#if TIMERS > 1\n  ITEM_MODEL_SETUP_TIMER2,\n  ITEM_MODEL_SETUP_TIMER2_NAME,\n  ITEM_MODEL_SETUP_TIMER2_PERSISTENT,\n  ITEM_MODEL_SETUP_TIMER2_MINUTE_BEEP,\n  ITEM_MODEL_SETUP_TIMER2_COUNTDOWN_BEEP,\n#endif\n#if TIMERS > 2\n  ITEM_MODEL_SETUP_TIMER3,\n  ITEM_MODEL_SETUP_TIMER3_NAME,\n  ITEM_MODEL_SETUP_TIMER3_PERSISTENT,\n  ITEM_MODEL_SETUP_TIMER3_MINUTE_BEEP,\n  ITEM_MODEL_SETUP_TIMER3_COUNTDOWN_BEEP,\n#endif\n  ITEM_MODEL_SETUP_EXTENDED_LIMITS,\n  ITEM_MODEL_SETUP_EXTENDED_TRIMS,\n  ITEM_MODEL_SETUP_DISPLAY_TRIMS,\n  ITEM_MODEL_SETUP_TRIM_INC,\n  ITEM_MODEL_SETUP_THROTTLE_LABEL,\n  ITEM_MODEL_SETUP_THROTTLE_REVERSED,\n  ITEM_MODEL_SETUP_THROTTLE_TRACE,\n  ITEM_MODEL_SETUP_THROTTLE_TRIM,\n  ITEM_MODEL_SETUP_PREFLIGHT_LABEL,\n  ITEM_MODEL_SETUP_CHECKLIST_DISPLAY,\n  ITEM_MODEL_SETUP_THROTTLE_WARNING,\n  ITEM_MODEL_SETUP_SWITCHES_WARNING,\n  ITEM_MODEL_SETUP_POTS_SLIDERS_WARNING_STATE,\n  ITEM_MODEL_SETUP_POTS_WARNING,\n  ITEM_MODEL_SETUP_SLIDERS_WARNING,\n  ITEM_MODEL_SETUP_BEEP_CENTER,\n  ITEM_MODEL_SETUP_USE_GLOBAL_FUNCTIONS,\n\n#if defined(PXX2)\n  ITEM_MODEL_SETUP_REGISTRATION_ID,\n#endif\n#if defined(HARDWARE_INTERNAL_MODULE)\n  ITEM_MODEL_SETUP_INTERNAL_MODULE_LABEL,\n  ITEM_MODEL_SETUP_INTERNAL_MODULE_TYPE,\n#if defined(MULTIMODULE)\n  ITEM_MODEL_SETUP_INTERNAL_MODULE_STATUS,\n  ITEM_MODEL_SETUP_INTERNAL_MODULE_SYNCSTATUS,\n#endif\n  ITEM_MODEL_SETUP_INTERNAL_MODULE_CHANNELS,\n  ITEM_MODEL_SETUP_INTERNAL_MODULE_NOT_ACCESS_RXNUM_BIND_RANGE,\n  ITEM_MODEL_SETUP_INTERNAL_MODULE_PXX2_MODEL_NUM,\n  ITEM_MODEL_SETUP_INTERNAL_MODULE_OPTIONS,\n#if defined(MULTIMODULE)\n  ITEM_MODEL_SETUP_INTERNAL_MODULE_AUTOBIND,\n  ITEM_MODEL_SETUP_INTERNAL_MODULE_DISABLE_TELEM,\n  ITEM_MODEL_SETUP_INTERNAL_MODULE_DISABLE_MAPPING,\n#endif\n#if defined(INTERNAL_MODULE_PXX1) && defined(EXTERNAL_ANTENNA)\n  ITEM_MODEL_SETUP_INTERNAL_MODULE_ANTENNA,\n#endif\n  ITEM_MODEL_SETUP_INTERNAL_MODULE_POWER,\n  ITEM_MODEL_SETUP_INTERNAL_MODULE_FAILSAFE,\n  ITEM_MODEL_SETUP_INTERNAL_MODULE_PXX2_REGISTER_RANGE,\n  ITEM_MODEL_SETUP_INTERNAL_MODULE_PXX2_OPTIONS,\n  ITEM_MODEL_SETUP_INTERNAL_MODULE_PXX2_RECEIVER_1,\n  ITEM_MODEL_SETUP_INTERNAL_MODULE_PXX2_RECEIVER_2,\n  ITEM_MODEL_SETUP_INTERNAL_MODULE_PXX2_RECEIVER_3,\n#endif\n  ITEM_MODEL_SETUP_EXTERNAL_MODULE_LABEL,\n  ITEM_MODEL_SETUP_EXTERNAL_MODULE_TYPE,\n#if defined(MULTIMODULE)\n  ITEM_MODEL_SETUP_EXTERNAL_MODULE_STATUS,\n  ITEM_MODEL_SETUP_EXTERNAL_MODULE_SYNCSTATUS,\n#endif\n  ITEM_MODEL_SETUP_EXTERNAL_MODULE_CHANNELS,\n  ITEM_MODEL_SETUP_EXTERNAL_MODULE_NOT_ACCESS_BIND,\n  ITEM_MODEL_SETUP_EXTERNAL_MODULE_PXX2_MODEL_NUM,\n  ITEM_MODEL_SETUP_EXTERNAL_MODULE_OPTIONS,\n#if defined(MULTIMODULE)\n  ITEM_MODEL_SETUP_EXTERNAL_MODULE_AUTOBIND,\n  ITEM_MODEL_SETUP_EXTERNAL_MODULE_DISABLE_TELEM,\n  ITEM_MODEL_SETUP_EXTERNAL_MODULE_DISABLE_MAPPING,\n#endif\n  ITEM_MODEL_SETUP_EXTERNAL_MODULE_POWER,\n  ITEM_MODEL_SETUP_EXTERNAL_MODULE_FAILSAFE,\n  ITEM_MODEL_SETUP_EXTERNAL_MODULE_PXX2_REGISTER_RANGE,\n  ITEM_MODEL_SETUP_EXTERNAL_MODULE_PXX2_OPTIONS,\n  ITEM_MODEL_SETUP_EXTERNAL_MODULE_PXX2_RECEIVER_1,\n  ITEM_MODEL_SETUP_EXTERNAL_MODULE_PXX2_RECEIVER_2,\n  ITEM_MODEL_SETUP_EXTERNAL_MODULE_PXX2_RECEIVER_3,\n\n  ITEM_MODEL_SETUP_TRAINER_LABEL,\n  ITEM_MODEL_SETUP_TRAINER_MODE,\n#if defined(BLUETOOTH)\n  ITEM_MODEL_SETUP_TRAINER_BLUETOOTH,\n#endif\n  ITEM_MODEL_SETUP_TRAINER_CHANNELS,\n  ITEM_MODEL_SETUP_TRAINER_PPM_PARAMS,\n  ITEM_MODEL_SETUP_MAX\n};\n\n#define MODEL_SETUP_2ND_COLUMN         200\n#define MODEL_SETUP_3RD_COLUMN         270\n#define MODEL_SETUP_4TH_COLUMN         350\n#define MODEL_SETUP_BIND_OFS           40\n#define MODEL_SETUP_RANGE_OFS          80\n#define MODEL_SETUP_SET_FAILSAFE_OFS   100\n#define MODEL_SETUP_SLIDPOT_SPACING    45\n\n#define CURRENT_MODULE_EDITED(k)       (k >= ITEM_MODEL_SETUP_EXTERNAL_MODULE_LABEL ? EXTERNAL_MODULE : INTERNAL_MODULE)\n#if defined(HARDWARE_INTERNAL_MODULE)\n#define CURRENT_RECEIVER_EDITED(k)      (k - (k >= ITEM_MODEL_SETUP_EXTERNAL_MODULE_LABEL ? ITEM_MODEL_SETUP_EXTERNAL_MODULE_PXX2_RECEIVER_1 : ITEM_MODEL_SETUP_INTERNAL_MODULE_PXX2_RECEIVER_1))\n#else\n#define CURRENT_RECEIVER_EDITED(k)      (EXTERNAL_MODULE)\n#endif\n\n#if defined(BLUETOOTH)\nvoid onBluetoothConnectMenu(const char * result)\n{\n  if (result != STR_EXIT) {\n    uint8_t index = (result - reusableBuffer.moduleSetup.bt.devices[0]) / sizeof(reusableBuffer.moduleSetup.bt.devices[0]);\n    strncpy(bluetooth.distantAddr, reusableBuffer.moduleSetup.bt.devices[index], LEN_BLUETOOTH_ADDR);\n    bluetooth.state = BLUETOOTH_STATE_BIND_REQUESTED;\n  }\n  else {\n    reusableBuffer.moduleSetup.bt.devicesCount = 0;\n    bluetooth.state = BLUETOOTH_STATE_DISCOVER_END;\n  }\n}\n#endif\n\n#include \"common/stdlcd/model_setup_pxx1.cpp\"\n\nvoid onPXX2R9MBindModeMenu(const char * result)\n{\n  if (result == STR_16CH_WITH_TELEMETRY) {\n    reusableBuffer.moduleSetup.bindInformation.lbtMode = 1;\n  }\n  else if (result == STR_16CH_WITHOUT_TELEMETRY) {\n    reusableBuffer.moduleSetup.bindInformation.lbtMode = 2;\n  }\n  else if (result == STR_FLEX_915) {\n    reusableBuffer.moduleSetup.bindInformation.flexMode = 0;\n  }\n  else if (result == STR_FLEX_868) {\n    reusableBuffer.moduleSetup.bindInformation.flexMode = 1;\n  }\n  else {\n    // the user pressed [Exit]\n    uint8_t moduleIdx = CURRENT_MODULE_EDITED(menuVerticalPosition);\n    uint8_t receiverIdx = CURRENT_RECEIVER_EDITED(menuVerticalPosition);\n    moduleState[moduleIdx].mode = MODULE_MODE_NORMAL;\n    reusableBuffer.moduleSetup.bindInformation.step = 0;\n    removePXX2ReceiverIfEmpty(moduleIdx, receiverIdx);\n    return;\n  }\n\n#if defined(SIMU)\n  uint8_t moduleIdx = CURRENT_MODULE_EDITED(menuVerticalPosition);\n  uint8_t receiverIdx = CURRENT_RECEIVER_EDITED(menuVerticalPosition);\n  memcpy(g_model.moduleData[moduleIdx].pxx2.receiverName[receiverIdx], reusableBuffer.moduleSetup.bindInformation.candidateReceiversNames[reusableBuffer.moduleSetup.bindInformation.selectedReceiverIndex], PXX2_LEN_RX_NAME);\n  storageDirty(EE_MODEL);\n  moduleState[moduleIdx].mode = MODULE_MODE_NORMAL;\n  reusableBuffer.moduleSetup.bindInformation.step = BIND_OK;\n  POPUP_INFORMATION(STR_BIND_OK);\n#else\n  reusableBuffer.moduleSetup.bindInformation.step = BIND_START;\n#endif\n}\n\n// TODO code duplicated\n\n\nvoid onResetReceiverConfirm(const char * result)\n{\n  if (result == STR_OK) {\n    uint8_t moduleIdx = CURRENT_MODULE_EDITED(menuVerticalPosition - HEADER_LINE);\n    uint8_t receiverIdx = CURRENT_RECEIVER_EDITED(menuVerticalPosition - HEADER_LINE);\n    moduleState[moduleIdx].mode = MODULE_MODE_RESET;\n    removePXX2Receiver(moduleIdx, receiverIdx);\n  }\n}\n\nvoid onPXX2ReceiverMenu(const char * result)\n{\n  uint8_t moduleIdx = CURRENT_MODULE_EDITED(menuVerticalPosition - HEADER_LINE);\n  uint8_t receiverIdx = CURRENT_RECEIVER_EDITED(menuVerticalPosition - HEADER_LINE);\n\n  if (result == STR_OPTIONS) {\n    memclear(&reusableBuffer.hardwareAndSettings, sizeof(reusableBuffer.hardwareAndSettings));\n    reusableBuffer.hardwareAndSettings.receiverSettings.receiverId = receiverIdx;\n    g_moduleIdx = moduleIdx;\n    pushMenu(menuModelReceiverOptions);\n  }\n  else if (result == STR_BIND) {\n    memclear(&reusableBuffer.moduleSetup.bindInformation, sizeof(BindInformation));\n    reusableBuffer.moduleSetup.bindInformation.rxUid = receiverIdx;\n    if (isModuleR9MAccess(moduleIdx)) {\n      reusableBuffer.moduleSetup.bindInformation.step = BIND_MODULE_TX_INFORMATION_REQUEST;\n#if defined(SIMU)\n      reusableBuffer.moduleSetup.pxx2.moduleInformation.information.modelID = 1;\n      reusableBuffer.moduleSetup.pxx2.moduleInformation.information.variant = 2;\n#else\n      moduleState[moduleIdx].readModuleInformation(&reusableBuffer.moduleSetup.pxx2.moduleInformation, PXX2_HW_INFO_TX_ID, PXX2_HW_INFO_TX_ID);\n#endif\n    }\n    else {\n      moduleState[moduleIdx].startBind(&reusableBuffer.moduleSetup.bindInformation);\n    }\n    s_editMode = 1;\n  }\n  else if (result == STR_SHARE) {\n    reusableBuffer.moduleSetup.pxx2.shareReceiverIndex = receiverIdx;\n    moduleState[moduleIdx].mode = MODULE_MODE_SHARE;\n    s_editMode = 1;\n  }\n  else if (result == STR_DELETE || result == STR_RESET) {\n    memclear(&reusableBuffer.moduleSetup.pxx2, sizeof(reusableBuffer.moduleSetup.pxx2));\n    reusableBuffer.moduleSetup.pxx2.resetReceiverIndex = receiverIdx;\n    reusableBuffer.moduleSetup.pxx2.resetReceiverFlags = (result == STR_RESET ? 0xFF : 0x01);\n    POPUP_CONFIRMATION(result == STR_RESET ? STR_RECEIVER_RESET : STR_RECEIVER_DELETE, onResetReceiverConfirm);\n  }\n  else {\n    removePXX2ReceiverIfEmpty(moduleIdx, receiverIdx);\n  }\n}\n\n// TODO code duplicated\nvoid onPXX2BindMenu(const char * result)\n{\n  if (result != STR_EXIT) {\n    uint8_t moduleIdx = CURRENT_MODULE_EDITED(menuVerticalPosition - HEADER_LINE);\n    reusableBuffer.moduleSetup.bindInformation.selectedReceiverIndex = (result - reusableBuffer.moduleSetup.bindInformation.candidateReceiversNames[0]) / sizeof(reusableBuffer.moduleSetup.bindInformation.candidateReceiversNames[0]);\n    if (isModuleR9MAccess(moduleIdx) && reusableBuffer.moduleSetup.pxx2.moduleInformation.information.variant == PXX2_VARIANT_EU) {\n      reusableBuffer.moduleSetup.bindInformation.step = BIND_RX_NAME_SELECTED;\n      POPUP_MENU_ADD_ITEM(STR_16CH_WITH_TELEMETRY);\n      POPUP_MENU_ADD_ITEM(STR_16CH_WITHOUT_TELEMETRY);\n      POPUP_MENU_START(onPXX2R9MBindModeMenu);\n    }\n    else if (isModuleR9MAccess(moduleIdx) && reusableBuffer.moduleSetup.pxx2.moduleInformation.information.variant == PXX2_VARIANT_FLEX) {\n      reusableBuffer.moduleSetup.bindInformation.step = BIND_RX_NAME_SELECTED;\n      POPUP_MENU_ADD_ITEM(STR_FLEX_868);\n      POPUP_MENU_ADD_ITEM(STR_FLEX_915);\n      POPUP_MENU_START(onPXX2R9MBindModeMenu);\n    }\n    else {\n#if defined(SIMU)\n      uint8_t receiverIdx = CURRENT_RECEIVER_EDITED(menuVerticalPosition - HEADER_LINE);\n      memcpy(g_model.moduleData[moduleIdx].pxx2.receiverName[receiverIdx], result, PXX2_LEN_RX_NAME);\n      storageDirty(EE_MODEL);\n      moduleState[moduleIdx].mode = MODULE_MODE_NORMAL;\n      reusableBuffer.moduleSetup.bindInformation.step = BIND_OK;\n      POPUP_INFORMATION(STR_BIND_OK);\n#else\n      reusableBuffer.moduleSetup.bindInformation.step = BIND_START;\n#endif\n    }\n  }\n  else {\n    // the user pressed [Exit]\n    uint8_t moduleIdx = CURRENT_MODULE_EDITED(menuVerticalPosition - HEADER_LINE);\n    uint8_t receiverIdx = CURRENT_RECEIVER_EDITED(menuVerticalPosition - HEADER_LINE);\n    moduleState[moduleIdx].mode = MODULE_MODE_NORMAL;\n    removePXX2ReceiverIfEmpty(moduleIdx, receiverIdx);\n    s_editMode = 0;\n  }\n}\n\nenum PopupRegisterItems {\n  ITEM_REGISTER_PASSWORD,\n  ITEM_REGISTER_MODULE_INDEX,\n  ITEM_REGISTER_RECEIVER_NAME,\n  ITEM_REGISTER_BUTTONS\n};\n\nconstexpr coord_t REGISTER_TOP = POPUP_Y + 10;\nconstexpr coord_t REGISTER_H = 6 * FH - 4;\nconstexpr coord_t REGISTER_COLUMN_1 = POPUP_X + 10;\nconstexpr coord_t REGISTER_COLUMN_2 = POPUP_X + 150;\n\nvoid runPopupRegister(event_t event)\n{\n  uint8_t backupVerticalPosition = menuVerticalPosition;\n  uint8_t backupHorizontalPosition = menuHorizontalPosition;\n  uint8_t backupVerticalOffset = menuVerticalOffset;\n  int8_t backupEditMode = s_editMode;\n\n  menuVerticalPosition = reusableBuffer.moduleSetup.pxx2.registerPopupVerticalPosition;\n  menuHorizontalPosition = reusableBuffer.moduleSetup.pxx2.registerPopupHorizontalPosition;\n  s_editMode = reusableBuffer.moduleSetup.pxx2.registerPopupEditMode;\n\n  switch (event) {\n    case EVT_KEY_BREAK(KEY_ENTER):\n      if (menuVerticalPosition != ITEM_REGISTER_BUTTONS) {\n        break;\n      }\n      else if (reusableBuffer.moduleSetup.pxx2.registerStep >= REGISTER_RX_NAME_RECEIVED && menuHorizontalPosition == 0) {\n        // [Enter] pressed\n        reusableBuffer.moduleSetup.pxx2.registerStep = REGISTER_RX_NAME_SELECTED;\n        backupEditMode = EDIT_MODIFY_FIELD; // so that the [Register] button blinks and the REGISTER process can continue\n      }\n      // no break\n\n    case EVT_KEY_LONG(KEY_EXIT):\n      s_editMode = 0;\n      // no break;\n\n    case EVT_KEY_FIRST(KEY_EXIT):\n      if (s_editMode <= 0) {\n        warningText = nullptr;\n      }\n      break;\n  }\n\n  if (warningText) {\n    const uint8_t dialogRows[] = { 0, 0, uint8_t(reusableBuffer.moduleSetup.pxx2.registerStep < REGISTER_RX_NAME_RECEIVED ? READONLY_ROW : 0), uint8_t(reusableBuffer.moduleSetup.pxx2.registerStep < REGISTER_RX_NAME_RECEIVED ? 0 : 1)};\n    check(event, 0, nullptr, 0, dialogRows, 3, 4); // TODO add a comment for 3 - HEADER_LINE once understood\n\n    drawPopupBackgroundAndBorder(POPUP_X, REGISTER_TOP, POPUP_W, REGISTER_H);\n    // showMessageBox(warningText);\n\n    // registration password\n    lcdDrawText(REGISTER_COLUMN_1, REGISTER_TOP + 8, STR_REG_ID);\n    editName(REGISTER_COLUMN_2, REGISTER_TOP + 8, g_model.modelRegistrationID, PXX2_LEN_REGISTRATION_ID, event, menuVerticalPosition == ITEM_REGISTER_PASSWORD);\n\n    // loop index (will be removed in future)\n    lcdDrawText(REGISTER_COLUMN_1, REGISTER_TOP + 8 + FH, \"UID\");\n    lcdDrawNumber(REGISTER_COLUMN_2, REGISTER_TOP + 8 + FH, reusableBuffer.moduleSetup.pxx2.registerLoopIndex, menuVerticalPosition == ITEM_REGISTER_MODULE_INDEX ? (s_editMode ? INVERS + BLINK : INVERS) : 0);\n    if (menuVerticalPosition == ITEM_REGISTER_MODULE_INDEX && s_editMode) {\n      CHECK_INCDEC_MODELVAR_ZERO(event, reusableBuffer.moduleSetup.pxx2.registerLoopIndex, 2);\n    }\n\n    // RX name\n    if (reusableBuffer.moduleSetup.pxx2.registerStep < REGISTER_RX_NAME_RECEIVED) {\n      lcdDrawText(REGISTER_COLUMN_1, REGISTER_TOP + 8 + 2 * FH, STR_WAITING);\n      lcdDrawText(REGISTER_COLUMN_1, REGISTER_TOP + 8 + 4 * FH, TR_EXIT, menuVerticalPosition == ITEM_REGISTER_BUTTONS ? INVERS : 0);\n    }\n    else {\n      lcdDrawText(REGISTER_COLUMN_1, REGISTER_TOP + 8 + 2 * FH, STR_RX_NAME);\n      editName(REGISTER_COLUMN_2, REGISTER_TOP + 8 + 2 * FH, reusableBuffer.moduleSetup.pxx2.registerRxName, PXX2_LEN_RX_NAME, event, menuVerticalPosition == ITEM_REGISTER_RECEIVER_NAME);\n      lcdDrawText(REGISTER_COLUMN_1, REGISTER_TOP + 8 + 4 * FH, TR_ENTER, menuVerticalPosition == ITEM_REGISTER_BUTTONS && menuHorizontalPosition == 0 ? INVERS : 0);\n      lcdDrawText(REGISTER_COLUMN_2, REGISTER_TOP + 8 + 4 * FH, TR_EXIT, menuVerticalPosition == ITEM_REGISTER_BUTTONS && menuHorizontalPosition == 1 ? INVERS : 0);\n    }\n\n    reusableBuffer.moduleSetup.pxx2.registerPopupVerticalPosition = menuVerticalPosition;\n    reusableBuffer.moduleSetup.pxx2.registerPopupHorizontalPosition = menuHorizontalPosition;\n    reusableBuffer.moduleSetup.pxx2.registerPopupEditMode = s_editMode;\n  }\n\n  menuVerticalPosition = backupVerticalPosition;\n  menuHorizontalPosition = backupHorizontalPosition;\n  menuVerticalOffset = backupVerticalOffset;\n  s_editMode = backupEditMode;\n}\n\nvoid startRegisterDialog(uint8_t module)\n{\n  memclear(&reusableBuffer.moduleSetup.pxx2, sizeof(reusableBuffer.moduleSetup.pxx2));\n  moduleState[module].mode = MODULE_MODE_REGISTER;\n  s_editMode = 0;\n  POPUP_INPUT(\"\", runPopupRegister);\n}\n\nvoid checkModelIdUnique(uint8_t moduleIdx)\n{\n  if (isModuleXJTD8(moduleIdx))\n    return;\n\n  char * warn_buf = reusableBuffer.moduleSetup.msg;\n\n  // cannot rely exactly on WARNING_LINE_LEN so using WARNING_LINE_LEN-2\n  size_t warn_buf_len = sizeof(reusableBuffer.moduleSetup.msg) - WARNING_LINE_LEN - 2;\n  if (!modelslist.isModelIdUnique(moduleIdx, warn_buf, warn_buf_len)) {\n    if (warn_buf[0] != 0) {\n      POPUP_WARNING(STR_MODELIDUSED);\n      SET_WARNING_INFO(warn_buf, sizeof(reusableBuffer.moduleSetup.msg), 0);\n    }\n  }\n}\n\nvoid onModelSetupBitmapMenu(const char * result)\n{\n  if (result == STR_UPDATE_LIST) {\n    if (!sdListFiles(BITMAPS_PATH, BITMAPS_EXT, sizeof(g_model.header.bitmap)-LEN_BITMAPS_EXT, NULL)) {\n      POPUP_WARNING(STR_NO_BITMAPS_ON_SD);\n    }\n  }\n  else if (result != STR_EXIT) {\n    // The user choosed a bmp file in the list\n    copySelection(g_model.header.bitmap, result, sizeof(g_model.header.bitmap));\n    storageDirty(EE_MODEL);\n    if (modelslist.getCurrentModel())\n      modelslist.getCurrentModel()->resetBuffer();\n  }\n}\n\nvoid editTimerMode(int timerIdx, coord_t y, LcdFlags attr, event_t event)\n{\n  TimerData & timer = g_model.timers[timerIdx];\n  if (attr && menuHorizontalPosition < 0) {\n    lcdDrawSolidFilledRect(MODEL_SETUP_2ND_COLUMN-INVERT_HORZ_MARGIN, y-INVERT_VERT_MARGIN+1, 115+2*INVERT_HORZ_MARGIN, INVERT_LINE_HEIGHT, TEXT_INVERTED_BGCOLOR);\n  }\n  drawStringWithIndex(MENUS_MARGIN_LEFT, y, STR_TIMER, timerIdx+1);\n  drawTimerMode(MODEL_SETUP_2ND_COLUMN, y, timer.mode, (menuHorizontalPosition<=0 ? attr : 0));\n  drawTimer(MODEL_SETUP_2ND_COLUMN+50, y, timer.start, (menuHorizontalPosition!=0 ? attr|TIMEHOUR : TIMEHOUR));\n  if (attr && s_editMode>0) {\n    switch (menuHorizontalPosition) {\n      case 0:\n      {\n        int32_t timerMode = timer.mode;\n        if (timerMode < 0) timerMode -= TMRMODE_COUNT-1;\n        CHECK_INCDEC_MODELVAR_CHECK(event, timerMode, -TMRMODE_COUNT-SWSRC_LAST+1, TMRMODE_COUNT+SWSRC_LAST-1, isSwitchAvailableInTimers);\n        if (timerMode < 0) timerMode += TMRMODE_COUNT-1;\n        timer.mode = timerMode;\n#if defined(AUTOSWITCH)\n        if (s_editMode>0) {\n          int8_t val = timer.mode - (TMRMODE_COUNT-1);\n          int8_t switchVal = checkIncDecMovedSwitch(val);\n          if (val != switchVal) {\n            timer.mode = switchVal + (TMRMODE_COUNT-1);\n            storageDirty(EE_MODEL);\n          }\n        }\n#endif\n        break;\n      }\n      case 1:\n      {\n        const int stopsMinutes[] = { 8, 60, 120, 180, 240, 300, 600, 900, 1200 };\n        timer.start = checkIncDec(event, timer.start, 0, TIMER_MAX, EE_MODEL, NULL, (const CheckIncDecStops&)stopsMinutes);\n        break;\n      }\n    }\n  }\n}\n\nvoid editTimerCountdown(int timerIdx, coord_t y, LcdFlags attr, event_t event)\n{\n  TimerData & timer = g_model.timers[timerIdx];\n  lcdDrawText(MENUS_MARGIN_LEFT, y, STR_BEEPCOUNTDOWN);\n  lcdDrawTextAtIndex(MODEL_SETUP_2ND_COLUMN, y, STR_VBEEPCOUNTDOWN, timer.countdownBeep, (menuHorizontalPosition == 0 ? attr : 0));\n  if (timer.countdownBeep != COUNTDOWN_SILENT) {\n    lcdDrawNumber(MODEL_SETUP_3RD_COLUMN, y, TIMER_COUNTDOWN_START(timerIdx), (menuHorizontalPosition == 1 ? attr : 0) | LEFT, 0, NULL, \"s\");\n  }\n  if (attr && s_editMode > 0) {\n    switch (menuHorizontalPosition) {\n      case 0:\n        CHECK_INCDEC_MODELVAR(event, timer.countdownBeep, COUNTDOWN_SILENT, COUNTDOWN_COUNT - 1);\n        break;\n      case 1:\n        timer.countdownStart = -checkIncDecModel(event, -timer.countdownStart, -1, +2);\n        break;\n    }\n  }\n}\n\nint getSwitchWarningsCount()\n{\n  int count = 0;\n  for (int i=0; i<NUM_SWITCHES; ++i) {\n    if (SWITCH_WARNING_ALLOWED(i)) {\n      ++count;\n    }\n  }\n  return count;\n}\n\n#define IF_INTERNAL_MODULE_ON(x)             (IS_INTERNAL_MODULE_ENABLED() ? (uint8_t)(x) : HIDDEN_ROW)\n#define IF_EXTERNAL_MODULE_ON(x)             (IS_EXTERNAL_MODULE_ENABLED() ? (uint8_t)(x) : HIDDEN_ROW)\n\n#define IF_PXX2_MODULE(module, xxx)          (isModulePXX2(module) ? (uint8_t)(xxx) : HIDDEN_ROW)\n#define IF_NOT_PXX2_MODULE(module, xxx)      (isModulePXX2(module) ? HIDDEN_ROW : (uint8_t)(xxx))\n#define IF_ACCESS_MODULE_RF(module, xxx)     (isModuleRFAccess(module) ? (uint8_t)(xxx) : HIDDEN_ROW)\n#define IF_NOT_ACCESS_MODULE_RF(module, xxx) (isModuleRFAccess(module) ? HIDDEN_ROW : (uint8_t)(xxx))\n\n#define TIMER_ROWS(x)                        NAVIGATION_LINE_BY_LINE|1, 0, 0, 0, g_model.timers[x].countdownBeep != COUNTDOWN_SILENT ? (uint8_t)1 : (uint8_t)0\n\ninline uint8_t MODULE_TYPE_ROWS(int moduleIdx)\n{\n  if (isModuleXJT(moduleIdx) || isModuleR9MNonAccess(moduleIdx) || isModuleDSM2(moduleIdx) || isModulePXX2(moduleIdx))\n    return 1;\n#if defined(MULTIMODULE)\n  else if (isModuleMultimodule(moduleIdx)) {\n    return 1 + MULTIMODULE_RFPROTO_COLUMNS(moduleIdx);\n  }\n#endif\n  else\n    return 0;\n}\n\n#if TIMERS == 1\n#define TIMERS_ROWS                          TIMER_ROWS(0)\n#elif TIMERS == 2\n#define TIMERS_ROWS                          TIMER_ROWS(0), TIMER_ROWS(1)\n#elif TIMERS == 3\n#define TIMERS_ROWS                          TIMER_ROWS(0), TIMER_ROWS(1), TIMER_ROWS(2)\n#endif\n\n#if defined(BLUETOOTH)\n#define TRAINER_CHANNELS_ROW                 (g_model.trainerData.mode == TRAINER_MODE_SLAVE ? (uint8_t)1 : (g_model.trainerData.mode == TRAINER_MODE_SLAVE_BLUETOOTH ? (uint8_t)0 : HIDDEN_ROW))\n#define TRAINER_PPM_PARAMS_ROW               (g_model.trainerData.mode == TRAINER_MODE_SLAVE ? (uint8_t)2 : HIDDEN_ROW)\n#define IF_BT_TRAINER_ON(x)                  (g_eeGeneral.bluetoothMode == BLUETOOTH_TRAINER ? (uint8_t)(x) : HIDDEN_ROW)\n#define TRAINER_BLUETOOTH_M_ROW              ((bluetooth.distantAddr[0] == '\\0' || bluetooth.state == BLUETOOTH_STATE_CONNECTED) ? (uint8_t)0 : (uint8_t)1)\n#define TRAINER_BLUETOOTH_S_ROW              (bluetooth.distantAddr[0] == '\\0' ? HIDDEN_ROW : LABEL())\n#define TRAINER_BLUETOOTH_ROW                (g_model.trainerData.mode == TRAINER_MODE_MASTER_BLUETOOTH ? TRAINER_BLUETOOTH_M_ROW : (g_model.trainerData.mode == TRAINER_MODE_SLAVE_BLUETOOTH ? TRAINER_BLUETOOTH_S_ROW : HIDDEN_ROW))\n#define TRAINER_ROWS                         LABEL(Trainer), 0, IF_BT_TRAINER_ON(TRAINER_BLUETOOTH_ROW), TRAINER_CHANNELS_ROW, TRAINER_PPM_PARAMS_ROW\n#else\n#define TRAINER_CHANNELS_ROW                 (g_model.trainerData.mode == TRAINER_MODE_SLAVE ? (uint8_t)1 :  HIDDEN_ROW)\n#define TRAINER_PPM_PARAMS_ROW               (HIDDEN_ROW)\n#define TRAINER_ROWS                         LABEL(Trainer), 0, TRAINER_CHANNELS_ROW, TRAINER_PPM_PARAMS_ROW\n#endif\n\n#if defined(PXX2)\n#define REGISTRATION_ID_ROWS                 uint8_t((isDefaultModelRegistrationID() || (warningText && popupFunc == runPopupRegister)) ? HIDDEN_ROW : READONLY_ROW),\n#else\n#define REGISTRATION_ID_ROWS\n#endif\n\n#if defined(INTERNAL_MODULE_PXX1) && defined(EXTERNAL_ANTENNA)\n#define EXTERNAL_ANTENNA_ROW                 ((isModuleXJT(INTERNAL_MODULE) && g_eeGeneral.antennaMode == ANTENNA_MODE_PER_MODEL) ? (uint8_t)0 : HIDDEN_ROW),\nvoid onModelAntennaSwitchConfirm(const char * result)\n{\n  if (result == STR_OK) {\n    // Switch to external antenna confirmation\n    g_model.moduleData[INTERNAL_MODULE].pxx.antennaMode = ANTENNA_MODE_EXTERNAL;\n    globalData.externalAntennaEnabled = true;\n    storageDirty(EE_MODEL);\n  }\n  else {\n    reusableBuffer.moduleSetup.antennaMode = g_model.moduleData[INTERNAL_MODULE].pxx.antennaMode;\n  }\n}\n#else\n#define EXTERNAL_ANTENNA_ROW\n#endif\n\n#if defined(HARDWARE_INTERNAL_MODULE)\n  #define INTERNAL_MODULE_ROWS \\\n         LABEL(InternalModule), \\\n         MODULE_TYPE_ROWS(INTERNAL_MODULE),         /* ITEM_MODEL_SETUP_INTERNAL_MODULE_TYPE*/ \\\n         MULTIMODULE_STATUS_ROWS(INTERNAL_MODULE)   /* ITEM_MODEL_SETUP_INTERNAL_MODULE_STATUS, ITEM_MODEL_SETUP_INTERNAL_MODULE_SYNCSTATUS */ \\\n         MODULE_CHANNELS_ROWS(INTERNAL_MODULE),     /* ITEM_MODEL_SETUP_INTERNAL_MODULE_CHANNELS*/ \\\n         IF_NOT_ACCESS_MODULE_RF(INTERNAL_MODULE, IF_INTERNAL_MODULE_ON(IF_INTERNAL_MODULE_ON(isModuleRxNumAvailable(INTERNAL_MODULE) ? (uint8_t)2 : (uint8_t)1))), /* *ITEM_MODEL_SETUP_INTERNAL_MODULE_NOT_ACCESS_RXNUM_BIND_RANGE */\\\n         IF_ACCESS_MODULE_RF(INTERNAL_MODULE, 0),   /* ITEM_MODEL_SETUP_INTERNAL_MODULE_PXX2_MODEL_NUM*/ \\\n         MODULE_OPTION_ROW(INTERNAL_MODULE),        /* ITEM_MODEL_SETUP_INTERNAL_MODULE_OPTIONS */ \\\n         MULTIMODULE_MODULE_ROWS(INTERNAL_MODULE)   /* ITEM_MODEL_SETUP_INTERNAL_MODULE_AUTOBIND */  \\\n                                                    /* ITEM_MODEL_SETUP_INTERNAL_MODULE_DISABLE_TELEM */ \\\n                                                    /* ITEM_MODEL_SETUP_INTERNAL_MODULE_DISABLE_MAPPING */ \\\n         EXTERNAL_ANTENNA_ROW                       /* ITEM_MODEL_SETUP_INTERNAL_MODULE_ANTENNA */ \\\n         MODULE_POWER_ROW(INTERNAL_MODULE),         /* ITEM_MODEL_SETUP_INTERNAL_MODULE_POWER */ \\\n         IF_INTERNAL_MODULE_ON(FAILSAFE_ROWS(INTERNAL_MODULE)), /* ITEM_MODEL_SETUP_INTERNAL_MODULE_FAILSAFE */ \\\n         IF_ACCESS_MODULE_RF(INTERNAL_MODULE, 1),   /* ITEM_MODEL_SETUP_INTERNAL_MODULE_PXX2_REGISTER_RANGE */ \\\n         IF_PXX2_MODULE(INTERNAL_MODULE, 0),        /* ITEM_MODEL_SETUP_INTERNAL_MODULE_PXX2_OPTIONS*/ \\\n         IF_ACCESS_MODULE_RF(INTERNAL_MODULE, 0),   /* ITEM_MODEL_SETUP_INTERNAL_MODULE_PXX2_RECEIVER_1 */ \\\n         IF_ACCESS_MODULE_RF(INTERNAL_MODULE, 0),   /* ITEM_MODEL_SETUP_INTERNAL_MODULE_PXX2_RECEIVER_2 */ \\\n         IF_ACCESS_MODULE_RF(INTERNAL_MODULE, 0),   /* ITEM_MODEL_SETUP_INTERNAL_MODULE_PXX2_RECEIVER_3 */\n#else\n  #define INTERNAL_MODULE_ROWS\n#endif\n\n\nbool menuModelSetup(event_t event)\n{\n  bool CURSOR_ON_CELL = (menuHorizontalPosition >= 0);\n\n  int8_t old_editMode = s_editMode;\n\n  MENU(STR_MENUSETUP, MODEL_ICONS, menuTabModel, MENU_MODEL_SETUP, ITEM_MODEL_SETUP_MAX,\n       { 0, // Model name\n         0, // Model bitmap\n         TIMERS_ROWS,\n         0, // Extended limits\n         1, // Extended trims\n         0, // Show trims\n         0, // Trims step\n\n         LABEL(Throttle),\n           0, // Throttle reverse\n           0, // Throttle trace source\n           0, // Throttle trim\n\n         LABEL(PreflightCheck),\n           0, // Display checklist\n           0, // Throttle state\n           uint8_t(NAVIGATION_LINE_BY_LINE|(getSwitchWarningsCount()-1)), // Switches warnings\n           0, // Pots & Sliders warning mode\n           g_model.potsWarnMode ? uint8_t(NAVIGATION_LINE_BY_LINE|(NUM_POTS-1)) : HIDDEN_ROW, // Pots positions\n           g_model.potsWarnMode ? uint8_t(NAVIGATION_LINE_BY_LINE|(NUM_SLIDERS-1)) : HIDDEN_ROW, // Sliders positions\n\n         NAVIGATION_LINE_BY_LINE|(NUM_STICKS+NUM_POTS+NUM_SLIDERS-1), // Center beeps\n         0, // Global functions\n\n         REGISTRATION_ID_ROWS\n\n         INTERNAL_MODULE_ROWS\n\n         LABEL(ExternalModule),\n           MODULE_TYPE_ROWS(EXTERNAL_MODULE),\n           MULTIMODULE_STATUS_ROWS(EXTERNAL_MODULE)\n           MODULE_CHANNELS_ROWS(EXTERNAL_MODULE),\n           IF_NOT_ACCESS_MODULE_RF(EXTERNAL_MODULE, MODULE_BIND_ROWS(EXTERNAL_MODULE)),\n           IF_ACCESS_MODULE_RF(EXTERNAL_MODULE, 0),   // RxNum for ACCESS\n           IF_NOT_PXX2_MODULE(EXTERNAL_MODULE, MODULE_OPTION_ROW(EXTERNAL_MODULE)),\n           MULTIMODULE_MODULE_ROWS(EXTERNAL_MODULE)\n           MODULE_POWER_ROW(EXTERNAL_MODULE),\n           FAILSAFE_ROWS(EXTERNAL_MODULE),\n           IF_ACCESS_MODULE_RF(EXTERNAL_MODULE, 1),   // Range check and Register buttons\n           IF_PXX2_MODULE(EXTERNAL_MODULE, 0),        // Module options\n           IF_ACCESS_MODULE_RF(EXTERNAL_MODULE, 0),   // Receiver 1\n           IF_ACCESS_MODULE_RF(EXTERNAL_MODULE, 0),   // Receiver 2\n           IF_ACCESS_MODULE_RF(EXTERNAL_MODULE, 0),   // Receiver 3\n\n         TRAINER_ROWS\n       });\n\n  if (event == EVT_ENTRY || event == EVT_ENTRY_UP) {\n    memclear(&reusableBuffer.moduleSetup, sizeof(reusableBuffer.moduleSetup));\n    reusableBuffer.moduleSetup.r9mPower = g_model.moduleData[EXTERNAL_MODULE].pxx.power;\n    reusableBuffer.moduleSetup.previousType = g_model.moduleData[EXTERNAL_MODULE].type;\n    reusableBuffer.moduleSetup.newType = g_model.moduleData[EXTERNAL_MODULE].type;\n#if defined(INTERNAL_MODULE_PXX1) && defined(EXTERNAL_ANTENNA)\n    reusableBuffer.moduleSetup.antennaMode = g_model.moduleData[INTERNAL_MODULE].pxx.antennaMode;\n#endif\n  }\n\n  if (menuEvent) {\n    moduleState[0].mode = 0;\n    moduleState[1].mode = 0;\n  }\n\n  int sub = menuVerticalPosition;\n\n  for (uint8_t i = 0; i < NUM_BODY_LINES; ++i) {\n    coord_t y = MENU_CONTENT_TOP + i*FH;\n    uint8_t k = i + menuVerticalOffset;\n    for (int j = 0; j <= k; j++) {\n      if (mstate_tab[j] == HIDDEN_ROW)\n        k++;\n    }\n    uint8_t moduleIdx = CURRENT_MODULE_EDITED(k);\n    LcdFlags blink = ((s_editMode>0) ? BLINK|INVERS : INVERS);\n    LcdFlags attr = (sub == k ? blink : 0);\n\n    switch (k) {\n      case ITEM_MODEL_SETUP_NAME:\n        lcdDrawText(MENUS_MARGIN_LEFT, y, STR_MODELNAME);\n        editName(MODEL_SETUP_2ND_COLUMN, y, g_model.header.name, sizeof(g_model.header.name), event, attr);\n        break;\n\n      case ITEM_MODEL_SETUP_BITMAP:\n        lcdDrawText(MENUS_MARGIN_LEFT, y, STR_BITMAP);\n        if (ZEXIST(g_model.header.bitmap))\n          lcdDrawSizedText(MODEL_SETUP_2ND_COLUMN, y, g_model.header.bitmap, sizeof(g_model.header.bitmap), attr);\n        else\n          lcdDrawTextAtIndex(MODEL_SETUP_2ND_COLUMN, y, STR_VCSWFUNC, 0, attr);\n        if (attr && event==EVT_KEY_BREAK(KEY_ENTER) && READ_ONLY_UNLOCKED()) {\n          s_editMode = 0;\n          if (sdListFiles(BITMAPS_PATH, BITMAPS_EXT, sizeof(g_model.header.bitmap)-LEN_BITMAPS_EXT, g_model.header.bitmap, LIST_NONE_SD_FILE | LIST_SD_FILE_EXT)) {\n            POPUP_MENU_START(onModelSetupBitmapMenu);\n          }\n          else {\n            POPUP_WARNING(STR_NO_BITMAPS_ON_SD);\n          }\n        }\n        break;\n\n      case ITEM_MODEL_SETUP_TIMER1:\n        editTimerMode(0, y, attr, event);\n        break;\n\n      case ITEM_MODEL_SETUP_TIMER1_NAME:\n        lcdDrawText(MENUS_MARGIN_LEFT, y, INDENT TR_NAME);\n        editName(MODEL_SETUP_2ND_COLUMN, y, g_model.timers[0].name, LEN_TIMER_NAME, event, attr);\n        break;\n\n      case ITEM_MODEL_SETUP_TIMER1_MINUTE_BEEP:\n        lcdDrawText(MENUS_MARGIN_LEFT, y, INDENT TR_MINUTEBEEP);\n        g_model.timers[0].minuteBeep = editCheckBox(g_model.timers[0].minuteBeep, MODEL_SETUP_2ND_COLUMN, y, attr, event);\n        break;\n\n      case ITEM_MODEL_SETUP_TIMER1_COUNTDOWN_BEEP:\n        editTimerCountdown(0, y, attr, event);\n        break;\n\n      case ITEM_MODEL_SETUP_TIMER1_PERSISTENT:\n        lcdDrawText(MENUS_MARGIN_LEFT, y, STR_PERSISTENT);\n        g_model.timers[0].persistent = editChoice(MODEL_SETUP_2ND_COLUMN, y, STR_VPERSISTENT, g_model.timers[0].persistent, 0, 2, attr, event);\n        break;\n\n#if TIMERS > 1\n      case ITEM_MODEL_SETUP_TIMER2:\n        editTimerMode(1, y, attr, event);\n        break;\n\n      case ITEM_MODEL_SETUP_TIMER2_NAME:\n        lcdDrawText(MENUS_MARGIN_LEFT, y, INDENT TR_NAME);\n        editName(MODEL_SETUP_2ND_COLUMN, y, g_model.timers[1].name, LEN_TIMER_NAME, event, attr);\n        break;\n\n      case ITEM_MODEL_SETUP_TIMER2_MINUTE_BEEP:\n        lcdDrawText(MENUS_MARGIN_LEFT, y, INDENT TR_MINUTEBEEP);\n        g_model.timers[1].minuteBeep = editCheckBox(g_model.timers[1].minuteBeep, MODEL_SETUP_2ND_COLUMN, y, attr, event);\n        break;\n\n      case ITEM_MODEL_SETUP_TIMER2_COUNTDOWN_BEEP:\n        editTimerCountdown(1, y, attr, event);\n        break;\n\n      case ITEM_MODEL_SETUP_TIMER2_PERSISTENT:\n        lcdDrawText(MENUS_MARGIN_LEFT, y, STR_PERSISTENT);\n        g_model.timers[1].persistent = editChoice(MODEL_SETUP_2ND_COLUMN, y, STR_VPERSISTENT, g_model.timers[1].persistent, 0, 2, attr, event);\n        break;\n#endif\n\n#if TIMERS > 2\n      case ITEM_MODEL_SETUP_TIMER3:\n        editTimerMode(2, y, attr, event);\n        break;\n\n      case ITEM_MODEL_SETUP_TIMER3_NAME:\n        lcdDrawText(MENUS_MARGIN_LEFT, y, INDENT TR_NAME);\n        editName(MODEL_SETUP_2ND_COLUMN, y, g_model.timers[2].name, LEN_TIMER_NAME, event, attr);\n        break;\n\n      case ITEM_MODEL_SETUP_TIMER3_MINUTE_BEEP:\n        lcdDrawText(MENUS_MARGIN_LEFT, y, INDENT TR_MINUTEBEEP);\n        g_model.timers[2].minuteBeep = editCheckBox(g_model.timers[2].minuteBeep, MODEL_SETUP_2ND_COLUMN, y, attr, event);\n        break;\n\n      case ITEM_MODEL_SETUP_TIMER3_COUNTDOWN_BEEP:\n        editTimerCountdown(2, y, attr, event);\n        break;\n\n      case ITEM_MODEL_SETUP_TIMER3_PERSISTENT:\n        lcdDrawText(MENUS_MARGIN_LEFT, y, STR_PERSISTENT);\n        g_model.timers[2].persistent = editChoice(MODEL_SETUP_2ND_COLUMN, y, STR_VPERSISTENT, g_model.timers[2].persistent, 0, 2, attr, event);\n        break;\n#endif\n\n      case ITEM_MODEL_SETUP_EXTENDED_LIMITS:\n        lcdDrawText(MENUS_MARGIN_LEFT, y, STR_ELIMITS);\n        g_model.extendedLimits = editCheckBox(g_model.extendedLimits, MODEL_SETUP_2ND_COLUMN, y, attr, event);\n        break;\n\n      case ITEM_MODEL_SETUP_EXTENDED_TRIMS:\n        lcdDrawText(MENUS_MARGIN_LEFT, y, STR_ETRIMS);\n        g_model.extendedTrims = editCheckBox(g_model.extendedTrims, MODEL_SETUP_2ND_COLUMN, y, menuHorizontalPosition<=0 ? attr : 0, event==EVT_KEY_BREAK(KEY_ENTER) ? event : 0);\n        lcdDrawText(MODEL_SETUP_2ND_COLUMN+18, y, STR_RESET_BTN, menuHorizontalPosition>0  && !NO_HIGHLIGHT() ? attr : 0);\n        if (attr && menuHorizontalPosition>0) {\n          s_editMode = 0;\n          if (event==EVT_KEY_LONG(KEY_ENTER)) {\n            START_NO_HIGHLIGHT();\n            for (uint8_t i=0; i<MAX_FLIGHT_MODES; i++) {\n              memclear(&g_model.flightModeData[i], TRIMS_ARRAY_SIZE);\n            }\n            storageDirty(EE_MODEL);\n            AUDIO_WARNING1();\n          }\n        }\n        break;\n\n      case ITEM_MODEL_SETUP_DISPLAY_TRIMS:\n        lcdDrawText(MENUS_MARGIN_LEFT, y, STR_DISPLAY_TRIMS);\n        g_model.displayTrims = editChoice(MODEL_SETUP_2ND_COLUMN, y, STR_VDISPLAYTRIMS, g_model.displayTrims, 0, 2, attr, event);\n        break;\n\n      case ITEM_MODEL_SETUP_TRIM_INC:\n        lcdDrawText(MENUS_MARGIN_LEFT, y, STR_TRIMINC);\n        g_model.trimInc = editChoice(MODEL_SETUP_2ND_COLUMN, y, STR_VTRIMINC, g_model.trimInc, -2, 2, attr, event);\n        break;\n\n      case ITEM_MODEL_SETUP_THROTTLE_LABEL:\n        lcdDrawText(MENUS_MARGIN_LEFT, y, STR_THROTTLE_LABEL);\n        break;\n\n      case ITEM_MODEL_SETUP_THROTTLE_REVERSED:\n        lcdDrawText(MENUS_MARGIN_LEFT, y, STR_THROTTLEREVERSE);\n        g_model.throttleReversed = editCheckBox(g_model.throttleReversed, MODEL_SETUP_2ND_COLUMN, y, attr, event);\n        break;\n\n      case ITEM_MODEL_SETUP_THROTTLE_TRACE:\n      {\n        lcdDrawText(MENUS_MARGIN_LEFT, y, STR_TTRACE);\n        // check if source is available (EXT1 & EXT2 on X10)\n        if (attr) CHECK_INCDEC_MODELVAR_ZERO_CHECK(event, g_model.thrTraceSrc, NUM_POTS+NUM_SLIDERS+MAX_OUTPUT_CHANNELS, isThrottleSourceAvailable);\n        uint8_t idx = g_model.thrTraceSrc + MIXSRC_Thr;\n        if (idx > MIXSRC_Thr)\n          idx += 1;\n        if (idx >= MIXSRC_FIRST_POT+NUM_POTS+NUM_SLIDERS)\n          idx += MIXSRC_CH1 - MIXSRC_FIRST_POT - NUM_POTS - NUM_SLIDERS;\n        drawSource(MODEL_SETUP_2ND_COLUMN, y, idx, attr);\n        break;\n      }\n\n      case ITEM_MODEL_SETUP_THROTTLE_TRIM:\n        lcdDrawText(MENUS_MARGIN_LEFT, y, STR_TTRIM);\n        g_model.thrTrim = editCheckBox(g_model.thrTrim, MODEL_SETUP_2ND_COLUMN, y, attr, event);\n        break;\n\n      case ITEM_MODEL_SETUP_PREFLIGHT_LABEL:\n        lcdDrawText(MENUS_MARGIN_LEFT, y, STR_PREFLIGHT);\n        break;\n\n      case ITEM_MODEL_SETUP_CHECKLIST_DISPLAY:\n        lcdDrawText(MENUS_MARGIN_LEFT, y, STR_CHECKLIST);\n        g_model.displayChecklist = editCheckBox(g_model.displayChecklist, MODEL_SETUP_2ND_COLUMN, y, attr, event);\n        break;\n\n      case ITEM_MODEL_SETUP_THROTTLE_WARNING:\n        lcdDrawText(MENUS_MARGIN_LEFT, y, STR_THROTTLEWARNING);\n        g_model.disableThrottleWarning = !editCheckBox(!g_model.disableThrottleWarning, MODEL_SETUP_2ND_COLUMN, y, attr, event);\n        break;\n\n      case ITEM_MODEL_SETUP_SWITCHES_WARNING:\n      {\n        lcdDrawText(MENUS_MARGIN_LEFT, y, STR_SWITCHWARNING);\n        if (!READ_ONLY() && attr && menuHorizontalPosition<0 && event==EVT_KEY_LONG(KEY_ENTER)) {\n          killEvents(event);\n          START_NO_HIGHLIGHT();\n          getMovedSwitch();\n          for (int i=0; i<NUM_SWITCHES; i++) {\n            bool enabled = ((g_model.switchWarningState >> (3*i)) & 0x07);\n            if (enabled) {\n              g_model.switchWarningState &= ~(0x07 << (3*i));\n              unsigned int newState = (switches_states >> (2*i) & 0x03) + 1;\n              g_model.switchWarningState |= (newState << (3*i));\n            }\n          }\n          AUDIO_WARNING1();\n          storageDirty(EE_MODEL);\n        }\n\n        if (attr && menuHorizontalPosition < 0) {\n          lcdDrawSolidFilledRect(MODEL_SETUP_2ND_COLUMN-INVERT_HORZ_MARGIN, y-INVERT_VERT_MARGIN+1, (NUM_SWITCHES-1)*25+INVERT_HORZ_MARGIN, INVERT_LINE_HEIGHT, TEXT_INVERTED_BGCOLOR);\n        }\n\n        unsigned int newStates = 0;\n        for (int i=0, current=0; i<NUM_SWITCHES; i++) {\n          if (SWITCH_WARNING_ALLOWED(i)) {\n            unsigned int state = ((g_model.switchWarningState >> (3*i)) & 0x07);\n            LcdFlags color = (state > 0 ? TEXT_COLOR : TEXT_DISABLE_COLOR);\n            if (attr && menuHorizontalPosition < 0) {\n              color |= INVERS;\n            }\n            char s[3];\n            s[0] = 'A' + i;\n            s[1] = \"x\\300-\\301\"[state];\n            s[2] = '\\0';\n            lcdDrawText(MODEL_SETUP_2ND_COLUMN+i*25, y, s, color|(menuHorizontalPosition==current ? attr : 0));\n            if (!READ_ONLY() && attr && menuHorizontalPosition==current) {\n              CHECK_INCDEC_MODELVAR_ZERO_CHECK(event, state, 3, IS_CONFIG_3POS(i) ? NULL : isSwitch2POSWarningStateAvailable);\n            }\n            newStates |= (state << (3*i));\n            ++current;\n          }\n        }\n        g_model.switchWarningState = newStates;\n        break;\n      }\n\n      case ITEM_MODEL_SETUP_POTS_SLIDERS_WARNING_STATE:\n        lcdDrawText(MENUS_MARGIN_LEFT, y,STR_POTWARNINGSTATE);\n        lcdDrawTextAtIndex(MODEL_SETUP_2ND_COLUMN, y, \"\\004\"\"OFF\\0\"\"Man\\0\"\"Auto\", g_model.potsWarnMode, attr);\n        if (attr) {\n          CHECK_INCDEC_MODELVAR(event, g_model.potsWarnMode, POTS_WARN_OFF, POTS_WARN_AUTO);\n          storageDirty(EE_MODEL);\n        }\n        break;\n\n      case ITEM_MODEL_SETUP_POTS_WARNING:\n      {\n        lcdDrawText(MENUS_MARGIN_LEFT, y, STR_POTWARNING);\n        if (attr) {\n          if (!READ_ONLY() && menuHorizontalPosition >= 0 && event==EVT_KEY_LONG(KEY_ENTER)) {\n            killEvents(event);\n            if (g_model.potsWarnMode == POTS_WARN_MANUAL) {\n              SAVE_POT_POSITION(menuHorizontalPosition);\n              AUDIO_WARNING1();\n              storageDirty(EE_MODEL);\n            }\n          }\n\n          if (!READ_ONLY() &&  menuHorizontalPosition >= 0 && s_editMode && event==EVT_KEY_BREAK(KEY_ENTER)) {\n            s_editMode = 0;\n            g_model.potsWarnEnabled ^= (1 << (menuHorizontalPosition));\n            storageDirty(EE_MODEL);\n          }\n        }\n\n        if (attr && menuHorizontalPosition < 0) {\n          lcdDrawSolidFilledRect(MODEL_SETUP_2ND_COLUMN-INVERT_HORZ_MARGIN, y-INVERT_VERT_MARGIN+1, NUM_POTS*MODEL_SETUP_SLIDPOT_SPACING+INVERT_HORZ_MARGIN, INVERT_LINE_HEIGHT, TEXT_INVERTED_BGCOLOR);\n        }\n\n        if (g_model.potsWarnMode) {\n          coord_t x = MODEL_SETUP_2ND_COLUMN;\n          for (int i=0; i<NUM_POTS; ++i) {\n            LcdFlags flags = (((menuHorizontalPosition==i) && attr) ? INVERS : 0);\n            flags |= (g_model.potsWarnEnabled & (1 << i)) ? TEXT_DISABLE_COLOR : TEXT_COLOR;\n            if (attr && menuHorizontalPosition < 0) {\n              flags |= INVERS;\n            }\n            lcdDrawTextAtIndex(x, y, STR_VSRCRAW, NUM_STICKS+1+i, flags);\n            x += MODEL_SETUP_SLIDPOT_SPACING;\n          }\n        }\n        break;\n      }\n\n      case ITEM_MODEL_SETUP_SLIDERS_WARNING:\n        lcdDrawText(MENUS_MARGIN_LEFT, y, STR_SLIDERWARNING);\n        if (attr) {\n          if (!READ_ONLY() && menuHorizontalPosition+1 && event==EVT_KEY_LONG(KEY_ENTER)) {\n            killEvents(event);\n            if (g_model.potsWarnMode == POTS_WARN_MANUAL) {\n              SAVE_POT_POSITION(menuHorizontalPosition+NUM_POTS);\n              AUDIO_WARNING1();\n              storageDirty(EE_MODEL);\n            }\n          }\n\n          if (!READ_ONLY() && menuHorizontalPosition+1 && s_editMode && event==EVT_KEY_BREAK(KEY_ENTER)) {\n            s_editMode = 0;\n            g_model.potsWarnEnabled ^= (1 << (menuHorizontalPosition+NUM_POTS));\n            storageDirty(EE_MODEL);\n          }\n        }\n\n        if (attr && menuHorizontalPosition < 0) {\n          lcdDrawSolidFilledRect(MODEL_SETUP_2ND_COLUMN-INVERT_HORZ_MARGIN, y-INVERT_VERT_MARGIN+1, NUM_SLIDERS*MODEL_SETUP_SLIDPOT_SPACING+INVERT_HORZ_MARGIN, INVERT_LINE_HEIGHT, TEXT_INVERTED_BGCOLOR);\n        }\n\n        if (g_model.potsWarnMode) {\n          coord_t x = MODEL_SETUP_2ND_COLUMN;\n          for (int i=NUM_POTS; i<NUM_POTS+NUM_SLIDERS; ++i) {\n            LcdFlags flags = (((menuHorizontalPosition==i-NUM_POTS) && attr) ? INVERS : 0);\n            flags |= (g_model.potsWarnEnabled & (1 << i)) ? TEXT_DISABLE_COLOR : TEXT_COLOR;\n            if (attr && menuHorizontalPosition < 0) {\n              flags |= INVERS;\n            }\n            lcdDrawTextAtIndex(x, y, STR_VSRCRAW, NUM_STICKS+1+i, flags);\n            x += MODEL_SETUP_SLIDPOT_SPACING;\n          }\n        }\n        break;\n\n      case ITEM_MODEL_SETUP_BEEP_CENTER:\n        lcdDrawText(MENUS_MARGIN_LEFT, y, STR_BEEPCTR);\n        lcdNextPos = MODEL_SETUP_2ND_COLUMN - 3;\n        for (int i=0; i<NUM_STICKS+NUM_POTS+NUM_SLIDERS; i++) {\n          if (i >= NUM_STICKS && (!IS_POT_SLIDER_AVAILABLE(i) || IS_POT_MULTIPOS(i))) {\n            if (attr && menuHorizontalPosition == i) REPEAT_LAST_CURSOR_MOVE(NUM_STICKS+NUM_POTS+NUM_SLIDERS, true);\n            continue;\n          }\n          LcdFlags flags = ((menuHorizontalPosition==i && attr) ? INVERS : 0);\n          flags |= (g_model.beepANACenter & ((BeepANACenter)1<<i)) ? TEXT_COLOR : (TEXT_DISABLE_COLOR | NO_FONTCACHE);\n          if (attr && menuHorizontalPosition < 0) flags |= INVERS;\n          lcdDrawTextAtIndex(lcdNextPos+3, y, STR_RETA123, i, flags);\n        }\n        if (attr && CURSOR_ON_CELL) {\n          if (event==EVT_KEY_BREAK(KEY_ENTER)) {\n            if (READ_ONLY_UNLOCKED()) {\n              s_editMode = 0;\n              g_model.beepANACenter ^= ((BeepANACenter)1<<menuHorizontalPosition);\n              storageDirty(EE_MODEL);\n            }\n          }\n        }\n        break;\n\n      case ITEM_MODEL_SETUP_USE_GLOBAL_FUNCTIONS:\n        lcdDrawText(MENUS_MARGIN_LEFT, y, STR_USE_GLOBAL_FUNCS);\n        drawCheckBox(MODEL_SETUP_2ND_COLUMN, y, !g_model.noGlobalFunctions, attr);\n        if (attr) g_model.noGlobalFunctions = !checkIncDecModel(event, !g_model.noGlobalFunctions, 0, 1);\n        break;\n\n#if defined(HARDWARE_INTERNAL_MODULE)\n      case ITEM_MODEL_SETUP_INTERNAL_MODULE_LABEL:\n        lcdDrawText(MENUS_MARGIN_LEFT, y, STR_INTERNALRF);\n        break;\n\n#if !defined(INTERNAL_MODULE_MULTI)\n      case ITEM_MODEL_SETUP_INTERNAL_MODULE_TYPE:\n        lcdDrawText(MENUS_MARGIN_LEFT + INDENT_WIDTH, y, STR_MODE);\n        lcdDrawTextAtIndex(MODEL_SETUP_2ND_COLUMN, y, STR_INTERNAL_MODULE_PROTOCOLS, g_model.moduleData[INTERNAL_MODULE].type, menuHorizontalPosition==0 ? attr : 0);\n        if (isModuleXJT(INTERNAL_MODULE))\n          lcdDrawTextAtIndex(MODEL_SETUP_3RD_COLUMN, y, STR_XJT_ACCST_RF_PROTOCOLS, 1 + g_model.moduleData[INTERNAL_MODULE].subType, menuHorizontalPosition==1 ? attr : 0);\n        else if (isModuleISRM(INTERNAL_MODULE))\n          lcdDrawTextAtIndex(MODEL_SETUP_3RD_COLUMN, y, STR_ISRM_RF_PROTOCOLS, g_model.moduleData[INTERNAL_MODULE].subType, menuHorizontalPosition==1 ? attr : 0);\n        if (attr) {\n          if (menuHorizontalPosition == 0) {\n            uint8_t moduleType = checkIncDec(event, g_model.moduleData[INTERNAL_MODULE].type, MODULE_TYPE_NONE, MODULE_TYPE_MAX, EE_MODEL, isInternalModuleAvailable);\n            if (checkIncDec_Ret) {\n              setModuleType(INTERNAL_MODULE, moduleType);\n            }\n          }\n          else if (isModuleXJT(INTERNAL_MODULE)) {\n            g_model.moduleData[INTERNAL_MODULE].subType = checkIncDec(event, g_model.moduleData[INTERNAL_MODULE].subType, 0, MODULE_SUBTYPE_PXX1_LAST, EE_MODEL, isRfProtocolAvailable);\n            if (checkIncDec_Ret) {\n              g_model.moduleData[0].type = MODULE_TYPE_XJT_PXX1;\n              g_model.moduleData[0].channelsStart = 0;\n              g_model.moduleData[0].channelsCount = defaultModuleChannels_M8(INTERNAL_MODULE);\n            }\n          }\n          else if (isModulePXX2(INTERNAL_MODULE)) {\n            g_model.moduleData[INTERNAL_MODULE].subType = checkIncDec(event, g_model.moduleData[INTERNAL_MODULE].subType, 0, MODULE_SUBTYPE_ISRM_PXX2_ACCST_D16, EE_MODEL);\n            resetAccessAuthenticationCount();\n          }\n        }\n        break;\n#endif\n\n#if defined(INTERNAL_MODULE_PXX1) && defined(EXTERNAL_ANTENNA)\n      case ITEM_MODEL_SETUP_INTERNAL_MODULE_ANTENNA:\n        lcdDrawText(MENUS_MARGIN_LEFT + INDENT_WIDTH, y, STR_ANTENNA);\n        reusableBuffer.moduleSetup.antennaMode = editChoice(MODEL_SETUP_2ND_COLUMN, y, STR_ANTENNA_MODES, reusableBuffer.moduleSetup.antennaMode == ANTENNA_MODE_PER_MODEL ? ANTENNA_MODE_INTERNAL : reusableBuffer.moduleSetup.antennaMode, ANTENNA_MODE_INTERNAL, ANTENNA_MODE_EXTERNAL, attr, event, [](int value) { return value != ANTENNA_MODE_PER_MODEL; });\n        if (event && !s_editMode && reusableBuffer.moduleSetup.antennaMode != g_model.moduleData[INTERNAL_MODULE].pxx.antennaMode) {\n          if (reusableBuffer.moduleSetup.antennaMode == ANTENNA_MODE_EXTERNAL && !isExternalAntennaEnabled()) {\n            POPUP_CONFIRMATION(STR_ANTENNACONFIRM1, onModelAntennaSwitchConfirm);\n            SET_WARNING_INFO(STR_ANTENNACONFIRM2, sizeof(TR_ANTENNACONFIRM2), 0);\n          }\n          else {\n            g_model.moduleData[INTERNAL_MODULE].pxx.antennaMode = reusableBuffer.moduleSetup.antennaMode;\n            checkExternalAntenna();\n          }\n        }\n        break;\n#endif\n#endif\n      case ITEM_MODEL_SETUP_EXTERNAL_MODULE_LABEL:\n        lcdDrawText(MENUS_MARGIN_LEFT, y, STR_EXTERNALRF);\n        break;\n\n#if defined(INTERNAL_MODULE_MULTI)\n      case ITEM_MODEL_SETUP_INTERNAL_MODULE_TYPE:\n#endif\n      case ITEM_MODEL_SETUP_EXTERNAL_MODULE_TYPE:\n        lcdDrawText(MENUS_MARGIN_LEFT + INDENT_WIDTH, y, STR_MODE);\n        lcdDrawTextAtIndex(MODEL_SETUP_2ND_COLUMN, y, STR_EXTERNAL_MODULE_PROTOCOLS, moduleIdx == EXTERNAL_MODULE ? reusableBuffer.moduleSetup.newType : g_model.moduleData[INTERNAL_MODULE].type, menuHorizontalPosition==0 ? attr : 0);\n        if (isModuleXJT(moduleIdx))\n          lcdDrawTextAtIndex(MODEL_SETUP_3RD_COLUMN, y, STR_XJT_ACCST_RF_PROTOCOLS, 1+g_model.moduleData[moduleIdx].subType, (menuHorizontalPosition==1 ? attr : 0));\n        else if (isModuleDSM2(moduleIdx))\n          lcdDrawTextAtIndex(MODEL_SETUP_3RD_COLUMN, y, STR_DSM_PROTOCOLS, g_model.moduleData[moduleIdx].rfProtocol, (menuHorizontalPosition==1 ? attr : 0));\n        else if (isModuleR9MNonAccess(moduleIdx))\n          lcdDrawTextAtIndex(MODEL_SETUP_3RD_COLUMN, y, STR_R9M_REGION, g_model.moduleData[moduleIdx].subType, (menuHorizontalPosition==1 ? attr : 0));\n#if defined(MULTIMODULE)\n        else if (isModuleMultimodule(moduleIdx)) {\n          int multi_rfProto = g_model.moduleData[moduleIdx].getMultiProtocol();\n          lcdDrawMultiProtocolString(MODEL_SETUP_3RD_COLUMN, y, moduleIdx, multi_rfProto, menuHorizontalPosition == 1 ? attr : 0);\n          if (MULTIMODULE_HAS_SUBTYPE(moduleIdx))\n            lcdDrawMultiSubProtocolString(MODEL_SETUP_4TH_COLUMN, y, moduleIdx, g_model.moduleData[moduleIdx].subType, menuHorizontalPosition==2 ? attr : 0);\n        }\n#endif\n        if (attr && menuHorizontalPosition == 0 && moduleIdx == EXTERNAL_MODULE) {\n          if (s_editMode > 0) {\n            g_model.moduleData[EXTERNAL_MODULE].type = MODULE_TYPE_NONE;\n          }\n          else if (reusableBuffer.moduleSetup.newType != reusableBuffer.moduleSetup.previousType) {\n            g_model.moduleData[EXTERNAL_MODULE].type = reusableBuffer.moduleSetup.newType;\n            reusableBuffer.moduleSetup.previousType = reusableBuffer.moduleSetup.newType;\n            setModuleType(EXTERNAL_MODULE, g_model.moduleData[EXTERNAL_MODULE].type);\n          }\n          else if (g_model.moduleData[EXTERNAL_MODULE].type == MODULE_TYPE_NONE) {\n            g_model.moduleData[EXTERNAL_MODULE].type = reusableBuffer.moduleSetup.newType;\n          }\n        }\n        if (attr) {\n          if (s_editMode > 0) {\n            switch (menuHorizontalPosition) {\n              case 0: {\n#if defined(HARDWARE_INTERNAL_MODULE)\n                if (moduleIdx == INTERNAL_MODULE) {\n                  uint8_t moduleType = checkIncDec(event, g_model.moduleData[moduleIdx].type, MODULE_TYPE_NONE, MODULE_TYPE_MAX, EE_MODEL,\n                                                   isInternalModuleAvailable);\n                  if (checkIncDec_Ret) {\n                    setModuleType(moduleIdx, moduleType);\n                  }\n                }\n                else\n#endif\n                  reusableBuffer.moduleSetup.newType = checkIncDec(event, reusableBuffer.moduleSetup.newType, MODULE_TYPE_NONE, MODULE_TYPE_MAX, EE_MODEL,\n                                                                   isExternalModuleAvailable);\n              }\n              break;\n              case 1:\n                if (isModuleDSM2(moduleIdx))\n                  CHECK_INCDEC_MODELVAR(event, g_model.moduleData[moduleIdx].rfProtocol, DSM2_PROTO_LP45, DSM2_PROTO_DSMX);\n#if defined(MULTIMODULE)\n                else if (isModuleMultimodule(moduleIdx)) {\n                  int multiRfProto = g_model.moduleData[moduleIdx].getMultiProtocol();\n                  MultiModuleStatus &status = getMultiModuleStatus(moduleIdx);\n                  if (status.isValid()) {\n                    int8_t direction = checkIncDec(event, 0, -1, 1);\n                    if (direction == -1) {\n                      if (multiRfProto == MODULE_SUBTYPE_MULTI_FRSKY)\n                        multiRfProto = MODULE_SUBTYPE_MULTI_FRSKYX_RX;\n                      else\n                        multiRfProto = convertMultiToOtx(status.protocolPrev);\n                    }\n                    if (direction == 1) {\n                      if (multiRfProto == MODULE_SUBTYPE_MULTI_FRSKY)\n                        multiRfProto = MODULE_SUBTYPE_MULTI_FRSKYX2;\n                      else\n                        multiRfProto = convertMultiToOtx(status.protocolNext);\n                    }\n                  }\n                  else {\n                    CHECK_INCDEC_MODELVAR_CHECK(event, multiRfProto, MODULE_SUBTYPE_MULTI_FIRST, MULTI_MAX_PROTOCOLS, isMultiProtocolSelectable);\n                  }\n                  if (checkIncDec_Ret) {\n                    g_model.moduleData[moduleIdx].setMultiProtocol(multiRfProto);\n                    g_model.moduleData[moduleIdx].subType = 0;\n                    resetMultiProtocolsOptions(moduleIdx);\n                    storageDirty(EE_MODEL);\n                  }\n                }\n#endif\n                else if (isModuleR9MNonAccess(moduleIdx)) {\n                  g_model.moduleData[moduleIdx].subType = checkIncDec(event, g_model.moduleData[moduleIdx].subType, MODULE_SUBTYPE_R9M_FCC,\n                                                                            MODULE_SUBTYPE_R9M_LAST, EE_MODEL, isR9MModeAvailable);\n                }\n                else {\n                  CHECK_INCDEC_MODELVAR(event, g_model.moduleData[moduleIdx].subType, MODULE_SUBTYPE_PXX1_ACCST_D16, MODULE_SUBTYPE_PXX1_LAST);\n                }\n                if (checkIncDec_Ret) {\n                  g_model.moduleData[moduleIdx].channelsStart = 0;\n                  g_model.moduleData[moduleIdx].channelsCount = defaultModuleChannels_M8(moduleIdx);\n                }\n                break;\n\n#if defined(MULTIMODULE)\n              case 2: {\n                CHECK_INCDEC_MODELVAR(event, g_model.moduleData[moduleIdx].subType, 0, getMaxMultiSubtype(moduleIdx));\n                if (checkIncDec_Ret) {\n                  resetMultiProtocolsOptions(moduleIdx);\n                }\n                break;\n              }\n#endif\n            }\n          }\n#if POPUP_LEVEL > 1\n          else if (old_editMode > 0) {\n            if (isModuleR9MNonAccess(moduleIdx)) {\n              if (g_model.moduleData[moduleIdx].subType > MODULE_SUBTYPE_R9M_EU) {\n                POPUP_WARNING(STR_MODULE_PROTOCOL_FLEX_WARN_LINE1);\n                SET_WARNING_INFO(STR_MODULE_PROTOCOL_WARN_LINE2, sizeof(TR_MODULE_PROTOCOL_WARN_LINE2) - 1, 0);\n              }\n#if POPUP_LEVEL >= 3\n              else if (g_model.moduleData[moduleIdx].subType == MODULE_SUBTYPE_R9M_EU) {\n                POPUP_WARNING(STR_MODULE_PROTOCOL_EU_WARN_LINE1);\n                SET_WARNING_INFO(STR_MODULE_PROTOCOL_WARN_LINE2, sizeof(TR_MODULE_PROTOCOL_WARN_LINE2) - 1, 0);\n              }\n              else {\n                POPUP_WARNING(STR_MODULE_PROTOCOL_FCC_WARN_LINE1);\n                SET_WARNING_INFO(STR_MODULE_PROTOCOL_WARN_LINE2, sizeof(TR_MODULE_PROTOCOL_WARN_LINE2) - 1, 0);\n              }\n#endif\n            }\n          }\n#endif\n        }\n        break;\n#if defined(HARDWARE_INTERNAL_MODULE)\n      case ITEM_MODEL_SETUP_INTERNAL_MODULE_CHANNELS:\n#endif\n      case ITEM_MODEL_SETUP_EXTERNAL_MODULE_CHANNELS:\n      {\n        ModuleData & moduleData = g_model.moduleData[moduleIdx];\n        lcdDrawText(MENUS_MARGIN_LEFT, y, STR_CHANNELRANGE);\n        if ((int8_t)MODULE_CHANNELS_ROWS(moduleIdx) >= 0) {\n          drawStringWithIndex(MODEL_SETUP_2ND_COLUMN, y, STR_CH, moduleData.channelsStart+1, menuHorizontalPosition==0 ? attr : 0);\n          lcdDrawText(lcdNextPos+5, y, \"-\");\n          drawStringWithIndex(lcdNextPos+5, y, STR_CH, moduleData.channelsStart+sentModuleChannels(moduleIdx), menuHorizontalPosition==1 ? attr : 0);\n          const char * delay = getModuleDelay(moduleIdx);\n          if (delay)\n            lcdDrawText(lcdNextPos + 15, y, delay);\n          if (attr && s_editMode>0) {\n            switch (menuHorizontalPosition) {\n              case 0:\n                CHECK_INCDEC_MODELVAR_ZERO(event, moduleData.channelsStart, 32-8-moduleData.channelsCount);\n                break;\n              case 1:\n                CHECK_INCDEC_MODELVAR_CHECK(event, moduleData.channelsCount, -4, min<int8_t>(maxModuleChannels_M8(moduleIdx), 32-8-moduleData.channelsStart), moduleData.type == MODULE_TYPE_ISRM_PXX2 ? isPxx2IsrmChannelsCountAllowed : nullptr);\n                if (checkIncDec_Ret && moduleData.type == MODULE_TYPE_PPM) {\n                  setDefaultPpmFrameLength(moduleIdx);\n                }\n                break;\n            }\n          }\n        }\n        break;\n      }\n      case ITEM_MODEL_SETUP_TRAINER_LABEL:\n        lcdDrawText(MENUS_MARGIN_LEFT, y, STR_TRAINER);\n        break;\n\n      case ITEM_MODEL_SETUP_TRAINER_MODE:\n        lcdDrawText(MENUS_MARGIN_LEFT + INDENT_WIDTH, y, STR_MODE);\n        g_model.trainerData.mode = editChoice(MODEL_SETUP_2ND_COLUMN, y, STR_VTRAINERMODES, g_model.trainerData.mode, 0, TRAINER_MODE_MAX(), attr, event, isTrainerModeAvailable);\n#if defined(BLUETOOTH)\n        if (attr && checkIncDec_Ret) {\n          bluetooth.state = BLUETOOTH_STATE_OFF;\n          bluetooth.distantAddr[0] = 0;\n        }\n#endif\n        break;\n\n#if defined(BLUETOOTH)\n      case ITEM_MODEL_SETUP_TRAINER_BLUETOOTH:\n        if (g_model.trainerData.mode == TRAINER_MODE_MASTER_BLUETOOTH) {\n          if (attr) {\n            s_editMode = 0;\n          }\n          if (bluetooth.distantAddr[0]) {\n            lcdDrawText(MENUS_MARGIN_LEFT + INDENT_WIDTH, y, bluetooth.distantAddr);\n            drawButton(MODEL_SETUP_2ND_COLUMN, y, STR_CLEAR, attr);\n            if (attr && event == EVT_KEY_FIRST(KEY_ENTER)) {\n              bluetooth.state = BLUETOOTH_STATE_CLEAR_REQUESTED;\n              memclear(bluetooth.distantAddr, sizeof(bluetooth.distantAddr));\n            }\n          }\n          else {\n            lcdDrawText(MENUS_MARGIN_LEFT + INDENT_WIDTH, y, \"---\");\n            if (bluetooth.state < BLUETOOTH_STATE_IDLE)\n              drawButton(MODEL_SETUP_2ND_COLUMN, y, STR_BLUETOOTH_INIT, attr);\n            else\n              drawButton(MODEL_SETUP_2ND_COLUMN, y, STR_BLUETOOTH_DISC, attr);\n            if (attr && event == EVT_KEY_FIRST(KEY_ENTER)) {\n              if (bluetooth.state < BLUETOOTH_STATE_IDLE) {\n                bluetooth.state = BLUETOOTH_STATE_OFF;\n              }\n              else {\n                reusableBuffer.moduleSetup.bt.devicesCount = 0;\n                bluetooth.state = BLUETOOTH_STATE_DISCOVER_REQUESTED;\n              }\n            }\n          }\n\n          if (bluetooth.state == BLUETOOTH_STATE_DISCOVER_END && reusableBuffer.moduleSetup.bt.devicesCount > 0) {\n            popupMenuItemsCount = min<uint8_t>(reusableBuffer.moduleSetup.bt.devicesCount, MAX_BLUETOOTH_DISTANT_ADDR);\n            for (uint8_t i = 0; i < popupMenuItemsCount; i++) {\n              popupMenuItems[i] = reusableBuffer.moduleSetup.bt.devices[i];\n            }\n            POPUP_MENU_START(onBluetoothConnectMenu);\n          }\n        }\n        else {\n          if (bluetooth.distantAddr[0])\n            lcdDrawText(MENUS_MARGIN_LEFT + INDENT_WIDTH, y+1, bluetooth.distantAddr);\n          else\n            lcdDrawText(MENUS_MARGIN_LEFT + INDENT_WIDTH, y, \"---\");\n          lcdDrawText(MODEL_SETUP_2ND_COLUMN, y, bluetooth.state == BLUETOOTH_STATE_CONNECTED ? STR_CONNECTED : STR_NOT_CONNECTED);\n        }\n        break;\n#endif\n\n      case ITEM_MODEL_SETUP_TRAINER_CHANNELS:\n        lcdDrawText(MENUS_MARGIN_LEFT, y, STR_CHANNELRANGE);\n        drawStringWithIndex(MODEL_SETUP_2ND_COLUMN, y, STR_CH, g_model.trainerData.channelsStart+1, menuHorizontalPosition==0 ? attr : 0);\n        lcdDrawText(lcdNextPos+5, y, \"-\");\n        drawStringWithIndex(lcdNextPos+5, y, STR_CH, g_model.trainerData.channelsStart + 8 + g_model.trainerData.channelsCount, menuHorizontalPosition==1 ? attr : 0);\n        if (attr && s_editMode > 0) {\n          switch (menuHorizontalPosition) {\n            case 0:\n              CHECK_INCDEC_MODELVAR_ZERO(event, g_model.trainerData.channelsStart, 32-8-g_model.trainerData.channelsCount);\n              break;\n            case 1:\n              CHECK_INCDEC_MODELVAR(event, g_model.trainerData.channelsCount, -4, min<int8_t>(MAX_TRAINER_CHANNELS_M8, 32-8-g_model.trainerData.channelsStart));\n              break;\n          }\n        }\n        break;\n\n      case ITEM_MODEL_SETUP_TRAINER_PPM_PARAMS:\n        lcdDrawText(MENUS_MARGIN_LEFT, y, STR_PPMFRAME);\n        lcdDrawNumber(MODEL_SETUP_2ND_COLUMN, y, (int16_t)g_model.trainerData.frameLength*5 + 225, (menuHorizontalPosition<=0 ? attr : 0) | PREC1|LEFT, 0, NULL, STR_MS);\n        lcdDrawNumber(MODEL_SETUP_2ND_COLUMN+80, y, (g_model.trainerData.delay*50)+300, (CURSOR_ON_LINE() || menuHorizontalPosition==1) ? attr|LEFT : LEFT, 0, NULL, \"us\");\n        lcdDrawText(MODEL_SETUP_2ND_COLUMN+160, y, g_model.trainerData.pulsePol ? \"+\" : \"-\", (CURSOR_ON_LINE() || menuHorizontalPosition==2) ? attr : 0);\n        if (attr && s_editMode>0) {\n          switch (menuHorizontalPosition) {\n            case 0:\n              CHECK_INCDEC_MODELVAR(event, g_model.trainerData.frameLength, -20, 35);\n              break;\n            case 1:\n              CHECK_INCDEC_MODELVAR(event, g_model.trainerData.delay, -4, 10);\n              break;\n            case 2:\n              CHECK_INCDEC_MODELVAR_ZERO(event, g_model.trainerData.pulsePol, 1);\n              break;\n          }\n        }\n        break;\n\n#if defined(PXX2)\n      case ITEM_MODEL_SETUP_REGISTRATION_ID:\n        lcdDrawText(MENUS_MARGIN_LEFT, y, STR_REG_ID);\n        if (isDefaultModelRegistrationID())\n          lcdDrawText(MODEL_SETUP_2ND_COLUMN, y, STR_PXX2_DEFAULT);\n        else\n          lcdDrawSizedText(MODEL_SETUP_2ND_COLUMN, y, g_model.modelRegistrationID, PXX2_LEN_REGISTRATION_ID, ZCHAR);\n        break;\n#endif\n\n#if defined(HARDWARE_INTERNAL_MODULE)\n      case ITEM_MODEL_SETUP_INTERNAL_MODULE_PXX2_MODEL_NUM:\n#endif\n      case ITEM_MODEL_SETUP_EXTERNAL_MODULE_PXX2_MODEL_NUM:\n      {\n        lcdDrawText(MENUS_MARGIN_LEFT + INDENT_WIDTH, y, STR_RECEIVER_NUM);\n        lcdDrawNumber(MODEL_SETUP_2ND_COLUMN, y, g_model.header.modelId[moduleIdx], attr | LEADING0 | LEFT, 2);\n        if (attr) {\n          CHECK_INCDEC_MODELVAR_ZERO(event, g_model.header.modelId[moduleIdx], getMaxRxNum(moduleIdx));\n          if (event == EVT_KEY_LONG(KEY_ENTER)) {\n            killEvents(event);\n            uint8_t newVal = modelslist.findNextUnusedModelId(moduleIdx);\n            if (newVal != g_model.header.modelId[moduleIdx]) {\n              g_model.header.modelId[moduleIdx] = newVal;\n              storageDirty(EE_MODEL);\n            }\n          }\n        }\n      }\n      break;\n#if defined(HARDWARE_INTERNAL_MODULE)\n      case ITEM_MODEL_SETUP_INTERNAL_MODULE_PXX2_REGISTER_RANGE:\n#endif\n      case ITEM_MODEL_SETUP_EXTERNAL_MODULE_PXX2_REGISTER_RANGE:\n      {\n        lcdDrawText(MENUS_MARGIN_LEFT + INDENT_WIDTH, y, STR_MODULE);\n        drawButton(MODEL_SETUP_2ND_COLUMN, y, STR_REGISTER, (menuHorizontalPosition == 0 ? attr : 0));\n        if (!IS_RX_MULTI(moduleIdx))\n          drawButton(MODEL_SETUP_2ND_COLUMN + MODEL_SETUP_SET_FAILSAFE_OFS, y, STR_MODULE_RANGE, (menuHorizontalPosition == 1 ? attr : 0));\n        if (attr) {\n          if (moduleState[moduleIdx].mode == MODULE_MODE_NORMAL && s_editMode > 0) {\n            if (menuHorizontalPosition == 0 && event == EVT_KEY_BREAK(KEY_ENTER)) {\n              startRegisterDialog(moduleIdx);\n            }\n            else if (menuHorizontalPosition == 1) {\n              moduleState[moduleIdx].mode = MODULE_MODE_RANGECHECK;\n            }\n          }\n          if (s_editMode == 0 && !warningText) {\n            moduleState[moduleIdx].mode = MODULE_MODE_NORMAL;\n          }\n          if (moduleState[moduleIdx].mode == MODULE_MODE_NORMAL) {\n            // REGISTER finished\n            s_editMode = 0;\n          }\n        }\n      }\n        break;\n#if defined(HARDWARE_INTERNAL_MODULE)\n      case ITEM_MODEL_SETUP_INTERNAL_MODULE_PXX2_OPTIONS:\n#endif\n      case ITEM_MODEL_SETUP_EXTERNAL_MODULE_PXX2_OPTIONS:\n        lcdDrawText(MENUS_MARGIN_LEFT + INDENT_WIDTH, y, STR_OPTIONS);\n        drawButton(MODEL_SETUP_2ND_COLUMN, y, STR_SET, attr);\n        if (event == EVT_KEY_BREAK(KEY_ENTER) && attr) {\n          g_moduleIdx = CURRENT_MODULE_EDITED(k);\n          pushMenu(menuModelModuleOptions);\n        }\n        break;\n#if defined(HARDWARE_INTERNAL_MODULE)\n      case ITEM_MODEL_SETUP_INTERNAL_MODULE_PXX2_RECEIVER_1:\n      case ITEM_MODEL_SETUP_INTERNAL_MODULE_PXX2_RECEIVER_2:\n      case ITEM_MODEL_SETUP_INTERNAL_MODULE_PXX2_RECEIVER_3:\n#endif\n      case ITEM_MODEL_SETUP_EXTERNAL_MODULE_PXX2_RECEIVER_1:\n      case ITEM_MODEL_SETUP_EXTERNAL_MODULE_PXX2_RECEIVER_2:\n      case ITEM_MODEL_SETUP_EXTERNAL_MODULE_PXX2_RECEIVER_3:\n      {\n        uint8_t receiverIdx = CURRENT_RECEIVER_EDITED(k);\n        ModuleInformation & moduleInformation = reusableBuffer.moduleSetup.pxx2.moduleInformation;\n\n        drawStringWithIndex(MENUS_MARGIN_LEFT + INDENT_WIDTH, y, STR_RECEIVER, receiverIdx + 1);\n\n        if (!isPXX2ReceiverUsed(moduleIdx, receiverIdx)) {\n          drawButton(MODEL_SETUP_2ND_COLUMN, y, STR_MODULE_BIND, attr);\n          if (attr && event == EVT_KEY_BREAK(KEY_ENTER)) {\n            setPXX2ReceiverUsed(moduleIdx, receiverIdx);\n            memclear(g_model.moduleData[moduleIdx].pxx2.receiverName[receiverIdx], PXX2_LEN_RX_NAME);\n            onPXX2ReceiverMenu(STR_BIND);\n          }\n          break;\n        }\n\n        drawReceiverName(MODEL_SETUP_2ND_COLUMN, y, moduleIdx, receiverIdx, attr);\n\n        if (s_editMode && isModuleR9MAccess(moduleIdx) && moduleState[moduleIdx].mode == MODULE_MODE_NORMAL && reusableBuffer.moduleSetup.bindInformation.step < 0) {\n          if (reusableBuffer.moduleSetup.bindInformation.step == BIND_MODULE_TX_INFORMATION_REQUEST && moduleInformation.information.modelID) {\n            // For R9M ACCESS the module information has been requested to know if we are in EU mode. We just receive it here and continue\n            if (moduleInformation.information.variant == PXX2_VARIANT_EU) {\n              // In EU mode we will need the power of the module to know if telemetry can be proposed\n              reusableBuffer.moduleSetup.bindInformation.step = BIND_MODULE_TX_SETTINGS_REQUEST;\n#if defined(SIMU)\n              reusableBuffer.moduleSetup.pxx2.moduleSettings.txPower = 14;\n              break;\n#else\n              moduleState[moduleIdx].readModuleSettings(&reusableBuffer.moduleSetup.pxx2.moduleSettings);\n#endif\n            }\n            else {\n              reusableBuffer.moduleSetup.bindInformation.step = 0;\n              moduleState[moduleIdx].startBind(&reusableBuffer.moduleSetup.bindInformation);\n            }\n          }\n          else if (reusableBuffer.moduleSetup.bindInformation.step == BIND_MODULE_TX_SETTINGS_REQUEST && reusableBuffer.moduleSetup.pxx2.moduleSettings.txPower > 0) {\n            // We just receive the module settings (for TX power)\n            reusableBuffer.moduleSetup.bindInformation.step = 0;\n            moduleState[moduleIdx].startBind(&reusableBuffer.moduleSetup.bindInformation);\n          }\n        }\n        else if (attr && (moduleState[moduleIdx].mode == MODULE_MODE_NORMAL || s_editMode == 0)) {\n          if (moduleState[moduleIdx].mode) {\n            moduleState[moduleIdx].mode = 0;\n            removePXX2ReceiverIfEmpty(moduleIdx, receiverIdx);\n            killEvents(event); // we stopped BIND / SHARE, we don't want to re-open the menu\n            event = 0;\n            CLEAR_POPUP();\n          }\n          s_editMode = 0;\n        }\n\n        if (moduleState[moduleIdx].mode == MODULE_MODE_BIND) {\n          if (reusableBuffer.moduleSetup.bindInformation.step == BIND_INIT) {\n            if (reusableBuffer.moduleSetup.bindInformation.candidateReceiversCount > 0) {\n              popupMenuItemsCount = min<uint8_t>(reusableBuffer.moduleSetup.bindInformation.candidateReceiversCount, PXX2_MAX_RECEIVERS_PER_MODULE);\n              for (auto rx = 0; rx < popupMenuItemsCount; rx++) {\n                popupMenuItems[rx] = reusableBuffer.moduleSetup.bindInformation.candidateReceiversNames[rx];\n              }\n              // popupMenuTitle = STR_PXX2_SELECT_RX;\n              POPUP_MENU_START(onPXX2BindMenu);\n            }\n          }\n        }\n\n        if (attr && event == EVT_KEY_BREAK(KEY_ENTER)) {\n          POPUP_MENU_ADD_ITEM(STR_BIND);\n          POPUP_MENU_ADD_ITEM(STR_OPTIONS);\n          POPUP_MENU_ADD_ITEM(STR_SHARE);\n          POPUP_MENU_ADD_ITEM(STR_DELETE);\n          POPUP_MENU_ADD_ITEM(STR_RESET);\n          POPUP_MENU_START(onPXX2ReceiverMenu);\n        }\n      }\n      break;\n#if defined(HARDWARE_INTERNAL_MODULE)\n      case ITEM_MODEL_SETUP_INTERNAL_MODULE_NOT_ACCESS_RXNUM_BIND_RANGE:\n#endif\n      case ITEM_MODEL_SETUP_EXTERNAL_MODULE_NOT_ACCESS_BIND:\n      {\n        ModuleData & moduleData = g_model.moduleData[moduleIdx];\n        if (isModulePPM(moduleIdx)) {\n          lcdDrawText(MENUS_MARGIN_LEFT, y, STR_PPMFRAME);\n          lcdDrawNumber(MODEL_SETUP_2ND_COLUMN, y, (int16_t)moduleData.ppm.frameLength*5 + 225, (menuHorizontalPosition<=0 ? attr : 0) | PREC1|LEFT, 0, NULL, STR_MS);\n          lcdDrawNumber(MODEL_SETUP_2ND_COLUMN+80, y, (moduleData.ppm.delay*50)+300, (CURSOR_ON_LINE() || menuHorizontalPosition==1) ? attr|LEFT : LEFT, 0, NULL, \"us\");\n          lcdDrawText(MODEL_SETUP_2ND_COLUMN+160, y, moduleData.ppm.pulsePol ? \"+\" : \"-\", (CURSOR_ON_LINE() || menuHorizontalPosition==2) ? attr : 0);\n          if (attr && s_editMode>0) {\n            switch (menuHorizontalPosition) {\n              case 0:\n                CHECK_INCDEC_MODELVAR(event, moduleData.ppm.frameLength, -20, 35);\n                break;\n              case 1:\n                CHECK_INCDEC_MODELVAR(event, moduleData.ppm.delay, -4, 10);\n                break;\n              case 2:\n                CHECK_INCDEC_MODELVAR_ZERO(event, moduleData.ppm.pulsePol, 1);\n                break;\n            }\n          }\n        }\n        else if (isModuleSBUS(moduleIdx)) {\n          lcdDrawText(MENUS_MARGIN_LEFT, y, STR_REFRESHRATE);\n          lcdDrawNumber(MODEL_SETUP_2ND_COLUMN, y, (int16_t)moduleData.ppm.frameLength*5 + 225, (menuHorizontalPosition<=0 ? attr : 0) | PREC1|LEFT, 0, NULL, STR_MS);\n          lcdDrawText(MODEL_SETUP_3RD_COLUMN, y, moduleData.sbus.noninverted ? \"not inverted\" : \"normal\", (CURSOR_ON_LINE() || menuHorizontalPosition==1) ? attr : 0);\n\n          if (attr && s_editMode>0) {\n            switch (menuHorizontalPosition) {\n              case 0:\n                CHECK_INCDEC_MODELVAR(event, moduleData.ppm.frameLength, -33, 35);\n                break;\n              case 1:\n                CHECK_INCDEC_MODELVAR_ZERO(event, moduleData.sbus.noninverted, 1);\n                break;\n            }\n          }\n        }\n        else {\n          int l_posHorz = menuHorizontalPosition;\n          coord_t xOffsetBind = MODEL_SETUP_BIND_OFS;\n          if (!isModuleRxNumAvailable(moduleIdx)) {\n            xOffsetBind = 0;\n            lcdDrawText(MENUS_MARGIN_LEFT + INDENT_WIDTH, y, STR_RECEIVER);\n            if (attr) l_posHorz += 1;\n          }\n          else {\n            lcdDrawText(MENUS_MARGIN_LEFT + INDENT_WIDTH, y, STR_RECEIVER_NUM);\n          }\n          if (isModuleBindRangeAvailable(moduleIdx)) {\n            if (xOffsetBind)\n              lcdDrawNumber(MODEL_SETUP_2ND_COLUMN, y, g_model.header.modelId[moduleIdx], (l_posHorz==0 ? attr : 0) | LEADING0 | LEFT, 2);\n            if (attr && l_posHorz==0) {\n              if (s_editMode>0) {\n                CHECK_INCDEC_MODELVAR_ZERO(event, g_model.header.modelId[moduleIdx], getMaxRxNum(moduleIdx));\n                if (event == EVT_KEY_LONG(KEY_ENTER)) {\n                  killEvents(event);\n                  uint8_t newVal = modelslist.findNextUnusedModelId(moduleIdx);\n                  if (newVal != g_model.header.modelId[moduleIdx]) {\n                    g_model.header.modelId[moduleIdx] = newVal;\n                    storageDirty(EE_MODEL);\n                  }\n                }\n              }\n            }\n            drawButton(MODEL_SETUP_2ND_COLUMN+xOffsetBind, y, STR_MODULE_BIND, (moduleState[moduleIdx].mode == MODULE_MODE_BIND ? BUTTON_ON : BUTTON_OFF) | (l_posHorz==1 ? attr : 0));\n            if (!IS_RX_MULTI(moduleIdx))\n              drawButton(MODEL_SETUP_2ND_COLUMN+MODEL_SETUP_RANGE_OFS+xOffsetBind, y, STR_MODULE_RANGE, (moduleState[moduleIdx].mode == MODULE_MODE_RANGECHECK ? BUTTON_ON : BUTTON_OFF) | (l_posHorz==2 ? attr : 0));\n            uint8_t newFlag = 0;\n#if defined(MULTIMODULE)\n            if (getMultiBindStatus(moduleIdx) == MULTI_BIND_FINISHED) {\n              setMultiBindStatus(moduleIdx, MULTI_NORMAL_OPERATION);\n              s_editMode = 0;\n            }\n#endif\n            if (attr && l_posHorz>0) {\n              if (s_editMode>0) {\n                if (l_posHorz == 1) {\n                  if (isModuleR9MNonAccess(moduleIdx) || isModuleD16(moduleIdx)) {\n                    if (event == EVT_KEY_BREAK(KEY_ENTER)) {\n                      startBindMenu(moduleIdx);\n                      continue;\n                    }\n                    if (moduleState[moduleIdx].mode == MODULE_MODE_BIND) {\n                      newFlag = MODULE_MODE_BIND;\n                    }\n                    else {\n                      if (!popupMenuItemsCount) {\n                        s_editMode = 0;  // this is when popup is exited before a choice is made\n                      }\n                    }\n                  }\n                  else {\n                    newFlag = MODULE_MODE_BIND;\n                  }\n                }\n                else if (l_posHorz == 2) {\n                  newFlag = MODULE_MODE_RANGECHECK;\n                }\n              }\n            }\n            moduleState[moduleIdx].mode = newFlag;\n#if defined(MULTIMODULE)\n            if (newFlag == MODULE_MODE_BIND)\n              setMultiBindStatus(moduleIdx, MULTI_BIND_INITIATED);\n#endif\n          }\n        }\n        break;\n      }\n#if defined(HARDWARE_INTERNAL_MODULE)\n      case ITEM_MODEL_SETUP_INTERNAL_MODULE_FAILSAFE:\n#endif\n      case ITEM_MODEL_SETUP_EXTERNAL_MODULE_FAILSAFE:\n      {\n        ModuleData & moduleData = g_model.moduleData[moduleIdx];\n        lcdDrawText(MENUS_MARGIN_LEFT, y, STR_FAILSAFE);\n        lcdDrawTextAtIndex(MODEL_SETUP_2ND_COLUMN, y, STR_VFAILSAFE, moduleData.failsafeMode, menuHorizontalPosition==0 ? attr : 0);\n        if (moduleData.failsafeMode == FAILSAFE_CUSTOM) {\n          drawButton(MODEL_SETUP_2ND_COLUMN + MODEL_SETUP_SET_FAILSAFE_OFS, y, STR_SET, menuHorizontalPosition==1 ? attr : 0);\n        }\n        if (attr) {\n          if (moduleData.failsafeMode != FAILSAFE_CUSTOM)\n            menuHorizontalPosition = 0;\n          if (menuHorizontalPosition==0) {\n            if (s_editMode>0) {\n              CHECK_INCDEC_MODELVAR_ZERO(event, moduleData.failsafeMode, isModuleR9M(moduleIdx) ? FAILSAFE_NOPULSES : FAILSAFE_LAST);\n              if (checkIncDec_Ret) SEND_FAILSAFE_NOW(moduleIdx);\n            }\n          }\n          else if (menuHorizontalPosition==1) {\n            s_editMode = 0;\n            if (moduleData.failsafeMode == FAILSAFE_CUSTOM) {\n              if (event == EVT_KEY_LONG(KEY_ENTER)) {\n                killEvents(event);\n                setCustomFailsafe(moduleIdx);\n                storageDirty(EE_MODEL);\n                AUDIO_WARNING1();\n                SEND_FAILSAFE_NOW(moduleIdx);\n              }\n              else if (event == EVT_KEY_BREAK(KEY_ENTER)) {\n                g_moduleIdx = moduleIdx;\n                pushMenu(menuModelFailsafe);\n              }\n            }\n          }\n          else {\n            lcdDrawSolidFilledRect(MODEL_SETUP_2ND_COLUMN, y, LCD_W - MODEL_SETUP_2ND_COLUMN - 2, 8, TEXT_COLOR);\n          }\n        }\n        break;\n      }\n#if defined(HARDWARE_INTERNAL_MODULE)\n      case ITEM_MODEL_SETUP_INTERNAL_MODULE_OPTIONS:\n#endif\n      case ITEM_MODEL_SETUP_EXTERNAL_MODULE_OPTIONS:\n      {\n#if defined(MULTIMODULE)\n        if (MULTIMODULE_PROTOCOL_KNOWN(moduleIdx)) {\n          int optionValue = g_model.moduleData[moduleIdx].multi.optionValue;\n\n          MultiModuleStatus &status = getMultiModuleStatus(moduleIdx);\n          const uint8_t multi_proto = g_model.moduleData[moduleIdx].getMultiProtocol();\n          if (status.isValid()) {\n            lcdDrawText(MENUS_MARGIN_LEFT + INDENT_WIDTH, y, mm_options_strings::options[status.optionDisp]);\n            if (attr && status.optionDisp == 2) {\n              lcdDrawNumber(LCD_W - 10, y, TELEMETRY_RSSI(), RIGHT, 0, \"RSSI(\", \")\");\n            }\n          }\n          else {\n            const mm_protocol_definition * pdef = getMultiProtocolDefinition(multi_proto);\n            if (pdef->optionsstr) {\n              lcdDrawText(MENUS_MARGIN_LEFT + INDENT_WIDTH, y, pdef->optionsstr);\n              if (attr && pdef->optionsstr == STR_MULTI_RFTUNE) {\n                lcdDrawNumber(LCD_W - 10, y, TELEMETRY_RSSI(), RIGHT, 0, \"RSSI(\", \")\");\n              }\n            }\n          }\n\n          if (multi_proto == MODULE_SUBTYPE_MULTI_FS_AFHDS2A)\n            optionValue = 50 + 5 * optionValue;\n\n          if (multi_proto == MODULE_SUBTYPE_MULTI_FRSKY_R9)\n            lcdDrawTextAtIndex(MODEL_SETUP_2ND_COLUMN, y, STR_MULTI_POWER, optionValue, LEFT | attr);\n          else\n            lcdDrawNumber(MODEL_SETUP_2ND_COLUMN, y, optionValue, LEFT | attr);\n          if (attr) {\n            int8_t min, max;\n            getMultiOptionValues(multi_proto, min, max);\n            CHECK_INCDEC_MODELVAR(event, g_model.moduleData[moduleIdx].multi.optionValue, min, max);\n          }\n        }\n#endif\n        if (isModuleR9MNonAccess(moduleIdx)) {\n          lcdDrawText(MENUS_MARGIN_LEFT, y, STR_MODULE_TELEMETRY);\n          if (isSportLineUsedByInternalModule())\n            lcdDrawText(MODEL_SETUP_2ND_COLUMN, y, STR_DISABLE_INTERNAL);\n          else\n            lcdDrawText(MODEL_SETUP_2ND_COLUMN, y, STR_MODULE_TELEM_ON);\n        }\n        else if (isModuleSBUS(moduleIdx)) {\n          lcdDrawText(MENUS_MARGIN_LEFT, y, STR_WARN_BATTVOLTAGE);\n          drawValueWithUnit(MODEL_SETUP_4TH_COLUMN, y, getBatteryVoltage(), UNIT_VOLTS, attr|PREC2|LEFT);\n        }\n        break;\n      }\n#if defined(HARDWARE_INTERNAL_MODULE)\n      case ITEM_MODEL_SETUP_INTERNAL_MODULE_POWER:\n#endif\n      case ITEM_MODEL_SETUP_EXTERNAL_MODULE_POWER:\n      {\n        if (isModuleR9MNonAccess(moduleIdx)) {\n          lcdDrawText(MENUS_MARGIN_LEFT + INDENT_WIDTH, y, STR_RFPOWER);\n          if (isModuleR9M_FCC_VARIANT(moduleIdx)) {\n            lcdDrawTextAtIndex(MODEL_SETUP_2ND_COLUMN, y, STR_R9M_FCC_POWER_VALUES, g_model.moduleData[moduleIdx].pxx.power, LEFT | attr);\n            if (attr)\n              CHECK_INCDEC_MODELVAR(event, g_model.moduleData[moduleIdx].pxx.power, 0, R9M_FCC_POWER_MAX);\n          }\n          else {\n            lcdDrawTextAtIndex(MODEL_SETUP_2ND_COLUMN, y, STR_R9M_LBT_POWER_VALUES, g_model.moduleData[moduleIdx].pxx.power, LEFT | attr);\n            if (attr)\n              CHECK_INCDEC_MODELVAR(event, g_model.moduleData[moduleIdx].pxx.power, 0, R9M_LBT_POWER_MAX);\n            if (attr && s_editMode == 0 && reusableBuffer.moduleSetup.r9mPower != g_model.moduleData[moduleIdx].pxx.power) {\n              if ((reusableBuffer.moduleSetup.r9mPower + g_model.moduleData[moduleIdx].pxx.power) < 5) { //switching between mode 2 and 3 does not require rebind\n                POPUP_WARNING(STR_WARNING);\n                SET_WARNING_INFO(STR_REBIND, sizeof(TR_REBIND), 0);\n              }\n              reusableBuffer.moduleSetup.r9mPower = g_model.moduleData[moduleIdx].pxx.power;\n            }\n          }\n        }\n#if defined(MULTIMODULE)\n        else if (isModuleMultimodule(moduleIdx)) {\n          lcdDrawText(MENUS_MARGIN_LEFT, y, IS_RX_MULTI(moduleIdx) ? STR_MULTI_LNA_DISABLE : STR_MULTI_LOWPOWER);\n          g_model.moduleData[moduleIdx].multi.lowPowerMode = editCheckBox(g_model.moduleData[moduleIdx].multi.lowPowerMode, MODEL_SETUP_2ND_COLUMN, y, attr, event);\n        }\n#endif\n      }\n      break;\n\n#if defined(MULTIMODULE)\n#if defined(HARDWARE_INTERNAL_MODULE)\n    case ITEM_MODEL_SETUP_INTERNAL_MODULE_AUTOBIND:\n#endif\n    case ITEM_MODEL_SETUP_EXTERNAL_MODULE_AUTOBIND:\n      if (g_model.moduleData[moduleIdx].getMultiProtocol() == MODULE_SUBTYPE_MULTI_DSM2)\n        lcdDrawText(MENUS_MARGIN_LEFT, y, STR_MULTI_DSM_AUTODTECT);\n      else\n        lcdDrawText(MENUS_MARGIN_LEFT, y, STR_MULTI_AUTOBIND);\n      g_model.moduleData[moduleIdx].multi.autoBindMode = editCheckBox(g_model.moduleData[moduleIdx].multi.autoBindMode, MODEL_SETUP_2ND_COLUMN, y, attr, event);\n      break;\n\n#if defined(HARDWARE_INTERNAL_MODULE)\n      case ITEM_MODEL_SETUP_INTERNAL_MODULE_DISABLE_TELEM:\n#endif\n      case ITEM_MODEL_SETUP_EXTERNAL_MODULE_DISABLE_TELEM:\n        lcdDrawText(MENUS_MARGIN_LEFT + INDENT_WIDTH, y, STR_DISABLE_TELEM);\n        g_model.moduleData[moduleIdx].multi.disableTelemetry = editCheckBox(g_model.moduleData[moduleIdx].multi.disableTelemetry, MODEL_SETUP_2ND_COLUMN, y, attr, event);\n        break;\n\n#if defined(HARDWARE_INTERNAL_MODULE)\n      case ITEM_MODEL_SETUP_INTERNAL_MODULE_DISABLE_MAPPING:\n#endif\n      case ITEM_MODEL_SETUP_EXTERNAL_MODULE_DISABLE_MAPPING:\n        lcdDrawText(MENUS_MARGIN_LEFT + INDENT_WIDTH, y, STR_DISABLE_CH_MAP);\n        g_model.moduleData[moduleIdx].multi.disableMapping = editCheckBox(g_model.moduleData[moduleIdx].multi.disableMapping, MODEL_SETUP_2ND_COLUMN, y, attr, event);\n        break;\n\n#if defined(HARDWARE_INTERNAL_MODULE)\n    case ITEM_MODEL_SETUP_INTERNAL_MODULE_STATUS:\n#endif\n    case ITEM_MODEL_SETUP_EXTERNAL_MODULE_STATUS:\n    {\n      lcdDrawText(MENUS_MARGIN_LEFT, y, STR_MODULE_STATUS);\n\n      char statusText[64];\n      getMultiModuleStatus(moduleIdx).getStatusString(statusText);\n      lcdDrawText(MODEL_SETUP_2ND_COLUMN, y, statusText);\n      break;\n    }\n\n#if defined(HARDWARE_INTERNAL_MODULE)\n    case ITEM_MODEL_SETUP_INTERNAL_MODULE_SYNCSTATUS:\n#endif\n    case ITEM_MODEL_SETUP_EXTERNAL_MODULE_SYNCSTATUS:\n    {\n      lcdDrawText(MENUS_MARGIN_LEFT, y, STR_MODULE_SYNC);\n\n      char statusText[64];\n      getMultiSyncStatus(moduleIdx).getRefreshString(statusText);\n      lcdDrawText(MODEL_SETUP_2ND_COLUMN, y, statusText);\n      break;\n    }\n#endif\n\n    }\n  }\n\n  if (isModuleInRangeCheckMode()) {\n    theme->drawMessageBox(\"RSSI :\", NULL, NULL, WARNING_TYPE_INFO);\n    lcdDrawNumber(WARNING_LINE_X, WARNING_INFOLINE_Y, TELEMETRY_RSSI(), DBLSIZE|LEFT);\n  }\n\n  // some field just finished being edited\n  if (old_editMode > 0 && s_editMode == 0) {\n    ModelCell * mod_cell = modelslist.getCurrentModel();\n    if (mod_cell) {\n      switch(menuVerticalPosition) {\n        case ITEM_MODEL_SETUP_NAME:\n          mod_cell->setModelName(g_model.header.name);\n          break;\n#if defined(HARDWARE_INTERNAL_MODULE)\n        case ITEM_MODEL_SETUP_INTERNAL_MODULE_NOT_ACCESS_RXNUM_BIND_RANGE:\n          if (menuHorizontalPosition != 0)\n            break;\n        case ITEM_MODEL_SETUP_INTERNAL_MODULE_TYPE:\n          mod_cell->setRfData(&g_model);\n          checkModelIdUnique(INTERNAL_MODULE);\n          break;\n#endif\n        case ITEM_MODEL_SETUP_EXTERNAL_MODULE_NOT_ACCESS_BIND:\n          if (menuHorizontalPosition != 0)\n            break;\n        case ITEM_MODEL_SETUP_EXTERNAL_MODULE_TYPE:\n          mod_cell->setRfData(&g_model);\n          if (g_model.moduleData[EXTERNAL_MODULE].type != MODULE_TYPE_NONE)\n            checkModelIdUnique(EXTERNAL_MODULE);\n          break;\n      }\n    }\n  }\n\n  return true;\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- radio/src/gui/480x272/model_setup.cpp	(revision f6b413d2fc5d9120e7d35fc5d1f18fd7161fa44f)
+++ radio/src/gui/480x272/model_setup.cpp	(date 1591884812571)
@@ -1656,13 +1656,16 @@
           if (multi_proto == MODULE_SUBTYPE_MULTI_FS_AFHDS2A)
             optionValue = 50 + 5 * optionValue;
 
+          int8_t min, max;
+          getMultiOptionValues(multi_proto, min, max);
+
           if (multi_proto == MODULE_SUBTYPE_MULTI_FRSKY_R9)
             lcdDrawTextAtIndex(MODEL_SETUP_2ND_COLUMN, y, STR_MULTI_POWER, optionValue, LEFT | attr);
+          else if (min == 0 && max == 1)
+            editCheckBox(g_model.moduleData[moduleIdx].multi.optionValue, MODEL_SETUP_2ND_COLUMN, y, attr, event);
           else
             lcdDrawNumber(MODEL_SETUP_2ND_COLUMN, y, optionValue, LEFT | attr);
           if (attr) {
-            int8_t min, max;
-            getMultiOptionValues(multi_proto, min, max);
             CHECK_INCDEC_MODELVAR(event, g_model.moduleData[moduleIdx].multi.optionValue, min, max);
           }
         }
