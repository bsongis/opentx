Index: radio/src/targets/common/arm/stm32/bootloader/CMakeLists.txt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+># TODO if the files order is different (these 2 SRC sections exchanged), the bootloader hangs for 20s in USB init. Why?\n\nset(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR})\n\nif(CPU_TYPE_FULL STREQUAL STM32F429xI)\n  set(BOOTLOADER_SRC\n    ${BOOTLOADER_SRC}\n    ../f4/system_stm32f4xx.c\n    ../../../../../targets/${TARGET_DIR}/startup_stm32f42_43xxx.s\n    ../../../../../${STM32LIB_DIR}/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c\n    ../../../../../${STM32LIB_DIR}/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c\n    ../../../../../${STM32LIB_DIR}/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c\n    ../../../../../${STM32LIB_DIR}/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_syscfg.c\n    ../../../../../${STM32LIB_DIR}/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_gpio.c\n    ../../../../../${STM32LIB_DIR}/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_exti.c\n    ../../../../../${STM32LIB_DIR}/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c\n    ../../../../../${STM32LIB_DIR}/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_fmc.c\n    ../../../../../${STM32LIB_DIR}/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_ltdc.c\n    ../../../../../${STM32LIB_DIR}/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c\n    ../../../../../${STM32LIB_DIR}/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma2d.c\n    ../../../../../${STM32LIB_DIR}/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_sdio.c\n    ../../../../../${STM32LIB_DIR}/STM32F4xx_StdPeriph_Driver/src/misc.c\n    )\nelseif(CPU_TYPE_FULL STREQUAL STM32F407xE)\n  set(BOOTLOADER_SRC\n    ${BOOTLOADER_SRC}\n    ../f4/system_stm32f4xx.c\n    ../../../../../targets/${TARGET_DIR}/startup_stm32f40_41xxx.s\n    ../../../../../${STM32LIB_DIR}/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c\n    ../../../../../${STM32LIB_DIR}/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c\n    ../../../../../${STM32LIB_DIR}/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c\n    ../../../../../${STM32LIB_DIR}/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_syscfg.c\n    ../../../../../${STM32LIB_DIR}/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_gpio.c\n    ../../../../../${STM32LIB_DIR}/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_exti.c\n    ../../../../../${STM32LIB_DIR}/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c\n    ../../../../../${STM32LIB_DIR}/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c\n    ../../../../../${STM32LIB_DIR}/STM32F4xx_StdPeriph_Driver/src/misc.c\n    )\nelse()\n  set(BOOTLOADER_SRC\n    ${BOOTLOADER_SRC}\n    ../f2/system_stm32f2xx.c\n    ../../../../../${STM32LIB_DIR}/CMSIS/Device/ST/STM32F2xx/Source/Templates/gcc_ride7/startup_stm32f2xx.s\n    ../../../../../${STM32LIB_DIR}/STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c\n    ../../../../../${STM32LIB_DIR}/STM32F2xx_StdPeriph_Driver/src/stm32f2xx_syscfg.c\n    ../../../../../${STM32LIB_DIR}/STM32F2xx_StdPeriph_Driver/src/stm32f2xx_gpio.c\n    ../../../../../${STM32LIB_DIR}/STM32F2xx_StdPeriph_Driver/src/stm32f2xx_exti.c\n    ../../../../../${STM32LIB_DIR}/STM32F2xx_StdPeriph_Driver/src/stm32f2xx_spi.c\n    ../../../../../${STM32LIB_DIR}/STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c\n    ../../../../../${STM32LIB_DIR}/STM32F2xx_StdPeriph_Driver/src/misc.c\n    )\nendif()\n\nset(BOOTLOADER_SRC\n  ${BOOTLOADER_SRC}\n  ../../../../../gui/${GUI_DIR}/lcd.cpp\n  ../../../../../gui/${GUI_DIR}/fonts.cpp\n  ../../../../../keys.cpp\n  ../../../../../strhelpers.cpp\n  ../../../../../stamp.cpp\n  ../../../../../${STM32USB_DIR}/STM32_USB_OTG_Driver/src/usb_core.c\n  ../../../../../${STM32USB_DIR}/STM32_USB_OTG_Driver/src/usb_dcd.c\n  ../../../../../${STM32USB_DIR}/STM32_USB_OTG_Driver/src/usb_dcd_int.c\n  ../../../../../${STM32USB_DIR}/STM32_USB_Device_Library/Core/src/usbd_core.c\n  ../../../../../${STM32USB_DIR}/STM32_USB_Device_Library/Core/src/usbd_ioreq.c\n  ../../../../../${STM32USB_DIR}/STM32_USB_Device_Library/Core/src/usbd_req.c\n  ../../../../../${STM32USB_DIR}/STM32_USB_Device_Library/Class/msc/src/usbd_msc_data.c\n  ../../../../../${STM32USB_DIR}/STM32_USB_Device_Library/Class/msc/src/usbd_msc_scsi.c\n  ../../../../../${STM32USB_DIR}/STM32_USB_Device_Library/Class/msc/src/usbd_msc_bot.c\n  ../../../../../${STM32USB_DIR}/STM32_USB_Device_Library/Class/msc/src/usbd_msc_core.c\n  ../../../../../${FATFS_DIR}/ff.c\n  ../../../../../${FATFS_DIR}/option/ccsbcs.c\n  ../../../../../targets/${TARGET_DIR}/${LCD_DRIVER}\n  ../../../../../targets/${TARGET_DIR}/backlight_driver.cpp\n  ../../../../../targets/${TARGET_DIR}/keys_driver.cpp\n  ../../../../../targets/${TARGET_DIR}/diskio.cpp\n  ../../../../../targets/${TARGET_DIR}/board.cpp\n  ../../../../../targets/${TARGET_DIR}/pwr_driver.cpp\n  ../../../../../targets/${TARGET_DIR}/bootloader/boot_menu.cpp\n  ../usbd_usr.cpp\n  ../usbd_storage_msd.cpp\n  ../delays.cpp\n  ../usbd_desc.c\n  ../usb_bsp.c\n  ../usb_driver.cpp\n  ../flash_driver.cpp\n  init.c\n  boot.cpp\n  bin_files.cpp\n  )\n\nif(PCB STREQUAL X12S OR PCB STREQUAL X10 OR PCB STREQUAL X9E OR (PCB STREQUAL X9D+ AND PCBREV STREQUAL 2019) OR (PCB STREQUAL X7 AND NOT (PCBREV STREQUAL T12)) OR PCB STREQUAL X9LITE OR PCB STREQUAL X9LITES)\n  set(BOOTLOADER_SRC\n    ${BOOTLOADER_SRC}\n    ../../../../../targets/common/arm/stm32/rotary_encoder_driver.cpp\n    )\nendif()\n\nif(PCB STREQUAL X7 OR PCB STREQUAL XLITE OR PCB STREQUAL XLITES)\n  set(BOOTLOADER_SRC\n    ${BOOTLOADER_SRC}\n    ../../../../../targets/common/arm/stm32/bluetooth_driver.cpp\n    )\nendif()\n\nif(PCB STREQUAL X10 OR PCB STREQUAL X12S)\n  set(BOOTLOADER_SRC\n    ${BOOTLOADER_SRC}\n    ../../../../../targets/${TARGET_DIR}/sdram_driver.c\n    ../../../../../targets/common/arm/stm32/sdio_sd.c\n    ../../../../../targets/common/arm/stm32/rtc_driver.cpp\n    ../../../../../targets/${TARGET_DIR}/haptic_driver.cpp\n    ../../../../../gui/${GUI_DIR}/bitmapbuffer.cpp\n    ../../../../../gui/${GUI_DIR}/rle.cpp\n\n    ../../../../../syscalls.c\n    )\n\n  if(DEBUG)\n    set(BOOTLOADER_SRC\n      ${BOOTLOADER_SRC}\n      ../../../../../${STM32LIB_DIR}/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c\n      ../../../../../serial.cpp\n      )\n  endif()\nelse()\n  set(BOOTLOADER_SRC\n    ${BOOTLOADER_SRC}\n    ../../../../../targets/${TARGET_DIR}/i2c_driver.cpp\n    )\n  remove_definitions(-DDEBUG)\nendif()\n\nremove_definitions(-DDISK_CACHE)\nremove_definitions(-DLUA)\nremove_definitions(-DCLI)\nremove_definitions(-DSEMIHOSTING)\nremove_definitions(-DUSB_SERIAL)\nremove_definitions(-DWATCHDOG)\n\nadd_definitions(-DBOOT)\n\nset(CMAKE_EXE_LINKER_FLAGS \"-mcpu=${MCU} -mthumb -nostartfiles -lm -T${RADIO_SRC_DIRECTORY}/targets/${TARGET_DIR}/stm32_ramboot.ld -Wl,-Map=bootloader.map,--cref,--no-warn-mismatch,--gc-sections\")\n# use smaller nano libc\nset(CMAKE_EXE_LINKER_FLAGS \"${CMAKE_EXE_LINKER_FLAGS} --specs=nano.specs\")\n\nadd_executable(bootloader ${BOOTLOADER_SRC})\nadd_dependencies(bootloader ${BITMAPS_TARGET} firmware_translations)\n\nadd_custom_command(\n  TARGET bootloader POST_BUILD\n  COMMAND arm-none-eabi-objcopy -O binary bootloader.elf bootloader.bin\n)\nif(PYTHONINTERP_FOUND)\n  add_custom_command(\n    TARGET bootloader POST_BUILD\n    COMMAND ${PYTHON_EXECUTABLE} ${RADIO_DIRECTORY}/util/bin2lbm.py bootloader.bin bootloader.lbm\n  )\nendif()\n\nPrintTargetReport(\"bootloader\")\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- radio/src/targets/common/arm/stm32/bootloader/CMakeLists.txt	(revision 82a7223b78b262f6a4c3421414e91babbd73261a)
+++ radio/src/targets/common/arm/stm32/bootloader/CMakeLists.txt	(date 1576578830615)
@@ -75,7 +75,7 @@
   ../../../../../targets/${TARGET_DIR}/keys_driver.cpp
   ../../../../../targets/${TARGET_DIR}/diskio.cpp
   ../../../../../targets/${TARGET_DIR}/board.cpp
-  ../../../../../targets/${TARGET_DIR}/pwr_driver.cpp
+  ../pwr_driver.cpp
   ../../../../../targets/${TARGET_DIR}/bootloader/boot_menu.cpp
   ../usbd_usr.cpp
   ../usbd_storage_msd.cpp
Index: radio/src/targets/taranis/CMakeLists.txt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>option(SHUTDOWN_CONFIRMATION \"Shutdown confirmation\" OFF)\noption(LCD_DUAL_BUFFER \"Dual LCD Buffer\" OFF)\noption(PXX1 \"PXX1 protocol support\" ON)\noption(PXX2 \"PXX2 protocol support\" OFF)\noption(INTERNAL_MODULE_PPM \"Support for PPM internal module\" OFF)\noption(AUTOUPDATE \"Auto update internal chips from SD\" OFF)\n\nif(PCB STREQUAL X9E)\n  option(INTERNAL_MODULE_PXX1 \"Support for PXX1 internal module\" ON)\n  option(INTERNAL_MODULE_PXX2 \"Support for PXX2 internal module\" OFF)\n  set(PWR_BUTTON \"PRESS\" CACHE STRING \"Pwr button type (PRESS/SWITCH)\")\n  set(STICKS \"STANDARD\" CACHE STRING \"Sticks type (STANDARD/HORUS)\")\n  set(CPU_TYPE STM32F4)\n  set(CPU_TYPE_FULL STM32F407xE)  # for size report\n  set(LINKER_SCRIPT targets/taranis/stm32f4_flash.ld)\n  add_definitions(-DSTM32F40_41xxx)\n  set(HAPTIC YES)\n  set(LUA_EXPORT lua_export_x9e)\n  set(FLAVOUR x9e)\n  add_definitions(-DPCBX9E -DPCBX9)\n  add_definitions(-DEEPROM_VARIANT=0x8000)\n  add_definitions(-DPWR_BUTTON_${PWR_BUTTON})\n  set(FIRMWARE_TARGET_SRC\n    ${FIRMWARE_TARGET_SRC}\n    top_lcd_driver.cpp\n    startup_stm32f40_41xxx.s\n    )\n  set(AUX_SERIAL_DRIVER ../common/arm/stm32/aux_serial_driver.cpp)\n  if(STICKS STREQUAL HORUS)\n    add_definitions(-DHORUS_STICKS)\n  endif()\n  set(GUI_DIR 212x64)\n  set(NAVIGATION_TYPE x9d)\n  set(BITMAPS_TARGET taranis_bitmaps)\n  set(FONTS_TARGET taranis_fonts)\n  set(LCD_DRIVER lcd_driver_spi.cpp)\n  set(GVAR_SCREEN model_gvars.cpp)\n  set(STATUS_LEDS NO)\n  set(BLUETOOTH YES)\n  set(ROTARY_ENCODER YES)\nelseif(PCB STREQUAL X9D+)\n  set(HAPTIC YES)\n  set(LUA_EXPORT lua_export_x9d)\n  add_definitions(-DPCBX9DP -DPCBX9)\n  add_definitions(-DEEPROM_VARIANT=0)\n  set(GUI_DIR 212x64)\n  set(NAVIGATION_TYPE x9d)\n  set(BITMAPS_TARGET taranis_bitmaps)\n  set(FONTS_TARGET taranis_fonts)\n  set(LCD_DRIVER lcd_driver_spi.cpp)\n  set(GVAR_SCREEN model_gvars.cpp)\n  set(PCBREV 2014 CACHE STRING \"PCB Revision\")\n  add_definitions(-DPCBREV=${PCBREV})\n  if (${PCBREV} STREQUAL 2019)\n    option(INTERNAL_MODULE_PXX1 \"Support for PXX1 internal module\" OFF)\n    option(INTERNAL_MODULE_PXX2 \"Support for PXX2 internal module\" ON)\n    set(FLAVOUR x9d+2019)\n    set(CPU_TYPE STM32F4)\n    set(CPU_TYPE_FULL STM32F407xE)  # for size report\n    set(LINKER_SCRIPT targets/taranis/stm32f4_flash.ld)\n    set(PWR_BUTTON \"PRESS\" CACHE STRING \"Pwr button type (PRESS/SWITCH)\")\n    set(FIRMWARE_TARGET_SRC\n      ${FIRMWARE_TARGET_SRC}\n      startup_stm32f40_41xxx.s\n      )\n    add_definitions(-DRADIO_X9DP2019)\n    add_definitions(-DSTM32F40_41xxx)\n    add_definitions(-DSOFTWARE_VOLUME -DPWR_BUTTON_${PWR_BUTTON} -DHARDWARE_POWER_MANAGEMENT_UNIT)\n    set(STATUS_LEDS YES)\n    set(PXX2 ON)\n    set(PXX_FREQUENCY \"HIGH\")\n    set(BLUETOOTH YES)\n    set(ROTARY_ENCODER YES)\n    set(INTERNAL_MODULE_SERIAL YES)\n  else()\n    option(INTERNAL_MODULE_PXX1 \"Support for PXX1 internal module\" ON)\n    option(INTERNAL_MODULE_PXX2 \"Support for PXX2 internal module\" OFF)\n    set(FLAVOUR x9d+)\n    set(CPU_TYPE STM32F2)\n    set(CPU_TYPE_FULL STM32F205xE)  # for size report\n    set(LINKER_SCRIPT targets/taranis/stm32f2_flash.ld)\n    set(AUX_SERIAL_DRIVER ../common/arm/stm32/aux_serial_driver.cpp)\n    set(STATUS_LEDS NO)\n  endif()\nelseif(PCB STREQUAL X9D)\n  option(INTERNAL_MODULE_PXX1 \"Support for PXX1 internal module\" ON)\n  option(INTERNAL_MODULE_PXX2 \"Support for PXX2 internal module\" OFF)\n  set(FLAVOUR x9d)\n  set(CPU_TYPE STM32F2)\n  set(CPU_TYPE_FULL STM32F205xE)  # for size report\n  set(LINKER_SCRIPT targets/taranis/stm32f2_flash.ld)\n  option(HAPTIC \"Haptic support\" OFF)\n  set(LUA_EXPORT lua_export_x9d)\n  add_definitions(-DPCBX9D -DPCBX9)\n  add_definitions(-DEEPROM_VARIANT=0)\n  set(GUI_DIR 212x64)\n  set(NAVIGATION_TYPE x9d)\n  set(BITMAPS_TARGET taranis_bitmaps)\n  set(FONTS_TARGET taranis_fonts)\n  set(LCD_DRIVER lcd_driver_aspi.cpp)\n  set(AUX_SERIAL_DRIVER ../common/arm/stm32/aux_serial_driver.cpp)\n  set(GVAR_SCREEN model_gvars.cpp)\n  set(STATUS_LEDS NO)\nelseif(PCB STREQUAL X7)\n  set(PWR_BUTTON \"PRESS\" CACHE STRING \"Pwr button type (PRESS/SWITCH)\")\n  set(HAPTIC YES)\n  set(GUI_DIR 128x64)\n  set(BITMAPS_TARGET 9x_bitmaps)\n  set(FONTS_TARGET 9x_fonts_1bit)\n  set(LCD_DRIVER lcd_driver_spi.cpp)\n  set(GVAR_SCREEN model_gvars.cpp)\n  set(STATUS_LEDS YES)\n  add_definitions(-DPCBX7 -DSOFTWARE_VOLUME)\n  add_definitions(-DPWR_BUTTON_${PWR_BUTTON})\n  if(PCBREV STREQUAL T12)\n    option(INTERNAL_MODULE_MULTI \"Support for MULTI internal module\" OFF)\n    set(FLAVOUR t12)\n    set(NAVIGATION_TYPE 9x)\n    set(CPU_TYPE STM32F2)\n    set(CPU_TYPE_FULL STM32F205xE)  # for size report\n    set(LINKER_SCRIPT targets/taranis/stm32f2_flash.ld)\n    set(LUA_EXPORT lua_export_t12)\n    add_definitions(-DRADIO_T12)\n    add_definitions(-DEEPROM_VARIANT=0x4001)\n  elseif(PCBREV STREQUAL ACCESS)\n    option(INTERNAL_MODULE_PXX1 \"Support for PXX1 internal module\" OFF)\n    option(INTERNAL_MODULE_PXX2 \"Support for PXX2 internal module\" ON)\n    set(FLAVOUR x7access)\n    set(NAVIGATION_TYPE x7)\n    set(CPU_TYPE STM32F4)\n    set(CPU_TYPE_FULL STM32F407xE)  # for size report\n    set(LINKER_SCRIPT targets/taranis/stm32f4_flash.ld)\n    set(LUA_EXPORT lua_export_x7access)\n    add_definitions(-DRADIO_X7ACCESS)\n    add_definitions(-DEEPROM_VARIANT=0x4000)\n    add_definitions(-DPCBREV=${PCBREV})\n    add_definitions(-DPCBX7ACCESS)\n    set(FIRMWARE_TARGET_SRC\n      ${FIRMWARE_TARGET_SRC}\n      startup_stm32f40_41xxx.s\n      )\n    add_definitions(-DSTM32F40_41xxx)\n    add_definitions(-DHARDWARE_POWER_MANAGEMENT_UNIT)\n    set(PXX2 ON)\n    set(PXX_FREQUENCY \"HIGH\")\n    set(BLUETOOTH YES)\n    set(ROTARY_ENCODER YES)\n    set(INTERNAL_MODULE_SERIAL YES)\n  else()\n    option(INTERNAL_MODULE_PXX1 \"Support for PXX1 internal module\" ON)\n    option(INTERNAL_MODULE_PXX2 \"Support for PXX2 internal module\" OFF)\n    set(FLAVOUR x7)\n    set(NAVIGATION_TYPE x7)\n    set(CPU_TYPE STM32F2)\n    set(CPU_TYPE_FULL STM32F205xE)  # for size report\n    set(LINKER_SCRIPT targets/taranis/stm32f2_flash.ld)\n    set(LUA_EXPORT lua_export_x7)\n    add_definitions(-DRADIO_X7)\n    add_definitions(-DEEPROM_VARIANT=0x4000)\n    set(BLUETOOTH YES)\n    add_definitions(-DBLUETOOTH_PROBE)\n    set(ROTARY_ENCODER YES)\n  endif()\nelseif(PCB STREQUAL X9LITE)\n  option(INTERNAL_MODULE_PXX1 \"Support for PXX1 internal module\" OFF)\n  option(INTERNAL_MODULE_PXX2 \"Support for PXX2 internal module\" ON)\n  set(PXX_FREQUENCY \"HIGH\")\n  set(PWR_BUTTON \"PRESS\" CACHE STRING \"Pwr button type (PRESS/SWITCH)\")\n  set(CPU_TYPE STM32F2)\n  set(CPU_TYPE_FULL STM32F205xE)  # for size report\n  set(LINKER_SCRIPT targets/taranis/stm32f2_flash.ld)\n  set(HAPTIC YES)\n  set(LUA_EXPORT lua_export_x9lite)\n  set(FLAVOUR x9lite)\n  add_definitions(-DBOARD_NAME=\"x9lite\")\n  add_definitions(-DPCBX9LITE -DPCBX9 -DSOFTWARE_VOLUME -DHARDWARE_POWER_MANAGEMENT_UNIT)\n  add_definitions(-DEEPROM_VARIANT=0x0800)\n  add_definitions(-DPWR_BUTTON_${PWR_BUTTON})\n  set(PXX2 ON)\n  set(GUI_DIR 128x64)\n  set(NAVIGATION_TYPE x7)\n  set(BITMAPS_TARGET 9x_bitmaps)\n  set(FONTS_TARGET 9x_fonts_1bit)\n  set(LCD_DRIVER lcd_driver_spi.cpp)\n  set(GVAR_SCREEN model_gvars.cpp)\n  set(STATUS_LEDS YES)\n  set(ROTARY_ENCODER YES)\n  set(INTERNAL_MODULE_SERIAL YES)\nelseif(PCB STREQUAL X9LITES)\n  option(INTERNAL_MODULE_PXX1 \"Support for PXX1 internal module\" OFF)\n  option(INTERNAL_MODULE_PXX2 \"Support for PXX2 internal module\" ON)\n  set(PXX_FREQUENCY \"HIGH\")\n  set(PWR_BUTTON \"PRESS\" CACHE STRING \"Pwr button type (PRESS/SWITCH)\")\n  set(CPU_TYPE STM32F2)\n  set(CPU_TYPE_FULL STM32F205xE)  # for size report\n  set(LINKER_SCRIPT targets/taranis/stm32f2_flash.ld)\n  set(HAPTIC YES)\n  set(LUA_EXPORT lua_export_x9lites)\n  set(FLAVOUR x9lites)\n  add_definitions(-DBOARD_NAME=\"x9lites\")\n  add_definitions(-DPCBX9LITES -DPCBX9LITE -DPCBX9 -DSOFTWARE_VOLUME -DHARDWARE_POWER_MANAGEMENT_UNIT)\n  add_definitions(-DEEPROM_VARIANT=0x0800)\n  add_definitions(-DPWR_BUTTON_${PWR_BUTTON})\n  set(PXX2 ON)\n  set(GUI_DIR 128x64)\n  set(NAVIGATION_TYPE x7)\n  set(BITMAPS_TARGET 9x_bitmaps)\n  set(FONTS_TARGET 9x_fonts_1bit)\n  set(LCD_DRIVER lcd_driver_spi.cpp)\n  set(GVAR_SCREEN model_gvars.cpp)\n  set(STATUS_LEDS YES)\n  set(BLUETOOTH YES)\n  set(ROTARY_ENCODER YES)\n  set(INTERNAL_MODULE_SERIAL YES)\nelseif(PCB STREQUAL XLITE)\n  option(INTERNAL_MODULE_PXX1 \"Support for PXX1 internal module\" ON)\n  option(INTERNAL_MODULE_PXX2 \"Support for PXX2 internal module\" OFF)\n  set(PXX_FREQUENCY \"HIGH\" CACHE STRING \"PXX frequency (LOW / HIGH)\") # always use HIGH except on some prototype boards\n  set(PWR_BUTTON \"PRESS\" CACHE STRING \"Pwr button type (PRESS/SWITCH)\")\n  set(CPU_TYPE STM32F2)\n  set(CPU_TYPE_FULL STM32F205xE)  # for size report\n  set(LINKER_SCRIPT targets/taranis/stm32f2_flash.ld)\n  set(HAPTIC YES)\n  set(LUA_EXPORT lua_export_xlite)\n  set(FLAVOUR xlite)\n  add_definitions(-DPCBXLITE -DSOFTWARE_VOLUME -DSTICKS_PWM)\n  add_definitions(-DEEPROM_VARIANT=0x2000)\n  add_definitions(-DPWR_BUTTON_${PWR_BUTTON})\n  set(PXX2 ON)\n  set(GUI_DIR 128x64)\n  set(NAVIGATION_TYPE xlite)\n  set(BITMAPS_TARGET 9x_bitmaps)\n  set(FONTS_TARGET 9x_fonts_1bit)\n  set(LCD_DRIVER lcd_driver_spi.cpp)\n  set(GVAR_SCREEN model_gvars.cpp)\n  set(STATUS_LEDS YES)\n  set(BLUETOOTH YES)\n  set(INTERNAL_MODULE_SERIAL YES)\nelseif(PCB STREQUAL XLITES)\n  option(INTERNAL_MODULE_PXX1 \"Support for PXX1 internal module\" OFF)\n  option(INTERNAL_MODULE_PXX2 \"Support for PXX2 internal module\" ON)\n  set(PXX_FREQUENCY \"HIGH\")\n  set(PWR_BUTTON \"PRESS\" CACHE STRING \"Pwr button type (PRESS/SWITCH)\")\n  set(CPU_TYPE STM32F2)\n  set(CPU_TYPE_FULL STM32F205xE)  # for size report\n  set(LINKER_SCRIPT targets/taranis/stm32f2_flash.ld)\n  set(HAPTIC YES)\n  set(LUA_EXPORT lua_export_xlites)\n  set(FLAVOUR xlites)\n  add_definitions(-DPCBXLITES -DPCBXLITE -DSOFTWARE_VOLUME -DSTICKS_PWM -DHARDWARE_POWER_MANAGEMENT_UNIT)\n  add_definitions(-DEEPROM_VARIANT=0x1000)\n  add_definitions(-DPWR_BUTTON_${PWR_BUTTON})\n  set(GUI_DIR 128x64)\n  set(NAVIGATION_TYPE xlite)\n  set(BITMAPS_TARGET 9x_bitmaps)\n  set(FONTS_TARGET 9x_fonts_1bit)\n  set(LCD_DRIVER lcd_driver_spi.cpp)\n  set(GVAR_SCREEN model_gvars.cpp)\n  set(STATUS_LEDS YES)\n  set(PXX2 ON)\n  set(BLUETOOTH YES)\n  set(GYRO YES)\n  set(INTERNAL_MODULE_SERIAL YES)\nendif()\n\nif(GYRO)\n  add_definitions(-DGYRO)\n  set(TARGET_SRC\n    ${TARGET_SRC}\n    ../common/arm/stm32/lsm6ds_driver.cpp\n    )\n  set(SRC\n    ${SRC}\n    gyro.cpp\n    )\nendif()\n\nif(INTERNAL_MODULE_SERIAL)\n  add_definitions(-DINTERNAL_MODULE_SERIAL)\n  if(PXX_FREQUENCY STREQUAL HIGH)\n    add_definitions(-DPXX_FREQUENCY_HIGH)\n  endif()\n  set(TARGET_SRC\n    ${TARGET_SRC}\n    ../common/arm/stm32/intmodule_serial_driver.cpp\n    )\nelseif(NOT (PCB STREQUAL X7 AND PCBREV STREQUAL T12))\n  set(TARGET_SRC\n    ${TARGET_SRC}\n    intmodule_pulses_driver.cpp\n    )\nendif()\n\nif(ROTARY_ENCODER)\n  set(TARGET_SRC\n    ${TARGET_SRC}\n    ../common/arm/stm32/rotary_encoder_driver.cpp\n    )\nendif()\n\nif(BLUETOOTH)\n  add_definitions(-DBLUETOOTH)\n  set(TARGET_SRC\n    ${TARGET_SRC}\n    ../common/arm/stm32/bluetooth_driver.cpp\n    )\n  set(SRC\n    ${SRC}\n    bluetooth.cpp\n    )\nendif()\n\nif(AUTOUPDATE)\n  add_definitions(-DAUTOUPDATE)\nendif()\n\nset(HSE_VALUE 12000000)\nset(SDCARD YES)\nset(EEPROM EEPROM_RLC)\nset(TARGET_DIR taranis)\nset(PPM_LIMITS_SYMETRICAL YES)\n\nif(SPLASH STREQUAL OFF)\n  message(FATAL_ERROR \"Option SPLASH=OFF not supported on Taranis\")\nendif()\n\nadd_definitions(-DPCBTARANIS)\nadd_definitions(-DAUDIO -DVOICE -DRTCLOCK)\n\nset(SRC\n  ${SRC}\n  io/frsky_firmware_update.cpp\n  io/multi_firmware_update.cpp\n  )\n\nset(GUI_SRC\n  ${GUI_SRC}\n  model_input_edit.cpp\n  model_mix_edit.cpp\n  model_display.cpp\n  radio_diagkeys.cpp\n  radio_diaganas.cpp\n  view_channels.cpp\n  view_telemetry.cpp\n  view_about.cpp\n  bmp.cpp\n  )\n\nif(STATUS_LEDS)\n  set(LED_DRIVER led_driver.cpp)\nendif()\n\nset(SRC\n  ${SRC}\n  sbus.cpp\n  )\n\nset(TARGET_SRC\n  ${TARGET_SRC}\n  ${LED_DRIVER}\n  backlight_driver.cpp\n  extmodule_driver.cpp\n  trainer_driver.cpp\n  ../common/arm/stm32/timers_driver.cpp\n  ../common/arm/stm32/audio_dac_driver.cpp\n  ../common/arm/stm32/adc_driver.cpp\n  ../common/arm/stm32/heartbeat_driver.cpp\n  )\n\nif(PCB STREQUAL XLITE OR PCB STREQUAL XLITES)\n  set(TARGET_SRC\n    ${TARGET_SRC}\n    ../common/arm/stm32/sticks_pwm_driver.cpp\n    )\nendif()\n\nset(FIRMWARE_TARGET_SRC\n  ${FIRMWARE_TARGET_SRC}\n  ${LCD_DRIVER}\n  board.cpp\n  i2c_driver.cpp\n  pwr_driver.cpp\n  ../common/arm/loadboot.cpp\n  )\n\nif(LCD_DUAL_BUFFER)\n  add_definitions(-DLCD_DUAL_BUFFER)\nendif()\n\nif(INTERNAL_MODULE_PXX1)\n  add_definitions(-DHARDWARE_INTERNAL_MODULE)\n  add_definitions(-DINTERNAL_MODULE_PXX1)\nendif()\n\nif(INTERNAL_MODULE_PXX2)\n  set(PXX2 ON)\n  add_definitions(-DHARDWARE_INTERNAL_MODULE)\n  add_definitions(-DINTERNAL_MODULE_PXX2)\nendif()\n\nif(INTERNAL_MODULE_MULTI)\n  add_definitions(-DHARDWARE_INTERNAL_MODULE)\n  add_definitions(-DINTERNAL_MODULE_MULTI)\n  set(TARGET_SRC\n    ${TARGET_SRC}\n    ../common/arm/stm32/intmodule_serial_driver.cpp\n    )\nendif()\n\nif(INTERNAL_MODULE_PPM)\n  add_definitions(-DHARDWARE_INTERNAL_MODULE)\n  add_definitions(-DINTERNAL_MODULE_PPM)\nendif()\n\nset(RADIO_DEPENDENCIES ${RADIO_DEPENDENCIES} ${BITMAPS_TARGET})\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- radio/src/targets/taranis/CMakeLists.txt	(revision 82a7223b78b262f6a4c3421414e91babbd73261a)
+++ radio/src/targets/taranis/CMakeLists.txt	(date 1576578830811)
@@ -379,7 +379,7 @@
   ${LCD_DRIVER}
   board.cpp
   i2c_driver.cpp
-  pwr_driver.cpp
+  ../common/arm/stm32/pwr_driver.cpp
   ../common/arm/loadboot.cpp
   )
 
Index: radio/src/targets/horus/hal.h
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>/*\n * Copyright (C) OpenTX\n *\n * Based on code named\n *   th9x - http://code.google.com/p/th9x\n *   er9x - http://code.google.com/p/er9x\n *   gruvin9x - http://code.google.com/p/gruvin9x\n *\n * License GPLv2: http://www.gnu.org/licenses/gpl-2.0.html\n *\n * This program is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License version 2 as\n * published by the Free Software Foundation.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n */\n\n#ifndef _HAL_H_\n#define _HAL_H_\n\n// Keys\n#define KEYS_RCC_AHB1Periph             (RCC_AHB1Periph_GPIOB | RCC_AHB1Periph_GPIOC | RCC_AHB1Periph_GPIOD | RCC_AHB1Periph_GPIOE | RCC_AHB1Periph_GPIOG | RCC_AHB1Periph_GPIOH | RCC_AHB1Periph_GPIOI | RCC_AHB1Periph_GPIOJ)\n#if defined(PCBX12S)\n  #define KEYS_GPIO_REG_PGUP            GPIOC->IDR\n  #define KEYS_GPIO_PIN_PGUP            GPIO_Pin_13 // PC.13\n  #define KEYS_GPIO_REG_PGDN            GPIOI->IDR\n  #define KEYS_GPIO_PIN_PGDN            GPIO_Pin_8  // PI.08\n  #define KEYS_GPIO_REG_LEFT            GPIOI->IDR\n  #define KEYS_GPIO_PIN_LEFT            GPIO_Pin_7  // PI.07\n  #define KEYS_GPIO_REG_ENTER           GPIOC->IDR\n  #define KEYS_GPIO_PIN_ENTER           GPIO_Pin_1  // PC.01\n  #define KEYS_GPIO_REG_UP              GPIOG->IDR\n  #define KEYS_GPIO_PIN_UP              GPIO_Pin_13 // PG.13\n  #define KEYS_GPIO_REG_DOWN            GPIOI->IDR\n  #define KEYS_GPIO_PIN_DOWN            GPIO_Pin_6  // PI.06\n  #define KEYS_GPIO_REG_RIGHT           GPIOC->IDR\n  #define KEYS_GPIO_PIN_RIGHT           GPIO_Pin_4  // PC.04\n#elif defined(PCBX10)\n  #define KEYS_GPIO_REG_ENTER           GPIOI->IDR\n  #define KEYS_GPIO_PIN_ENTER           GPIO_Pin_8  // PI.08\n  #define KEYS_GPIO_REG_PGDN            GPIOI->IDR\n  #define KEYS_GPIO_PIN_PGDN            GPIO_Pin_11 // PI.11\n  #define KEYS_GPIO_REG_UP              GPIOI->IDR\n  #define KEYS_GPIO_PIN_UP              GPIO_Pin_4  // PI.04\n  #define KEYS_GPIO_REG_DOWN            GPIOI->IDR\n  #define KEYS_GPIO_PIN_DOWN            GPIO_Pin_6  // PI.06\n  #define KEYS_GPIO_REG_LEFT            GPIOI->IDR\n  #define KEYS_GPIO_PIN_LEFT            GPIO_Pin_7  // PI.07\n  #define KEYS_GPIO_REG_RIGHT           GPIOI->IDR\n  #define KEYS_GPIO_PIN_RIGHT           GPIO_Pin_5  // PI.05\n#endif\n\n// Rotary Encoder\n#define ROTARY_ENCODER_RCC_APB1Periph   RCC_APB1Periph_TIM4\n#define ROTARY_ENCODER_GPIO             GPIOH\n#define ROTARY_ENCODER_GPIO_PIN_A       GPIO_Pin_11 // PH.11\n#define ROTARY_ENCODER_GPIO_PIN_B       GPIO_Pin_10 // PH.10\n#define ROTARY_ENCODER_POSITION()       ((ROTARY_ENCODER_GPIO->IDR >> 10) & 0x03)\n#define ROTARY_ENCODER_EXTI_LINE1       EXTI_Line11\n#define ROTARY_ENCODER_EXTI_LINE2       EXTI_Line10\n#define ROTARY_ENCODER_EXTI_IRQn1       EXTI15_10_IRQn\n#define ROTARY_ENCODER_EXTI_IRQHandler1 EXTI15_10_IRQHandler\n#define ROTARY_ENCODER_EXTI_PortSource  EXTI_PortSourceGPIOH\n#define ROTARY_ENCODER_EXTI_PinSource1  EXTI_PinSource11\n#define ROTARY_ENCODER_EXTI_PinSource2  EXTI_PinSource10\n#define ROTARY_ENCODER_TIMER            TIM4\n#define ROTARY_ENCODER_TIMER_IRQn       TIM4_IRQn\n#define ROTARY_ENCODER_TIMER_IRQHandler TIM4_IRQHandler\n\n// Switches\n#define STORAGE_SWITCH_A\n#define HARDWARE_SWITCH_A\n#define SWITCHES_GPIO_REG_A_H           GPIOH->IDR\n#define SWITCHES_GPIO_PIN_A_H           GPIO_Pin_9  // PH.09\n#define SWITCHES_GPIO_REG_A_L           GPIOI->IDR\n#define SWITCHES_GPIO_PIN_A_L           GPIO_Pin_15 // PI.15\n#define STORAGE_SWITCH_B\n#define HARDWARE_SWITCH_B\n#define SWITCHES_GPIO_REG_B_H           GPIOH->IDR\n#define SWITCHES_GPIO_PIN_B_H           GPIO_Pin_12 // PH.12\n#define SWITCHES_GPIO_REG_B_L           GPIOB->IDR\n#define SWITCHES_GPIO_PIN_B_L           GPIO_Pin_12 // PB.12\n#define STORAGE_SWITCH_C\n#define HARDWARE_SWITCH_C\n#define SWITCHES_GPIO_REG_C_H           GPIOD->IDR\n#define SWITCHES_GPIO_PIN_C_H           GPIO_Pin_11 // PD.11\n#define SWITCHES_GPIO_REG_C_L           GPIOB->IDR\n#define SWITCHES_GPIO_PIN_C_L           GPIO_Pin_15 // PB.15\n#define STORAGE_SWITCH_D\n#define HARDWARE_SWITCH_D\n#define SWITCHES_GPIO_REG_D_H           GPIOJ->IDR\n#define SWITCHES_GPIO_PIN_D_H           GPIO_Pin_7  // PJ.07\n#define SWITCHES_GPIO_REG_D_L           GPIOG->IDR\n#define SWITCHES_GPIO_PIN_D_L           GPIO_Pin_2  // PG.02\n#define STORAGE_SWITCH_E\n#define HARDWARE_SWITCH_E\n#define SWITCHES_GPIO_REG_E_H           GPIOH->IDR\n#define SWITCHES_GPIO_PIN_E_H           GPIO_Pin_4  // PH.04\n#define SWITCHES_GPIO_REG_E_L           GPIOE->IDR\n#define SWITCHES_GPIO_PIN_E_L           GPIO_Pin_3  // PE.03\n#define STORAGE_SWITCH_F\n#define HARDWARE_SWITCH_F\n#define SWITCHES_GPIO_REG_F             GPIOH->IDR\n#define SWITCHES_GPIO_PIN_F             GPIO_Pin_3  // PH.03\n#define STORAGE_SWITCH_G\n#define HARDWARE_SWITCH_G\n#define SWITCHES_GPIO_REG_G_H           GPIOG->IDR\n#define SWITCHES_GPIO_PIN_G_H           GPIO_Pin_6  // PG.06\n#define SWITCHES_GPIO_REG_G_L           GPIOG->IDR\n#define SWITCHES_GPIO_PIN_G_L           GPIO_Pin_3  // PG.03\n#define STORAGE_SWITCH_H\n#define HARDWARE_SWITCH_H\n#define SWITCHES_GPIO_REG_H             GPIOG->IDR\n#define SWITCHES_GPIO_PIN_H             GPIO_Pin_7  // PG.07\n\n#if defined(PCBX10)\n  // Gimbal switch left\n  #define STORAGE_SWITCH_I\n  #define HARDWARE_SWITCH_I\n  #define SWITCHES_GPIO_REG_I        GPIOH->IDR\n  #define SWITCHES_GPIO_PIN_I        GPIO_Pin_14 // PH.14\n  // Gimbal switch right\n  #define STORAGE_SWITCH_J\n  #define HARDWARE_SWITCH_J\n  #define SWITCHES_GPIO_REG_J        GPIOH->IDR\n  #define SWITCHES_GPIO_PIN_J        GPIO_Pin_15 // PH.15\n#elif defined(PCBX12S)\n  // Gimbal switch left\n  #define STORAGE_SWITCH_I\n  #define HARDWARE_SWITCH_I\n  #define SWITCHES_GPIO_REG_I        GPIOB->IDR\n  #define SWITCHES_GPIO_PIN_I        GPIO_Pin_1 // PB.01\n  // Gimbal switch right\n  #define STORAGE_SWITCH_J\n  #define HARDWARE_SWITCH_J\n  #define SWITCHES_GPIO_REG_J        GPIOB->IDR\n  #define SWITCHES_GPIO_PIN_J        GPIO_Pin_0 // PB.00\n#endif\n\n// Trims\n#if defined(PCBX12S)\n  #define TRIMS_GPIO_REG_RHL            GPIOC->IDR\n  #define TRIMS_GPIO_PIN_RHL            GPIO_Pin_0  // PC.00\n  #define TRIMS_GPIO_REG_RHR            GPIOI->IDR\n  #define TRIMS_GPIO_PIN_RHR            GPIO_Pin_4  // PI.04\n  #define TRIMS_GPIO_REG_RVD            GPIOG->IDR\n  #define TRIMS_GPIO_PIN_RVD            GPIO_Pin_12 // PG.12\n  #define TRIMS_GPIO_REG_RVU            GPIOJ->IDR\n  #define TRIMS_GPIO_PIN_RVU            GPIO_Pin_14 // PJ.14\n  #define TRIMS_GPIO_REG_LVD            GPIOJ->IDR\n  #define TRIMS_GPIO_PIN_LVD            GPIO_Pin_13 // PJ.13\n  #define TRIMS_GPIO_REG_LHL            GPIOD->IDR\n  #define TRIMS_GPIO_PIN_LHL            GPIO_Pin_3  // PD.03\n  #define TRIMS_GPIO_REG_LVU            GPIOJ->IDR\n  #define TRIMS_GPIO_PIN_LVU            GPIO_Pin_12 // PJ.12\n  #define TRIMS_GPIO_REG_LHR            GPIOD->IDR\n  #define TRIMS_GPIO_PIN_LHR            GPIO_Pin_7  // PD.07\n  #define TRIMS_GPIO_REG_RSD            GPIOJ->IDR\n  #define TRIMS_GPIO_PIN_RSD            GPIO_Pin_8  // PJ.08\n  #define TRIMS_GPIO_REG_RSU            GPIOD->IDR\n  #define TRIMS_GPIO_PIN_RSU            GPIO_Pin_13 // PD.13\n  #define TRIMS_GPIO_REG_LSD            GPIOB->IDR\n  #define TRIMS_GPIO_PIN_LSD            GPIO_Pin_14 // PB.14\n  #define TRIMS_GPIO_REG_LSU            GPIOB->IDR\n  #define TRIMS_GPIO_PIN_LSU            GPIO_Pin_13 // PB.13\n#elif defined(PCBX10)\n  #define TRIMS_GPIO_REG_LHL            GPIOB->IDR\n  #define TRIMS_GPIO_PIN_LHL            GPIO_Pin_8  // PB.08\n  #define TRIMS_GPIO_REG_LHR            GPIOB->IDR\n  #define TRIMS_GPIO_PIN_LHR            GPIO_Pin_9  // PB.09\n  #define TRIMS_GPIO_REG_LVD            GPIOG->IDR\n  #define TRIMS_GPIO_PIN_LVD            GPIO_Pin_12 // PG.12\n  #define TRIMS_GPIO_REG_LVU            GPIOJ->IDR\n  #define TRIMS_GPIO_PIN_LVU            GPIO_Pin_14 // PJ.14\n  #define TRIMS_GPIO_REG_RVD            GPIOJ->IDR\n  #define TRIMS_GPIO_PIN_RVD            GPIO_Pin_13 // PJ.13\n  #define TRIMS_GPIO_REG_RHL            GPIOD->IDR\n  #define TRIMS_GPIO_PIN_RHL            GPIO_Pin_3  // PD.03\n  #define TRIMS_GPIO_REG_RVU            GPIOJ->IDR\n  #define TRIMS_GPIO_PIN_RVU            GPIO_Pin_12 // PJ.12\n  #define TRIMS_GPIO_REG_RHR            GPIOD->IDR\n  #define TRIMS_GPIO_PIN_RHR            GPIO_Pin_7  // PD.07\n  #if defined(RADIO_T16)\n    #define TRIMS_GPIO_REG_LSU            GPIOD->IDR\n    #define TRIMS_GPIO_PIN_LSU            GPIO_Pin_13 // PD.13\n    #define TRIMS_GPIO_REG_LSD            GPIOJ->IDR\n    #define TRIMS_GPIO_PIN_LSD            GPIO_Pin_8  // PJ.08\n  #else\n    #define TRIMS_GPIO_REG_LSU            GPIOJ->IDR\n    #define TRIMS_GPIO_PIN_LSU            GPIO_Pin_8  // PJ.08\n    #define TRIMS_GPIO_REG_LSD            GPIOD->IDR\n    #define TRIMS_GPIO_PIN_LSD            GPIO_Pin_13 // PD.13\n  #endif\n  #define TRIMS_GPIO_REG_RSU            GPIOB->IDR\n  #define TRIMS_GPIO_PIN_RSU            GPIO_Pin_14 // PB.14\n  #define TRIMS_GPIO_REG_RSD            GPIOB->IDR\n  #define TRIMS_GPIO_PIN_RSD            GPIO_Pin_13 // PB.13\n#endif\n\n// Index of all keys\n#if defined(PCBX12S)\n  #define KEYS_GPIOB_PINS               (GPIO_Pin_0 | GPIO_Pin_1 | GPIO_Pin_12 | GPIO_Pin_13 | GPIO_Pin_14 | GPIO_Pin_15)\n  #define KEYS_GPIOC_PINS               (GPIO_Pin_0 | GPIO_Pin_1 | GPIO_Pin_4 | GPIO_Pin_13)\n  #define KEYS_GPIOD_PINS               (GPIO_Pin_3 | GPIO_Pin_7 | GPIO_Pin_11 | GPIO_Pin_13)\n  #define KEYS_GPIOE_PINS               (GPIO_Pin_3)\n  #define KEYS_GPIOG_PINS               (KEYS_GPIO_PIN_UP | SWITCHES_GPIO_PIN_D_L | SWITCHES_GPIO_PIN_G_H | SWITCHES_GPIO_PIN_G_L | SWITCHES_GPIO_PIN_H | TRIMS_GPIO_PIN_RVD)\n  #define KEYS_GPIOH_PINS               (GPIO_Pin_9 | GPIO_Pin_12 | SWITCHES_GPIO_PIN_E_H | SWITCHES_GPIO_PIN_F | ROTARY_ENCODER_GPIO_PIN_A | ROTARY_ENCODER_GPIO_PIN_B)\n  #define KEYS_GPIOI_PINS               (KEYS_GPIO_PIN_PGDN | KEYS_GPIO_PIN_LEFT | KEYS_GPIO_PIN_DOWN | SWITCHES_GPIO_PIN_A_L | GPIO_Pin_4)\n  #define KEYS_GPIOJ_PINS               (SWITCHES_GPIO_PIN_D_H | TRIMS_GPIO_PIN_RVU | TRIMS_GPIO_PIN_LVD | TRIMS_GPIO_PIN_LVU | TRIMS_GPIO_PIN_RSD)\n#elif defined(PCBX10)\n  #define KEYS_GPIOB_PINS               (GPIO_Pin_12 | GPIO_Pin_15 | GPIO_Pin_14 | GPIO_Pin_13 | GPIO_Pin_8 | GPIO_Pin_9)\n  #define KEYS_GPIOD_PINS               (GPIO_Pin_11 | GPIO_Pin_3 | GPIO_Pin_7 | GPIO_Pin_13)\n  #define KEYS_GPIOE_PINS               (GPIO_Pin_3)\n  #define KEYS_GPIOG_PINS               (SWITCHES_GPIO_PIN_D_L | SWITCHES_GPIO_PIN_G_H | SWITCHES_GPIO_PIN_G_L | SWITCHES_GPIO_PIN_H | TRIMS_GPIO_PIN_LVD)\n  #define KEYS_GPIOH_PINS               (GPIO_Pin_3 | GPIO_Pin_4 | GPIO_Pin_9 | GPIO_Pin_10 | GPIO_Pin_11 | GPIO_Pin_12 | GPIO_Pin_14 | GPIO_Pin_15)\n  #define KEYS_GPIOI_PINS               (GPIO_Pin_4 | GPIO_Pin_5 | GPIO_Pin_6 | GPIO_Pin_7 | GPIO_Pin_8 | GPIO_Pin_11 | GPIO_Pin_15)\n  #define KEYS_GPIOJ_PINS               (SWITCHES_GPIO_PIN_D_H | TRIMS_GPIO_PIN_LVU | TRIMS_GPIO_PIN_RVD | TRIMS_GPIO_PIN_RVU | GPIO_Pin_8)\n#endif\n\n// ADC\n#if defined(PCBX12S)\n  #define ADC_RCC_AHB1Periph            (RCC_AHB1Periph_GPIOE | RCC_AHB1Periph_GPIOF | RCC_AHB1Periph_DMA2)\n  #define ADC_RCC_APB1Periph            0\n  #define ADC_RCC_APB2Periph            (RCC_APB2Periph_SPI4 | RCC_APB2Periph_ADC1 | RCC_APB2Periph_ADC3)\n  #define ADC_SPI                       SPI4\n  #define ADC_GPIO_AF                   GPIO_AF_SPI4\n  #define ADC_SPI_GPIO                  GPIOE\n  #define ADC_SPI_PIN_SCK               GPIO_Pin_2 // PE.02\n  #define ADC_SPI_PIN_CS                GPIO_Pin_4 // PE.04\n  #define ADC_SPI_PIN_MOSI              GPIO_Pin_6 // PE.06\n  #define ADC_SPI_PIN_MISO              GPIO_Pin_5 // PE.05\n  #define ADC_SPI_PinSource_SCK         GPIO_PinSource2\n  #define ADC_SPI_PinSource_MISO        GPIO_PinSource5\n  #define ADC_SPI_PinSource_MOSI        GPIO_PinSource6\n  #define ADC_GPIO_PIN_MOUSE1           GPIO_Pin_8 // PF.08 ADC3_IN6 J5 MOUSE_X\n  #define ADC_GPIO_PIN_MOUSE2           GPIO_Pin_9 // PF.09 ADC3_IN7 J6 MOUSE_Y\n  #define ADC_GPIO_MOUSE                GPIOF\n  #define ADC_CHANNEL_MOUSE1            6\n  #define ADC_CHANNEL_MOUSE2            7\n  #define ADC_DMA                       DMA2\n  #define ADC_DMA_Stream                DMA2_Stream0\n  #define ADC_SAMPTIME                  3\n  #define ADC_VREF_PREC2                300\n#elif defined(PCBX10)\n  #define ADC_RCC_AHB1Periph            (RCC_AHB1Periph_GPIOA | RCC_AHB1Periph_GPIOC | RCC_AHB1Periph_GPIOF | RCC_AHB1Periph_DMA2)\n  #define ADC_RCC_APB1Periph            (RCC_APB1Periph_TIM5)\n  #define ADC_RCC_APB2Periph            (RCC_APB2Periph_ADC1 | RCC_APB2Periph_ADC3)\n  #define ADC_GPIO_PIN_STICK_LH         GPIO_Pin_0      // PA.00\n  #define ADC_GPIO_PIN_STICK_LV         GPIO_Pin_1      // PA.01\n  #define ADC_GPIO_PIN_STICK_RH         GPIO_Pin_2      // PA.02\n  #define ADC_GPIO_PIN_STICK_RV         GPIO_Pin_3      // PA.03\n  #define ADC_GPIO_PIN_POT1             GPIO_Pin_0      // PC.00\n  #define ADC_GPIO_PIN_POT2             GPIO_Pin_1      // PC.01\n  #define ADC_GPIO_PIN_POT3             GPIO_Pin_2      // PC.02\n  #define ADC_GPIO_PIN_SLIDER1          GPIO_Pin_6      // PF.06\n  #define ADC_GPIO_PIN_SLIDER2          GPIO_Pin_3      // PC.03\n  #define ADC_GPIO_PIN_BATT             GPIO_Pin_7      // PF.07\n  #define ADC_GPIO_PIN_EXT1             GPIO_Pin_8      // PF.08\n  #define ADC_GPIO_PIN_EXT2             GPIO_Pin_9      // PF.09\n  #define PWM_TIMER                     TIM5\n  #define PWM_GPIO                      GPIOA\n  #define PWM_GPIO_AF                   GPIO_AF_TIM5\n  #define PWM_IRQHandler                TIM5_IRQHandler\n  #define PWM_IRQn                      TIM5_IRQn\n  #define PWM_GPIOA_PINS                (GPIO_Pin_0 | GPIO_Pin_1 | GPIO_Pin_2 | GPIO_Pin_3)\n  #define ADC_GPIOA_PINS                (STICKS_PWM_ENABLED() ? 0 : (GPIO_Pin_0 | GPIO_Pin_1 | GPIO_Pin_2 | GPIO_Pin_3))\n  #define ADC_GPIOC_PINS                (GPIO_Pin_0 | GPIO_Pin_1 | GPIO_Pin_2 | GPIO_Pin_3)\n  #define ADC_GPIOF_PINS                (GPIO_Pin_6 | GPIO_Pin_7 | GPIO_Pin_8 | GPIO_Pin_9)\n  #define ADC_CHANNEL_STICK_LH          ADC_Channel_0   // ADC3_IN0\n  #define ADC_CHANNEL_STICK_LV          ADC_Channel_1   // ADC3_IN1\n  #define ADC_CHANNEL_STICK_RH          ADC_Channel_2   // ADC3_IN2\n  #define ADC_CHANNEL_STICK_RV          ADC_Channel_3   // ADC3_IN3\n  #define ADC_CHANNEL_POT1              ADC_Channel_10  // ADC3_IN10\n  #define ADC_CHANNEL_POT2              ADC_Channel_11  // ADC3_IN11\n  #define ADC_CHANNEL_POT3              ADC_Channel_12  // ADC3_IN12\n  #define ADC_CHANNEL_SLIDER1           ADC_Channel_4   // ADC3_IN4\n  #define ADC_CHANNEL_SLIDER2           ADC_Channel_13  // ADC3_IN13\n  #define ADC_CHANNEL_BATT              ADC_Channel_5   // ADC3_IN5\n  #define ADC_CHANNEL_EXT1              ADC_Channel_6   // ADC3_IN6\n  #define ADC_CHANNEL_EXT2              ADC_Channel_7   // ADC3_IN7\n  #define ADC_MAIN                      ADC3\n  #define ADC_SAMPTIME                  3\n  #define ADC_DMA                       DMA2\n  #define ADC_DMA_SxCR_CHSEL            DMA_SxCR_CHSEL_1\n  #define ADC_DMA_Stream                DMA2_Stream0\n  #define ADC_SET_DMA_FLAGS()           ADC_DMA->LIFCR = (DMA_LIFCR_CTCIF0 | DMA_LIFCR_CHTIF0 | DMA_LIFCR_CTEIF0 | DMA_LIFCR_CDMEIF0 | DMA_LIFCR_CFEIF0)\n  #define ADC_TRANSFER_COMPLETE()       (ADC_DMA->LISR & DMA_LISR_TCIF0)\n#if defined(RADIO_T16)\n  #define ADC_VREF_PREC2                300\n#else\n  #define ADC_VREF_PREC2                250\n#endif\n#endif\n\n// Power\n#define PWR_RCC_AHB1Periph              RCC_AHB1Periph_GPIOJ\n#define PWR_ON_GPIO                     GPIOJ\n#define PWR_ON_GPIO_PIN                 GPIO_Pin_1  // PJ.01\n#define PWR_SWITCH_GPIO                 GPIOJ\n#define PWR_SWITCH_GPIO_PIN             GPIO_Pin_0  // PJ.00\n\n// S.Port update connector\n#define SPORT_MAX_BAUDRATE              250000 // < 400000\n#if defined(PCBX10) && !defined(RADIO_T16)\n  #define SPORT_UPDATE_RCC_AHB1Periph   RCC_AHB1Periph_GPIOH\n  #define SPORT_UPDATE_PWR_GPIO         GPIOH\n  #define SPORT_UPDATE_PWR_GPIO_PIN     GPIO_Pin_13  // PH.13\n  #define HAS_SPORT_UPDATE_CONNECTOR()  true\n#else\n  #define SPORT_UPDATE_RCC_AHB1Periph   0\n  #define HAS_SPORT_UPDATE_CONNECTOR()  false\n#endif\n\n// PCBREV\n#if defined(PCBX10)\n#define PCBREV_RCC_AHB1Periph           RCC_AHB1Periph_GPIOH\n#define PCBREV_GPIO_PIN                 (GPIO_Pin_7 | GPIO_Pin_8)\n#define PCBREV_GPIO                     GPIOH\n#define PCBREV_VALUE()                  (GPIO_ReadInputDataBit(PCBREV_GPIO, GPIO_Pin_7) + (GPIO_ReadInputDataBit(PCBREV_GPIO, GPIO_Pin_8) << 1))\n#else\n#define PCBREV_RCC_AHB1Periph           RCC_AHB1Periph_GPIOI\n#define PCBREV_GPIO                     GPIOI\n#define PCBREV_GPIO_PIN                 GPIO_Pin_11  // PI.11\n#define PCBREV_VALUE()                  GPIO_ReadInputDataBit(PCBREV_GPIO, PCBREV_GPIO_PIN)\n#endif\n\n// Led\n#define STATUS_LEDS\n#if defined(PCBX12S)\n  #define LED_RCC_AHB1Periph            RCC_AHB1Periph_GPIOI\n  #define LED_GPIO                      GPIOI\n  #define LED_GPIO_PIN                  GPIO_Pin_5  // PI.05\n#elif defined(PCBX10)\n  #define LED_RCC_AHB1Periph            RCC_AHB1Periph_GPIOE\n  #define LED_GPIO                      GPIOE\n  #define LED_RED_GPIO_PIN              GPIO_Pin_2\n  #define LED_GREEN_GPIO_PIN            GPIO_Pin_4\n  #define LED_BLUE_GPIO_PIN             GPIO_Pin_5\n  #define LED_GPIO_PIN                  (LED_RED_GPIO_PIN | LED_GREEN_GPIO_PIN | LED_BLUE_GPIO_PIN)\n#endif\n\n// Serial Port (DEBUG)\n#if defined(PCBX12S)\n#define AUX_SERIAL_RCC_AHB1Periph           (RCC_AHB1Periph_GPIOB | RCC_AHB1Periph_DMA1)\n#define AUX_SERIAL_RCC_APB1Periph           RCC_APB1Periph_USART3\n#define AUX_SERIAL_GPIO                     GPIOB\n#define AUX_SERIAL_GPIO_PIN_TX              GPIO_Pin_10 // PB.10\n#define AUX_SERIAL_GPIO_PIN_RX              GPIO_Pin_11 // PB.11\n#define AUX_SERIAL_GPIO_PinSource_TX        GPIO_PinSource10\n#define AUX_SERIAL_GPIO_PinSource_RX        GPIO_PinSource11\n#define AUX_SERIAL_GPIO_AF                  GPIO_AF_USART3\n#define AUX_SERIAL_USART                    USART3\n#define AUX_SERIAL_USART_IRQHandler         USART3_IRQHandler\n#define AUX_SERIAL_USART_IRQn               USART3_IRQn\n#define AUX_SERIAL_DMA_Stream_RX            DMA1_Stream1\n#define AUX_SERIAL_DMA_Channel_RX           DMA_Channel_4\n#else\n#define AUX_SERIAL_RCC_AHB1Periph           0\n#define AUX_SERIAL_RCC_APB1Periph           0\n#endif\n\n// Telemetry\n#define TELEMETRY_RCC_AHB1Periph        (RCC_AHB1Periph_GPIOD | RCC_AHB1Periph_DMA1)\n#define TELEMETRY_RCC_APB1Periph        RCC_APB1Periph_USART2\n#define TELEMETRY_RCC_APB2Periph        RCC_APB2Periph_TIM10\n#define TELEMETRY_DIR_GPIO              GPIOD\n#define TELEMETRY_DIR_GPIO_PIN          GPIO_Pin_4  // PD.04\n#define TELEMETRY_GPIO                  GPIOD\n#define TELEMETRY_TX_GPIO_PIN           GPIO_Pin_5  // PD.05\n#define TELEMETRY_RX_GPIO_PIN           GPIO_Pin_6  // PD.06\n#define TELEMETRY_GPIO_PinSource_TX     GPIO_PinSource5\n#define TELEMETRY_GPIO_PinSource_RX     GPIO_PinSource6\n#define TELEMETRY_GPIO_AF               GPIO_AF_USART2\n#define TELEMETRY_USART                 USART2\n#define TELEMETRY_EXTI_PortSource       EXTI_PortSourceGPIOD\n#define TELEMETRY_EXTI_PinSource        EXTI_PinSource6\n#define TELEMETRY_EXTI_LINE             EXTI_Line6\n#define TELEMETRY_EXTI_IRQn             EXTI9_5_IRQn\n#define TELEMETRY_EXTI_IRQHandler       EXTI9_5_IRQHandler\n#define TELEMETRY_EXTI_TRIGGER          EXTI_Trigger_Rising\n#define TELEMETRY_TIMER                 TIM11\n#define TELEMETRY_TIMER_IRQn            TIM1_TRG_COM_TIM11_IRQn\n#define TELEMETRY_TIMER_IRQHandler      TIM1_TRG_COM_TIM11_IRQHandler\n#if defined(PCBX12S)\n#define TELEMETRY_DMA_Stream_RX         DMA1_Stream5\n#define TELEMETRY_DMA_Channel_RX        DMA_Channel_4\n#endif\n#define TELEMETRY_DMA_Stream_TX         DMA1_Stream6\n#define TELEMETRY_DMA_Channel_TX        DMA_Channel_4\n#define TELEMETRY_DMA_TX_Stream_IRQ     DMA1_Stream6_IRQn\n#define TELEMETRY_DMA_TX_IRQHandler     DMA1_Stream6_IRQHandler\n#define TELEMETRY_DMA_TX_FLAG_TC        DMA_IT_TCIF6\n#define TELEMETRY_USART_IRQHandler      USART2_IRQHandler\n#define TELEMETRY_USART_IRQn            USART2_IRQn\n\n// USB\n#define USB_RCC_AHB1Periph_GPIO         RCC_AHB1Periph_GPIOA\n#define USB_GPIO                        GPIOA\n#define USB_GPIO_PIN_VBUS               GPIO_Pin_9  // PA.09\n#define USB_GPIO_PIN_DM                 GPIO_Pin_11 // PA.11\n#define USB_GPIO_PIN_DP                 GPIO_Pin_12 // PA.12\n#define USB_GPIO_PinSource_DM           GPIO_PinSource11\n#define USB_GPIO_PinSource_DP           GPIO_PinSource12\n#define USB_GPIO_AF                     GPIO_AF_OTG1_FS\n\n// LCD\n#define LCD_RCC_AHB1Periph              (RCC_AHB1Periph_GPIOA | RCC_AHB1Periph_GPIOF | RCC_AHB1Periph_GPIOI | RCC_AHB1Periph_GPIOJ | RCC_AHB1Periph_GPIOK | RCC_AHB1Periph_DMA2D)\n#define LCD_RCC_APB1Periph              0\n#define LCD_RCC_APB2Periph              RCC_APB2Periph_LTDC\n#if defined(PCBX12S)\n  #define LCD_GPIO_NRST                 GPIOF\n  #define LCD_GPIO_PIN_NRST             GPIO_Pin_10 // PF.10\n#elif defined(PCBX10)\n  #define LCD_GPIO_NRST                 GPIOI\n  #define LCD_GPIO_PIN_NRST             GPIO_Pin_10 // PI.10\n#endif\n#define LTDC_IRQ_PRIO                   4\n#define DMA_SCREEN_IRQ_PRIO             6\n\n// Backlight\n#if defined(PCBX12S)\n  #define BACKLIGHT_RCC_AHB1Periph             RCC_AHB1Periph_GPIOA\n  #define BACKLIGHT_GPIO                       GPIOA\n  #if PCBREV >= 13\n    #define BACKLIGHT_TIMER                    TIM5\n    #define BACKLIGHT_GPIO_PIN                 GPIO_Pin_3  // PA.03\n    #define BACKLIGHT_GPIO_PinSource           GPIO_PinSource3\n    #define BACKLIGHT_RCC_APB1Periph           RCC_APB1Periph_TIM5\n    #define BACKLIGHT_RCC_APB2Periph           0\n    #define BACKLIGHT_GPIO_AF                  GPIO_AF_TIM5\n    #define BACKLIGHT_TIMER_FREQ               (PERI1_FREQUENCY * TIMER_MULT_APB1)\n  #else\n    #define BACKLIGHT_TIMER                    TIM8\n    #define BACKLIGHT_GPIO_PIN                 GPIO_Pin_5  // PA.05\n    #define BACKLIGHT_GPIO_PinSource           GPIO_PinSource5\n    #define BACKLIGHT_RCC_APB1Periph           0\n    #define BACKLIGHT_RCC_APB2Periph           RCC_APB2Periph_TIM8\n    #define BACKLIGHT_GPIO_AF                  GPIO_AF_TIM8\n    #define BACKLIGHT_TIMER_FREQ               (PERI2_FREQUENCY * TIMER_MULT_APB2)\n  #endif\n#elif defined(PCBX10)\n  #define BACKLIGHT_RCC_AHB1Periph             RCC_AHB1Periph_GPIOB\n  #define BACKLIGHT_GPIO                       GPIOB\n  #define BACKLIGHT_TIMER                      TIM8\n  #define BACKLIGHT_GPIO_PIN                   GPIO_Pin_1  // PB.01\n  #define BACKLIGHT_GPIO_PinSource             GPIO_PinSource1\n  #define BACKLIGHT_RCC_APB1Periph             0\n  #define BACKLIGHT_RCC_APB2Periph             RCC_APB2Periph_TIM8\n  #define BACKLIGHT_GPIO_AF                    GPIO_AF_TIM8\n  #define BACKLIGHT_TIMER_FREQ                 (PERI2_FREQUENCY * TIMER_MULT_APB2)\n#endif\n\n// SD\n#define SD_RCC_AHB1Periph               (RCC_AHB1Periph_GPIOC | RCC_AHB1Periph_GPIOD | RCC_AHB1Periph_DMA2)\n#define SD_RCC_APB1Periph               0\n#define SD_PRESENT_GPIO                 GPIOC\n#define SD_PRESENT_GPIO_PIN             GPIO_Pin_5  // PC.05\n#define SD_SDIO_DMA_STREAM              DMA2_Stream3\n#define SD_SDIO_DMA_CHANNEL             DMA_Channel_4\n#define SD_SDIO_DMA_FLAG_FEIF           DMA_FLAG_FEIF3\n#define SD_SDIO_DMA_FLAG_DMEIF          DMA_FLAG_DMEIF3\n#define SD_SDIO_DMA_FLAG_TEIF           DMA_FLAG_TEIF3\n#define SD_SDIO_DMA_FLAG_HTIF           DMA_FLAG_HTIF3\n#define SD_SDIO_DMA_FLAG_TCIF           DMA_FLAG_TCIF3\n#define SD_SDIO_DMA_IRQn                DMA2_Stream3_IRQn\n#define SD_SDIO_DMA_IRQHANDLER          DMA2_Stream3_IRQHandler\n#define SD_SDIO_FIFO_ADDRESS            ((uint32_t)0x40012C80)\n#define SD_SDIO_CLK_DIV(fq)             ((48000000 / (fq)) - 2)\n#define SD_SDIO_INIT_CLK_DIV            SD_SDIO_CLK_DIV(400000)\n#define SD_SDIO_TRANSFER_CLK_DIV        SD_SDIO_CLK_DIV(24000000)\n\n// EEPROM\n#if defined(PCBX12S) && PCBREV >= 13\n  #define EEPROM_RCC_AHB1Periph           RCC_AHB1Periph_GPIOA\n  #define EEPROM_RCC_APB1Periph           RCC_APB1Periph_SPI1\n  #define EEPROM_SPI_CS_GPIO              GPIOA\n  #define EEPROM_SPI_CS_GPIO_PIN          GPIO_Pin_15 // PA.15\n  #define EEPROM_SPI_SCK_GPIO             GPIOA\n  #define EEPROM_SPI_SCK_GPIO_PIN         GPIO_Pin_5  // PA.05\n  #define EEPROM_SPI_SCK_GPIO_PinSource   GPIO_PinSource5\n  #define EEPROM_SPI_MISO_GPIO            GPIOA\n  #define EEPROM_SPI_MISO_GPIO_PIN        GPIO_Pin_6  // PA.06\n  #define EEPROM_SPI_MISO_GPIO_PinSource  GPIO_PinSource6\n  #define EEPROM_SPI_MOSI_GPIO            GPIOA\n  #define EEPROM_SPI_MOSI_GPIO_PIN        GPIO_Pin_7  // PA.07\n  #define EEPROM_SPI_MOSI_GPIO_PinSource  GPIO_PinSource7\n#elif defined(PCBX10)\n  #define EEPROM_RCC_AHB1Periph           RCC_AHB1Periph_GPIOI\n  #define EEPROM_RCC_APB1Periph           RCC_APB1Periph_SPI2\n  #define EEPROM_SPI_CS_GPIO              GPIOI\n  #define EEPROM_SPI_CS_GPIO_PIN          GPIO_Pin_0  // PI.00\n  #define EEPROM_SPI_SCK_GPIO             GPIOI\n  #define EEPROM_SPI_SCK_GPIO_PIN         GPIO_Pin_1  // PI.01\n  #define EEPROM_SPI_SCK_GPIO_PinSource   GPIO_PinSource1\n  #define EEPROM_SPI_MISO_GPIO            GPIOI\n  #define EEPROM_SPI_MISO_GPIO_PIN        GPIO_Pin_2  // PI.02\n  #define EEPROM_SPI_MISO_GPIO_PinSource  GPIO_PinSource2\n  #define EEPROM_SPI_MOSI_GPIO            GPIOI\n  #define EEPROM_SPI_MOSI_GPIO_PIN        GPIO_Pin_3  // PI.03\n  #define EEPROM_SPI_MOSI_GPIO_PinSource  GPIO_PinSource3\n#endif\n\n// Audio\n#if defined(PCBX12S)\n  #define AUDIO_RCC_AHB1Periph          (RCC_AHB1Periph_GPIOI | RCC_AHB1Periph_GPIOH)\n  #define AUDIO_RCC_APB1Periph          RCC_APB1Periph_SPI2\n  #define AUDIO_SHUTDOWN_GPIO           GPIOI\n  #define AUDIO_SHUTDOWN_GPIO_PIN       GPIO_Pin_9  // PI.09\n  #define AUDIO_XDCS_GPIO               GPIOI\n  #define AUDIO_XDCS_GPIO_PIN           GPIO_Pin_0  // PI.00\n  #define AUDIO_CS_GPIO                 GPIOH\n  #define AUDIO_CS_GPIO_PIN             GPIO_Pin_13 // PH.13\n  #define AUDIO_DREQ_GPIO               GPIOH\n  #define AUDIO_DREQ_GPIO_PIN           GPIO_Pin_14 // PH.14\n  #define AUDIO_RST_GPIO                GPIOH\n  #define AUDIO_RST_GPIO_PIN            GPIO_Pin_15 // PH.15\n  #define AUDIO_SPI                     SPI2\n  #define AUDIO_SPI_GPIO_AF             GPIO_AF_SPI2\n  #define AUDIO_SPI_SCK_GPIO            GPIOI\n  #define AUDIO_SPI_SCK_GPIO_PIN        GPIO_Pin_1  // PI.01\n  #define AUDIO_SPI_SCK_GPIO_PinSource  GPIO_PinSource1\n  #define AUDIO_SPI_MISO_GPIO           GPIOI\n  #define AUDIO_SPI_MISO_GPIO_PIN       GPIO_Pin_2  // PI.02\n  #define AUDIO_SPI_MISO_GPIO_PinSource GPIO_PinSource2\n  #define AUDIO_SPI_MOSI_GPIO           GPIOI\n  #define AUDIO_SPI_MOSI_GPIO_PIN       GPIO_Pin_3  // PI.03\n  #define AUDIO_SPI_MOSI_GPIO_PinSource GPIO_PinSource3\n#elif defined (PCBX10)\n  #define AUDIO_RCC_APB1Periph          (RCC_APB1Periph_TIM6 | RCC_APB1Periph_DAC)\n  #define AUDIO_RCC_AHB1Periph          (RCC_AHB1Periph_GPIOA | RCC_AHB1Periph_DMA1)\n  #define AUDIO_MUTE_GPIO               GPIOA\n  #define AUDIO_MUTE_GPIO_PIN           GPIO_Pin_7  // PA.07\n  #define AUDIO_OUTPUT_GPIO             GPIOA\n  #define AUDIO_OUTPUT_GPIO_PIN         GPIO_Pin_4  // PA.04\n  #define AUDIO_GPIO_AF                 GPIO_AF_DAC1\n  #define AUDIO_GPIO_PinSource          GPIO_PinSource4\n  #define AUDIO_DMA_Stream              DMA1_Stream5\n  #define AUDIO_DMA_Stream_IRQn         DMA1_Stream5_IRQn\n  #define AUDIO_TIM_IRQn                TIM6_DAC_IRQn\n  #define AUDIO_TIM_IRQHandler          TIM6_DAC_IRQHandler\n  #define AUDIO_DMA_Stream_IRQHandler   DMA1_Stream5_IRQHandler\n  #define AUDIO_TIMER                   TIM6\n  #define AUDIO_DMA                     DMA1\n#endif\n\n#if defined(RADIO_T16)\n  #define AUDIO_UNMUTE_DELAY            120  // ms\n  #define AUDIO_MUTE_DELAY              500  // ms\n#endif\n\n// I2C Bus\n#define I2C_RCC_AHB1Periph              RCC_AHB1Periph_GPIOB\n#define I2C_RCC_APB1Periph              RCC_APB1Periph_I2C1\n#define I2C                             I2C1\n#define I2C_GPIO                        GPIOB\n#define I2C_SCL_GPIO_PIN                GPIO_Pin_8  // PB.08\n#define I2C_SDA_GPIO_PIN                GPIO_Pin_9  // PB.09\n#define I2C_GPIO_AF                     GPIO_AF_I2C1\n#define I2C_SCL_GPIO_PinSource          GPIO_PinSource8\n#define I2C_SDA_GPIO_PinSource          GPIO_PinSource9\n#define I2C_SPEED                       400000\n\n// Haptic\n#define HAPTIC_PWM\n#if defined(PCBX12S)\n  #define HAPTIC_RCC_AHB1Periph         RCC_AHB1Periph_GPIOA\n  #define HAPTIC_RCC_APB2Periph         RCC_APB2ENR_TIM9EN\n  #define HAPTIC_GPIO                   GPIOA\n  #define HAPTIC_GPIO_PIN               GPIO_Pin_2\n  #define HAPTIC_GPIO_TIMER             TIM9\n  #define HAPTIC_GPIO_AF                GPIO_AF_TIM9\n  #define HAPTIC_GPIO_PinSource         GPIO_PinSource2\n  #define HAPTIC_TIMER_OUTPUT_ENABLE    TIM_CCER_CC1E\n  #define HAPTIC_TIMER_MODE             TIM_CCMR1_OC1M_1 | TIM_CCMR1_OC1M_2\n  #define HAPTIC_TIMER_COMPARE_VALUE    HAPTIC_GPIO_TIMER->CCR1\n#elif defined(PCBX10)\n  #define HAPTIC_RCC_AHB1Periph         RCC_AHB1Periph_GPIOE\n  #define HAPTIC_RCC_APB2Periph         RCC_APB2ENR_TIM9EN\n  #define HAPTIC_GPIO                   GPIOE\n  #define HAPTIC_GPIO_PIN               GPIO_Pin_6  // PE.06\n  #define HAPTIC_GPIO_TIMER             TIM9\n  #define HAPTIC_GPIO_AF                GPIO_AF_TIM9\n  #define HAPTIC_GPIO_PinSource         GPIO_PinSource6\n  #define HAPTIC_TIMER_OUTPUT_ENABLE    TIM_CCER_CC2E\n  #define HAPTIC_TIMER_MODE             TIM_CCMR1_OC2M_1 | TIM_CCMR1_OC2M_2\n  #define HAPTIC_TIMER_COMPARE_VALUE    HAPTIC_GPIO_TIMER->CCR2\n#endif\n\n#if !defined(RADIO_T16)\n#define EXTERNAL_ANTENNA\n#endif\n#define INTMODULE_RCC_AHB1Periph        (RCC_AHB1Periph_GPIOA | RCC_AHB1Periph_GPIOB | RCC_AHB1Periph_DMA2)\n#define INTMODULE_PWR_GPIO              GPIOA\n#define INTMODULE_PWR_GPIO_PIN          GPIO_Pin_8  // PA.08\n#define INTMODULE_GPIO                  GPIOB\n#define INTMODULE_TX_GPIO_PIN           GPIO_Pin_6  // PB.06\n#define INTMODULE_RX_GPIO_PIN           GPIO_Pin_7  // PB.07\n#define INTMODULE_GPIO_PinSource_TX     GPIO_PinSource6\n#define INTMODULE_GPIO_PinSource_RX     GPIO_PinSource7\n#define INTMODULE_USART                 USART1\n#define INTMODULE_GPIO_AF               GPIO_AF_USART1\n#define INTMODULE_USART_IRQn            USART1_IRQn\n#define INTMODULE_USART_IRQHandler      USART1_IRQHandler\n#define INTMODULE_DMA_STREAM            DMA2_Stream7\n#define INTMODULE_DMA_STREAM_IRQ        DMA2_Stream7_IRQn\n#define INTMODULE_DMA_STREAM_IRQHandler DMA2_Stream7_IRQHandler\n#define INTMODULE_DMA_FLAG_TC           DMA_IT_TCIF7\n#define INTMODULE_DMA_CHANNEL           DMA_Channel_4\n#if defined(PCBX12S)\n  #define INTMODULE_BOOTCMD_GPIO        GPIOC\n  #define INTMODULE_BOOTCMD_GPIO_PIN    GPIO_Pin_2  // PC.02\n#elif defined(PCBX10)\n  #define INTMODULE_BOOTCMD_GPIO        GPIOI\n  #define INTMODULE_BOOTCMD_GPIO_PIN    GPIO_Pin_9  // PI.09\n#endif\n#if defined(PCBX10) || PCBREV >= 13\n  #define INTMODULE_RCC_APB1Periph      RCC_APB1Periph_TIM2\n  #define INTMODULE_RCC_APB2Periph      RCC_APB2Periph_USART1\n  #define INTMODULE_TIMER               TIM2\n  #define INTMODULE_TIMER_IRQn          TIM2_IRQn\n  #define INTMODULE_TIMER_IRQHandler    TIM2_IRQHandler\n  #define INTMODULE_TIMER_FREQ          (PERI1_FREQUENCY * TIMER_MULT_APB1)\n#else\n  #define INTMODULE_RCC_APB1Periph      0\n  #define INTMODULE_RCC_APB2Periph      (RCC_APB2Periph_TIM1 | RCC_APB2Periph_USART1)\n  #define INTMODULE_TIMER               TIM1\n  #define INTMODULE_TIMER_IRQn          TIM1_CC_IRQn\n  #define INTMODULE_TIMER_IRQHandler    TIM1_CC_IRQHandler\n  #define INTMODULE_TIMER_FREQ          (PERI2_FREQUENCY * TIMER_MULT_APB2)\n#endif\n\n// External Module\n#define EXTMODULE_PWR_GPIO                 GPIOB\n#define EXTMODULE_PWR_GPIO_PIN             GPIO_Pin_3  // PB.03\n#if defined(PCBX10) && defined(PCBREV_EXPRESS)\n  #define EXTMODULE_RCC_AHB1Periph         (RCC_AHB1Periph_GPIOB | RCC_AHB1Periph_DMA1)\n  #define EXTMODULE_RCC_APB1Periph         (RCC_APB1Periph_TIM2 | RCC_APB1Periph_USART3)\n  #define EXTMODULE_RCC_APB2Periph         0\n  #define EXTMODULE_TX_GPIO                GPIOB\n  #define EXTMODULE_USART_GPIO             EXTMODULE_TX_GPIO\n  #define EXTMODULE_TX_GPIO_PIN            GPIO_Pin_10 // PB.10 (TIM2_CH3)\n  #define EXTMODULE_TX_GPIO_PinSource      GPIO_PinSource10\n  #define EXTMODULE_RX_GPIO_PIN            GPIO_Pin_11 // PB.11\n  #define EXTMODULE_RX_GPIO_PinSource      GPIO_PinSource11\n  #define EXTMODULE_TIMER_TX_GPIO_AF       GPIO_AF_TIM2\n  #define EXTMODULE_TIMER                  TIM2\n  #define EXTMODULE_TIMER_32BITS\n  #define EXTMODULE_TIMER_DMA_SIZE         (DMA_SxCR_PSIZE_1 | DMA_SxCR_MSIZE_1)\n  #define EXTMODULE_TIMER_FREQ             (PERI1_FREQUENCY * TIMER_MULT_APB1)\n  #define EXTMODULE_TIMER_CC_IRQn          TIM2_IRQn\n  #define EXTMODULE_TIMER_IRQHandler       TIM2_IRQHandler\n  #define EXTMODULE_TIMER_DMA_CHANNEL      DMA_Channel_3\n  #define EXTMODULE_TIMER_DMA_STREAM       DMA1_Stream1\n  #define EXTMODULE_TIMER_DMA_FLAG_TC      DMA_IT_TCIF1\n  #define EXTMODULE_TIMER_DMA_STREAM_IRQn  DMA1_Stream1_IRQn\n  #define EXTMODULE_TIMER_DMA_IRQHandler   DMA1_Stream1_IRQHandler\n  #define EXTMODULE_USART_GPIO_AF          GPIO_AF_USART3\n  #define EXTMODULE_USART                  USART3\n  #define EXTMODULE_USART_IRQn             USART3_IRQn\n  #define EXTMODULE_USART_IRQHandler       USART3_IRQHandler\n  #define EXTMODULE_USART_TX_DMA_CHANNEL   DMA_Channel_4\n  #define EXTMODULE_USART_TX_DMA_STREAM    DMA1_Stream3\n  #define EXTMODULE_USART_RX_DMA_CHANNEL   DMA_Channel_4\n  #define EXTMODULE_USART_RX_DMA_STREAM    DMA1_Stream1\n#elif defined(PCBX10) || PCBREV >= 13\n  #define EXTMODULE_RCC_AHB1Periph         (RCC_AHB1Periph_GPIOA | RCC_AHB1Periph_GPIOB | RCC_AHB1Periph_DMA2)\n  #define EXTMODULE_RCC_APB1Periph         0\n  #define EXTMODULE_RCC_APB2Periph         RCC_APB2Periph_TIM1\n  #define EXTMODULE_TX_GPIO                GPIOA\n  #define EXTMODULE_TX_GPIO_PIN            GPIO_Pin_10 // PA.10 (TIM1_CH3)\n  #define EXTMODULE_TX_GPIO_PinSource      GPIO_PinSource10\n  #define EXTMODULE_TIMER_TX_GPIO_AF       GPIO_AF_TIM1\n  #define EXTMODULE_TIMER                  TIM1\n  #define EXTMODULE_TIMER_DMA_SIZE         (DMA_SxCR_PSIZE_0 | DMA_SxCR_MSIZE_0)\n  #define EXTMODULE_TIMER_CC_IRQn          TIM1_CC_IRQn\n  #define EXTMODULE_TIMER_IRQHandler       TIM1_CC_IRQHandler\n  #define EXTMODULE_TIMER_FREQ             (PERI2_FREQUENCY * TIMER_MULT_APB2)\n  #define EXTMODULE_TIMER_DMA_CHANNEL      DMA_Channel_6\n  #define EXTMODULE_TIMER_DMA_STREAM       DMA2_Stream5\n  #define EXTMODULE_TIMER_DMA_STREAM_IRQn  DMA2_Stream5_IRQn\n  #define EXTMODULE_TIMER_DMA_IRQHandler   DMA2_Stream5_IRQHandler\n  #define EXTMODULE_TIMER_DMA_FLAG_TC      DMA_IT_TCIF5\n#else\n  #define EXTMODULE_RCC_AHB1Periph         (RCC_AHB1Periph_GPIOA | RCC_AHB1Periph_GPIOB | RCC_AHB1Periph_DMA1)\n  #define EXTMODULE_RCC_APB1Periph         RCC_APB1Periph_TIM2\n  #define EXTMODULE_RCC_APB2Periph         0\n  #define EXTMODULE_TX_GPIO                GPIOA\n  #define EXTMODULE_TX_GPIO_PIN            GPIO_Pin_15 // PA.15 (TIM2_CH1)\n  #define EXTMODULE_TX_GPIO_PinSource      GPIO_PinSource15\n  #define EXTMODULE_TIMER_TX_GPIO_AF       GPIO_AF_TIM2\n  #define EXTMODULE_TIMER                  TIM2\n  #define EXTMODULE_TIMER_32BITS\n  #define EXTMODULE_TIMER_DMA_SIZE         (DMA_SxCR_PSIZE_1 | DMA_SxCR_MSIZE_1)\n  #define EXTMODULE_TIMER_CC_IRQn          TIM2_IRQn\n  #define EXTMODULE_TIMER_IRQHandler       TIM2_IRQHandler\n  #define EXTMODULE_TIMER_FREQ             (PERI1_FREQUENCY * TIMER_MULT_APB1)\n  #define EXTMODULE_TIMER_DMA_CHANNEL      DMA_Channel_3\n  #define EXTMODULE_TIMER_DMA_STREAM       DMA1_Stream7\n  #define EXTMODULE_TIMER_DMA_STREAM_IRQn  DMA1_Stream7_IRQn\n  #define EXTMODULE_TIMER_DMA_IRQHandler   DMA1_Stream7_IRQHandler\n  #define EXTMODULE_TIMER_DMA_FLAG_TC      DMA_IT_TCIF7\n#endif\n\n// Heartbeat\n#define INTMODULE_HEARTBEAT\n#define INTMODULE_HEARTBEAT_RCC_AHB1Periph      RCC_AHB1Periph_GPIOD\n#define INTMODULE_HEARTBEAT_GPIO                GPIOD\n#define INTMODULE_HEARTBEAT_GPIO_PIN            GPIO_Pin_12\n#define INTMODULE_HEARTBEAT_EXTI_PortSource     EXTI_PortSourceGPIOD\n#define INTMODULE_HEARTBEAT_EXTI_PinSource      GPIO_PinSource12\n#define INTMODULE_HEARTBEAT_EXTI_LINE           EXTI_Line12\n#define INTMODULE_HEARTBEAT_EXTI_IRQn           EXTI15_10_IRQn\n#define INTMODULE_HEARTBEAT_REUSE_INTERRUPT_ROTARY_ENCODER\n#if defined(PXX2)\n#define INTMODULE_HEARTBEAT_TRIGGER             EXTI_Trigger_Falling\n#else\n#define INTMODULE_HEARTBEAT_TRIGGER             EXTI_Trigger_Rising\n#endif\n\n// Trainer Port\n#define TRAINER_RCC_AHB1Periph          (RCC_AHB1Periph_GPIOB | RCC_AHB1Periph_GPIOC | RCC_AHB1Periph_DMA1)\n#define TRAINER_RCC_APB1Periph          RCC_APB1Periph_TIM3\n#define TRAINER_GPIO                    GPIOC\n#define TRAINER_IN_GPIO_PIN             GPIO_Pin_6  // PC.06\n#define TRAINER_IN_GPIO_PinSource       GPIO_PinSource6\n#define TRAINER_OUT_GPIO_PIN            GPIO_Pin_7  // PC.07\n#define TRAINER_OUT_GPIO_PinSource      GPIO_PinSource7\n#define TRAINER_DETECT_GPIO             GPIOB\n#define TRAINER_DETECT_GPIO_PIN         GPIO_Pin_4  // PB.04\n#define TRAINER_TIMER                   TIM3\n#define TRAINER_TIMER_IRQn              TIM3_IRQn\n#define TRAINER_TIMER_IRQHandler        TIM3_IRQHandler\n#define TRAINER_GPIO_AF                 GPIO_AF_TIM3\n#define TRAINER_DMA                     DMA1\n#define TRAINER_DMA_CHANNEL             DMA_Channel_5\n#define TRAINER_DMA_STREAM              DMA1_Stream2\n#define TRAINER_DMA_IRQn                DMA1_Stream2_IRQn\n#define TRAINER_DMA_IRQHandler          DMA1_Stream2_IRQHandler\n#define TRAINER_DMA_FLAG_TC             DMA_IT_TCIF2\n#define TRAINER_TIMER_FREQ              (PERI1_FREQUENCY * TIMER_MULT_APB1)\n\n// Xms Interrupt\n#define INTERRUPT_xMS_RCC_APB1Periph    RCC_APB1Periph_TIM14\n#define INTERRUPT_xMS_TIMER             TIM14\n#define INTERRUPT_xMS_IRQn              TIM8_TRG_COM_TIM14_IRQn\n#define INTERRUPT_xMS_IRQHandler        TIM8_TRG_COM_TIM14_IRQHandler\n\n// 2MHz Timer\n#define TIMER_2MHz_RCC_APB1Periph       RCC_APB1Periph_TIM7\n#define TIMER_2MHz_TIMER                TIM7\n\n// Bluetooth\n#define STORAGE_BLUETOOTH\n#define BT_RCC_APB2Periph               RCC_APB2Periph_USART6\n#define BT_USART                        USART6\n#define BT_GPIO_AF                      GPIO_AF_USART6\n#define BT_USART_IRQn                   USART6_IRQn\n#define BT_USART_GPIO                   GPIOG\n#define BT_TX_GPIO_PIN                  GPIO_Pin_14 // PG.14\n#define BT_RX_GPIO_PIN                  GPIO_Pin_9  // PG.09\n#define BT_TX_GPIO_PinSource            GPIO_PinSource14\n#define BT_RX_GPIO_PinSource            GPIO_PinSource9\n#define BT_USART_IRQHandler             USART6_IRQHandler\n#if defined(PCBX12S)\n  #if PCBREV >= 13\n    #define BT_RCC_AHB1Periph           (RCC_AHB1Periph_GPIOI | RCC_AHB1Periph_GPIOG)\n    #define BT_EN_GPIO                  GPIOI\n    #define BT_EN_GPIO_PIN              GPIO_Pin_10 // PI.10\n  #else\n    #define BT_RCC_AHB1Periph           (RCC_AHB1Periph_GPIOA | RCC_AHB1Periph_GPIOG)\n    #define BT_EN_GPIO                  GPIOA\n    #define BT_EN_GPIO_PIN              GPIO_Pin_6 // PA.06\n  #endif\n  #define BT_BRTS_GPIO                  GPIOG\n  #define BT_BRTS_GPIO_PIN              GPIO_Pin_10 // PG.10\n  #define BT_BCTS_GPIO                  GPIOG\n  #define BT_BCTS_GPIO_PIN              GPIO_Pin_11 // PG.11\n#elif defined(PCBX10)\n  #define BT_RCC_AHB1Periph             RCC_AHB1Periph_GPIOG\n  #define BT_EN_GPIO                    GPIOG\n  #define BT_EN_GPIO_PIN                GPIO_Pin_10 // PG.10\n#endif\n\n// GPS\n#if defined(PCBX12S)\n  #define GPS_RCC_AHB1Periph            RCC_AHB1Periph_GPIOA\n  #define GPS_RCC_APB1Periph            RCC_APB1Periph_UART4\n  #define GPS_USART                     UART4\n  #define GPS_GPIO_AF                   GPIO_AF_UART4\n  #define GPS_USART_IRQn                UART4_IRQn\n  #define GPS_USART_IRQHandler          UART4_IRQHandler\n  #define GPS_UART_GPIO                 GPIOA\n  #define GPS_TX_GPIO_PIN               GPIO_Pin_0 // PA.00\n  #define GPS_RX_GPIO_PIN               GPIO_Pin_1 // PA.01\n  #define GPS_TX_GPIO_PinSource         GPIO_PinSource0\n  #define GPS_RX_GPIO_PinSource         GPIO_PinSource1\n#else\n  #define GPS_RCC_AHB1Periph            0\n  #define GPS_RCC_APB1Periph            0\n#endif\n\n#endif // _HAL_H_\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- radio/src/targets/horus/hal.h	(revision 82a7223b78b262f6a4c3421414e91babbd73261a)
+++ radio/src/targets/horus/hal.h	(date 1576578830715)
@@ -616,6 +616,7 @@
   #define INTMODULE_BOOTCMD_GPIO        GPIOI
   #define INTMODULE_BOOTCMD_GPIO_PIN    GPIO_Pin_9  // PI.09
 #endif
+#define INIT_INTMODULE_BOOTCMD_PIN() GPIO_ResetBits(INTMODULE_BOOTCMD_GPIO, INTMODULE_BOOTCMD_GPIO_PIN);
 #if defined(PCBX10) || PCBREV >= 13
   #define INTMODULE_RCC_APB1Periph      RCC_APB1Periph_TIM2
   #define INTMODULE_RCC_APB2Periph      RCC_APB2Periph_USART1
@@ -635,6 +636,7 @@
 // External Module
 #define EXTMODULE_PWR_GPIO                 GPIOB
 #define EXTMODULE_PWR_GPIO_PIN             GPIO_Pin_3  // PB.03
+#define EXTERNAL_MODULE_PWR_OFF()          GPIO_ResetBits(EXTMODULE_PWR_GPIO, EXTMODULE_PWR_GPIO_PIN)
 #if defined(PCBX10) && defined(PCBREV_EXPRESS)
   #define EXTMODULE_RCC_AHB1Periph         (RCC_AHB1Periph_GPIOB | RCC_AHB1Periph_DMA1)
   #define EXTMODULE_RCC_APB1Periph         (RCC_APB1Periph_TIM2 | RCC_APB1Periph_USART3)
Index: radio/src/targets/taranis/board.h
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>/*\n * Copyright (C) OpenTX\n *\n * Based on code named\n *   th9x - http://code.google.com/p/th9x\n *   er9x - http://code.google.com/p/er9x\n *   gruvin9x - http://code.google.com/p/gruvin9x\n *\n * License GPLv2: http://www.gnu.org/licenses/gpl-2.0.html\n *\n * This program is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License version 2 as\n * published by the Free Software Foundation.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n */\n\n#ifndef _BOARD_H_\n#define _BOARD_H_\n\n#include <inttypes.h>\n#include \"../definitions.h\"\n#include \"../opentx_constants.h\"\n#include \"board_common.h\"\n#include \"hal.h\"\n\n\n#if defined(ROTARY_ENCODER_NAVIGATION)\n// Rotary Encoder driver\nvoid rotaryEncoderInit();\nvoid rotaryEncoderCheck();\n#endif\n\n#define FLASHSIZE                       0x80000\n#define BOOTLOADER_SIZE                 0x8000\n#define FIRMWARE_ADDRESS                0x08000000\n\n#define LUA_MEM_MAX                     (0)    // max allowed memory usage for complete Lua  (in bytes), 0 means unlimited\n\n#if defined(STM32F4)\n  #define PERI1_FREQUENCY               42000000\n  #define PERI2_FREQUENCY               84000000\n#else\n  #define PERI1_FREQUENCY               30000000\n  #define PERI2_FREQUENCY               60000000\n#endif\n\n#define TIMER_MULT_APB1                 2\n#define TIMER_MULT_APB2                 2\n\nextern uint16_t sessionTimer;\n\n// Board driver\nvoid boardInit();\nvoid boardOff();\n\n// Timers driver\nvoid init2MhzTimer();\nvoid init5msTimer();\n\n// SD driver\n#define BLOCK_SIZE                      512 /* Block Size in Bytes */\n#if !defined(SIMU) || defined(SIMU_DISKIO)\nuint32_t sdIsHC();\nuint32_t sdGetSpeed();\n#define SD_IS_HC()                      (sdIsHC())\n#define SD_GET_SPEED()                  (sdGetSpeed())\n#define SD_GET_FREE_BLOCKNR()           (sdGetFreeSectors())\n#else\n#define SD_IS_HC()                      (0)\n#define SD_GET_SPEED()                  (0)\n#endif\n#define __disk_read                     disk_read\n#define __disk_write                    disk_write\n#if defined(SIMU)\n  #if !defined(SIMU_DISKIO)\n    #define sdInit()\n    #define sdDone()\n  #endif\n  #define sdMount()\n  #define SD_CARD_PRESENT()               true\n#else\nvoid sdInit();\nvoid sdMount();\nvoid sdDone();\nvoid sdPoll10ms();\nuint32_t sdMounted();\n#define SD_CARD_PRESENT()               ((SD_GPIO_PRESENT_GPIO->IDR & SD_GPIO_PRESENT_GPIO_PIN) == 0)\n#endif\n\n// Flash Write driver\n#define FLASH_PAGESIZE 256\nvoid unlockFlash();\nvoid lockFlash();\nvoid flashWrite(uint32_t * address, const uint32_t * buffer);\nuint32_t isFirmwareStart(const uint8_t * buffer);\nuint32_t isBootloaderStart(const uint8_t * buffer);\n\n// Pulses driver\n#define INTERNAL_MODULE_ON()            GPIO_SetBits(INTMODULE_PWR_GPIO, INTMODULE_PWR_GPIO_PIN)\n#if defined(INTMODULE_USART)\n  #define INTERNAL_MODULE_OFF()         intmoduleStop()\n#else\n  #define INTERNAL_MODULE_OFF()         GPIO_ResetBits(INTMODULE_PWR_GPIO, INTMODULE_PWR_GPIO_PIN)\n#endif\n\n#define EXTERNAL_MODULE_ON()            EXTERNAL_MODULE_PWR_ON()\n\n#if defined(EXTMODULE_USART)\n#define EXTERNAL_MODULE_OFF()         extmoduleStop()\n#else\n#define EXTERNAL_MODULE_OFF()         EXTERNAL_MODULE_PWR_OFF()\n#endif\n\n#if defined(RADIO_T12)\n#define IS_INTERNAL_MODULE_ON()         false\n#else\n#define IS_INTERNAL_MODULE_ON()         (GPIO_ReadInputDataBit(INTMODULE_PWR_GPIO, INTMODULE_PWR_GPIO_PIN) == Bit_SET)\n#endif\n\nvoid intmoduleSerialStart(uint32_t baudrate, uint8_t rxEnable, uint16_t parity, uint16_t stopBits, uint16_t wordLength);\n#if defined(INTERNAL_MODULE_MULTI)\nvoid intmoduleTimerStart(uint32_t periodMs);\n#endif\nvoid intmoduleSendByte(uint8_t byte);\nvoid intmoduleSendBuffer(const uint8_t * data, uint8_t size);\nvoid intmoduleSendNextFrame();\n\nvoid extmoduleSerialStart(uint32_t baudrate, uint32_t period_half_us, bool inverted);\nvoid extmoduleInvertedSerialStart(uint32_t baudrate);\nvoid extmoduleSendBuffer(const uint8_t * data, uint8_t size);\nvoid extmoduleSendNextFrame();\nvoid extmoduleSendInvertedByte(uint8_t byte);\n\n// Trainer driver\n#define SLAVE_MODE()                    (g_model.trainerData.mode == TRAINER_MODE_SLAVE)\n\n#if defined(PCBX9D) || (defined(PCBX9DP) && PCBREV < 2019)\n  // Trainer detect is a switch on the jack\n  #define TRAINER_CONNECTED()           (GPIO_ReadInputDataBit(TRAINER_DETECT_GPIO, TRAINER_DETECT_GPIO_PIN) == Bit_RESET)\n#elif defined(PCBXLITES)\n  // Trainer is on the same connector than Headphones\n  enum JackState\n  {\n    SPEAKER_ACTIVE,\n    HEADPHONE_ACTIVE,\n    TRAINER_ACTIVE,\n  };\n  extern uint8_t jackState;\n  #define TRAINER_CONNECTED()           (jackState == TRAINER_ACTIVE)\n#elif defined(PCBXLITE)\n  // No Tainer jack on Taranis X-Lite\n  #define TRAINER_CONNECTED()           false\n#else\n  // Trainer detect catches PPM, detection would use more CPU\n  #define TRAINER_CONNECTED()           true\n#endif\n\n#if defined(TRAINER_GPIO)\n  void init_trainer_ppm();\n  void stop_trainer_ppm();\n  void init_trainer_capture();\n  void stop_trainer_capture();\n#else\n  #define init_trainer_ppm()\n  #define stop_trainer_ppm()\n  #define init_trainer_capture()\n  #define stop_trainer_capture()\n#endif\n#if defined(TRAINER_MODULE_CPPM)\n  void init_trainer_module_cppm();\n  void stop_trainer_module_cppm();\n#else\n  #define init_trainer_module_cppm()\n  #define stop_trainer_module_cppm()\n#endif\n#if defined(TRAINER_MODULE_SBUS)\n  void init_trainer_module_sbus();\n  void stop_trainer_module_sbus();\n#else\n  #define init_trainer_module_sbus()\n  #define stop_trainer_module_sbus()\n#endif\n\n#if defined(INTMODULE_HEARTBEAT_GPIO)\nvoid init_intmodule_heartbeat();\nvoid stop_intmodule_heartbeat();\nvoid check_intmodule_heartbeat();\n#else\n#define init_intmodule_heartbeat()\n#define stop_intmodule_heartbeat()\n#define check_intmodule_heartbeat()\n#endif\n\nvoid check_telemetry_exti();\n\n// SBUS\nint sbusGetByte(uint8_t * byte);\n\n// Keys driver\nenum EnumKeys\n{\n#if defined(KEYS_GPIO_REG_SHIFT)\n  KEY_SHIFT,\n#endif\n\n#if defined(KEYS_GPIO_REG_MENU)\n  KEY_MENU,\n#endif\n\n  KEY_EXIT,\n  KEY_ENTER,\n\n#if defined(KEYS_GPIO_REG_DOWN)\n  KEY_DOWN,\n  KEY_UP,\n#endif\n\n#if defined(KEYS_GPIO_REG_RIGHT)\n  KEY_RIGHT,\n  KEY_LEFT,\n#endif\n\n#if defined(KEYS_GPIO_REG_PAGE)\n  KEY_PAGE,\n#endif\n\n#if defined(KEYS_GPIO_REG_PLUS)\n  KEY_PLUS,\n  KEY_MINUS,\n#endif\n\n  KEY_COUNT,\n  KEY_MAX = KEY_COUNT - 1,\n\n#if defined(ROTARY_ENCODER_NAVIGATION)\n  KEY_PLUS,\n  KEY_MINUS,\n#endif\n\n  TRM_BASE,\n  TRM_LH_DWN = TRM_BASE,\n  TRM_LH_UP,\n  TRM_LV_DWN,\n  TRM_LV_UP,\n  TRM_RV_DWN,\n  TRM_RV_UP,\n  TRM_RH_DWN,\n  TRM_RH_UP,\n  TRM_LAST = TRM_RH_UP,\n\n  NUM_KEYS\n};\n\n#if defined(PCBX9E) && !defined(SIMU)\n  #define KEY_UP                        KEY_MINUS\n  #define KEY_DOWN                      KEY_PLUS\n  #define KEY_RIGHT                     KEY_PLUS\n  #define KEY_LEFT                      KEY_MINUS\n#elif defined(NAVIGATION_XLITE)\n  #define KEY_PLUS                      KEY_RIGHT\n  #define KEY_MINUS                     KEY_LEFT\n#elif defined(NAVIGATION_9X)\n  #define KEY_MENU                      KEY_ENTER\n  #define KEY_MINUS                     KEY_DOWN\n  #define KEY_PLUS                      KEY_UP\n#else\n  #define KEY_UP                        KEY_PLUS\n  #define KEY_DOWN                      KEY_MINUS\n  #define KEY_RIGHT                     KEY_MINUS\n  #define KEY_LEFT                      KEY_PLUS\n#endif\n\n#if defined(KEYS_GPIO_PIN_SHIFT)\n#define IS_SHIFT_KEY(index)             (index == KEY_SHIFT)\n#if defined(SIMU)\n#define IS_SHIFT_PRESSED()              (readKeys() & (1 << KEY_SHIFT))\n#else\n#define IS_SHIFT_PRESSED()              (~KEYS_GPIO_REG_SHIFT & KEYS_GPIO_PIN_SHIFT)\n#endif\n#else\n#define IS_SHIFT_KEY(index)             (false)\n#define IS_SHIFT_PRESSED()              (false)\n#endif\n\nenum EnumSwitches\n{\n  SW_SA,\n  SW_SB,\n  SW_SC,\n  SW_SD,\n  SW_SE,\n  SW_SF,\n  SW_SG,\n  SW_SH\n};\n#define IS_3POS(x)                      ((x) != SW_SF && (x) != SW_SH)\n\nenum EnumSwitchesPositions\n{\n  SW_SA0,\n  SW_SA1,\n  SW_SA2,\n  SW_SB0,\n  SW_SB1,\n  SW_SB2,\n  SW_SC0,\n  SW_SC1,\n  SW_SC2,\n  SW_SD0,\n  SW_SD1,\n  SW_SD2,\n#if defined(PCBX9) || defined(PCBXLITES) || defined(PCBX9LITES)\n  SW_SE0,\n  SW_SE1,\n  SW_SE2,\n#endif\n#if defined(PCBX9D) || defined(PCBX9DP) || defined(PCBX9E) || defined(PCBX7) || defined(PCBXLITES) || defined(PCBX9LITES)\n  SW_SF0,\n  SW_SF1,\n  SW_SF2,\n#endif\n#if defined(PCBX9D) || defined(PCBX9DP) || defined(PCBX9E) || defined(PCBX9LITES)\n  SW_SG0,\n  SW_SG1,\n  SW_SG2,\n#endif\n#if defined(PCBX9D) || defined(PCBX9DP) || defined(PCBX9E) || defined(PCBX7)\n  SW_SH0,\n  SW_SH1,\n  SW_SH2,\n#endif\n#if defined(RADIO_X9DP2019)\n  SW_SI0,\n  SW_SI1,\n  SW_SI2,\n#endif\n#if defined(PCBX7ACCESS)\n  SW_SI0,\n  SW_SI1,\n  SW_SI2,\n#elif defined(PCBX7)\n  SW_SI0,\n  SW_SI1,\n  SW_SI2,\n  SW_SJ0,\n  SW_SJ1,\n  SW_SJ2,\n#endif\n#if defined(PCBX9E)\n  SW_SI0,\n  SW_SI1,\n  SW_SI2,\n  SW_SJ0,\n  SW_SJ1,\n  SW_SJ2,\n  SW_SK0,\n  SW_SK1,\n  SW_SK2,\n  SW_SL0,\n  SW_SL1,\n  SW_SL2,\n  SW_SM0,\n  SW_SM1,\n  SW_SM2,\n  SW_SN0,\n  SW_SN1,\n  SW_SN2,\n  SW_SO0,\n  SW_SO1,\n  SW_SO2,\n  SW_SP0,\n  SW_SP1,\n  SW_SP2,\n  SW_SQ0,\n  SW_SQ1,\n  SW_SQ2,\n  SW_SR0,\n  SW_SR1,\n  SW_SR2,\n#endif\n  NUM_SWITCHES_POSITIONS\n};\n\n#if defined(PCBXLITES)\n  #define NUM_SWITCHES                  6\n  #define STORAGE_NUM_SWITCHES          NUM_SWITCHES\n  #define DEFAULT_SWITCH_CONFIG         (SWITCH_TOGGLE << 10) + (SWITCH_TOGGLE << 8) + (SWITCH_2POS << 6) + (SWITCH_2POS << 4) + (SWITCH_3POS << 2) + (SWITCH_3POS << 0)\n  #define DEFAULT_POTS_CONFIG           (POT_WITHOUT_DETENT << 2) + (POT_WITHOUT_DETENT << 0)\n#elif defined(PCBXLITE)\n  #define NUM_SWITCHES                  4\n  #define STORAGE_NUM_SWITCHES          6\n  #define DEFAULT_SWITCH_CONFIG         (SWITCH_2POS << 6) + (SWITCH_2POS << 4) + (SWITCH_3POS << 2) + (SWITCH_3POS << 0);\n  #define DEFAULT_POTS_CONFIG           (POT_WITHOUT_DETENT << 2) + (POT_WITHOUT_DETENT << 0)\n#elif defined(RADIO_T12)\n  #define NUM_SWITCHES                  8\n  #define STORAGE_NUM_SWITCHES          NUM_SWITCHES\n  #define DEFAULT_SWITCH_CONFIG         (SWITCH_2POS << 10) + (SWITCH_2POS << 8) + (SWITCH_3POS << 6) + (SWITCH_3POS << 4) + (SWITCH_3POS << 2) + (SWITCH_3POS << 0)\n  #define DEFAULT_POTS_CONFIG           (POT_WITHOUT_DETENT << 0) + (POT_WITHOUT_DETENT << 2); // S1 = pot without detent, S2 = pot with detent\n#elif defined(PCBX7ACCESS)\n  #define NUM_SWITCHES                  7\n  #define STORAGE_NUM_SWITCHES          8\n  #define DEFAULT_SWITCH_CONFIG         (SWITCH_TOGGLE << 10) + (SWITCH_2POS << 8) + (SWITCH_3POS << 6) + (SWITCH_3POS << 4) + (SWITCH_3POS << 2) + (SWITCH_3POS << 0)\n  #define DEFAULT_POTS_CONFIG           (POT_WITHOUT_DETENT << 0) + (POT_WITH_DETENT << 2); // S1 = pot without detent, S2 = pot with detent\n#elif defined(PCBX7)\n  #define NUM_SWITCHES                  8\n  #define STORAGE_NUM_SWITCHES          NUM_SWITCHES\n  #define DEFAULT_SWITCH_CONFIG         (SWITCH_TOGGLE << 10) + (SWITCH_2POS << 8) + (SWITCH_3POS << 6) + (SWITCH_3POS << 4) + (SWITCH_3POS << 2) + (SWITCH_3POS << 0)\n  #define DEFAULT_POTS_CONFIG           (POT_WITHOUT_DETENT << 0) + (POT_WITH_DETENT << 2); // S1 = pot without detent, S2 = pot with detent\n#elif defined(PCBX9LITES)\n  #define NUM_SWITCHES                  7\n  #define STORAGE_NUM_SWITCHES          NUM_SWITCHES\n  #define DEFAULT_SWITCH_CONFIG         (SWITCH_TOGGLE << 12) + (SWITCH_TOGGLE << 10) + (SWITCH_TOGGLE << 8) + (SWITCH_2POS << 6) + (SWITCH_3POS << 4) + (SWITCH_3POS << 2) + (SWITCH_3POS << 0);\n  #define DEFAULT_POTS_CONFIG           (POT_WITH_DETENT << 0); // S1 = pot with detent\n#elif defined(PCBX9LITE)\n  #define NUM_SWITCHES                  5\n  #define STORAGE_NUM_SWITCHES          NUM_SWITCHES\n  #define DEFAULT_SWITCH_CONFIG         (SWITCH_TOGGLE << 8) + (SWITCH_2POS << 6) + (SWITCH_3POS << 4) + (SWITCH_3POS << 2) + (SWITCH_3POS << 0);\n  #define DEFAULT_POTS_CONFIG           (POT_WITH_DETENT << 0); // S1 = pot with detent\n#elif defined(PCBX9E)\n  #define NUM_SWITCHES                  18 // yes, it's perfect like that !\n  #define STORAGE_NUM_SWITCHES          NUM_SWITCHES\n  #define DEFAULT_SWITCH_CONFIG         (SWITCH_TOGGLE << 14) + (SWITCH_3POS << 12) + (SWITCH_2POS << 10) + (SWITCH_3POS << 8) + (SWITCH_3POS << 6) + (SWITCH_3POS << 4) + (SWITCH_3POS << 2) + (SWITCH_3POS << 0)\n  #define DEFAULT_POTS_CONFIG           (POT_WITH_DETENT << 0) + (POT_WITH_DETENT << 2); // S1 = pot without detent, S2 = pot with detent\n  #define DEFAULT_SLIDERS_CONFIG        (SLIDER_WITH_DETENT << 3) + (SLIDER_WITH_DETENT << 2) + (SLIDER_WITH_DETENT << 1) + (SLIDER_WITH_DETENT << 0)\n#elif defined(RADIO_X9DP2019)\n  #define NUM_SWITCHES                  9\n  #define STORAGE_NUM_SWITCHES          NUM_SWITCHES\n  #define DEFAULT_SWITCH_CONFIG         (SWITCH_TOGGLE << 16) + (SWITCH_TOGGLE << 14) + (SWITCH_3POS << 12) + (SWITCH_2POS << 10) + (SWITCH_3POS << 8) + (SWITCH_3POS << 6) + (SWITCH_3POS << 4) + (SWITCH_3POS << 2) + (SWITCH_3POS << 0);\n  #define DEFAULT_POTS_CONFIG           (POT_WITH_DETENT << 0) + (POT_WITH_DETENT << 2); // S1 = pot without detent, S2 = pot with detent\n  #define DEFAULT_SLIDERS_CONFIG        (SLIDER_WITH_DETENT << 1) + (SLIDER_WITH_DETENT << 0)\n#elif defined(PCBX9D) || defined(PCBX9DP)\n  #define NUM_SWITCHES                  8\n  #define STORAGE_NUM_SWITCHES          9\n  #define DEFAULT_SWITCH_CONFIG         (SWITCH_TOGGLE << 14) + (SWITCH_3POS << 12) + (SWITCH_2POS << 10) + (SWITCH_3POS << 8) + (SWITCH_3POS << 6) + (SWITCH_3POS << 4) + (SWITCH_3POS << 2) + (SWITCH_3POS << 0)\n  #define DEFAULT_POTS_CONFIG           (POT_WITH_DETENT << 0) + (POT_WITH_DETENT << 2); // S1 = pot without detent, S2 = pot with detent\n  #define DEFAULT_SLIDERS_CONFIG        (SLIDER_WITH_DETENT << 1) + (SLIDER_WITH_DETENT << 0)\n#endif\n\n#define STORAGE_NUM_SWITCHES_POSITIONS  (STORAGE_NUM_SWITCHES * 3)\n\nvoid keysInit();\nuint32_t switchState(uint8_t index);\nuint32_t readKeys();\nuint32_t readTrims();\n#define TRIMS_PRESSED()                 (readTrims())\n#define KEYS_PRESSED()                  (readKeys())\n\n// WDT driver\n#define WDG_DURATION                      500 /*ms*/\n#if !defined(WATCHDOG) || defined(SIMU)\n  #define WDG_ENABLE(x)\n  #define WDG_RESET()\n#else\n  #define WDG_ENABLE(x)                 watchdogInit(x)\n  #define WDG_RESET()                   IWDG->KR = 0xAAAA\n#endif\nvoid watchdogInit(unsigned int duration);\n#define WAS_RESET_BY_SOFTWARE()             (RCC->CSR & RCC_CSR_SFTRSTF)\n#define WAS_RESET_BY_WATCHDOG()             (RCC->CSR & (RCC_CSR_WDGRSTF | RCC_CSR_WWDGRSTF))\n#define WAS_RESET_BY_WATCHDOG_OR_SOFTWARE() (RCC->CSR & (RCC_CSR_WDGRSTF | RCC_CSR_WWDGRSTF | RCC_CSR_SFTRSTF))\n\n// ADC driver\nenum Analogs {\n  STICK1,\n  STICK2,\n  STICK3,\n  STICK4,\n  POT_FIRST,\n  POT1 = POT_FIRST,\n#if defined(PCBX9LITE)\n  POT_LAST = POT1,\n#elif defined(PCBXLITE) || defined(PCBX7)\n  POT2,\n  POT_LAST = POT2,\n#elif defined(PCBX9E)\n  POT2,\n  POT3,\n  POT4,\n  POT_LAST = POT4,\n  SLIDER1,\n  SLIDER2,\n  SLIDER3,\n  SLIDER4,\n#else\n  POT2,\n  POT3,\n  POT_LAST = POT3,\n  SLIDER1,\n  SLIDER2,\n#endif\n  TX_VOLTAGE,\n  TX_RTC_VOLTAGE,\n  NUM_ANALOGS\n};\n\n#if defined(PCBX9LITE)\n  #define NUM_POTS                      1\n  #define NUM_SLIDERS                   0\n  #define STORAGE_NUM_POTS              1\n  #define STORAGE_NUM_SLIDERS           0\n#elif defined(PCBXLITE) || defined(PCBX7)\n  #define NUM_POTS                      2\n  #define NUM_SLIDERS                   0\n  #define STORAGE_NUM_POTS              2\n  #define STORAGE_NUM_SLIDERS           0\n#elif defined(PCBX9E)\n  #define NUM_POTS                      4\n  #define NUM_SLIDERS                   4\n  #define STORAGE_NUM_POTS              4\n  #define STORAGE_NUM_SLIDERS           4\n#elif defined(PCBX9DP)\n  #define NUM_POTS                      3\n  #define NUM_SLIDERS                   2\n  #define STORAGE_NUM_POTS              3\n  #define STORAGE_NUM_SLIDERS           2\n#else\n  #define NUM_POTS                      3 // TODO X9D has only 2 pots\n  #define NUM_SLIDERS                   2\n  #define STORAGE_NUM_POTS              3\n  #define STORAGE_NUM_SLIDERS           2\n#endif\n\n#define NUM_XPOTS                       STORAGE_NUM_POTS\n#define NUM_TRIMS                       4\n#define NUM_MOUSE_ANALOGS               0\n#define STORAGE_NUM_MOUSE_ANALOGS       0\n\n#if defined(STICKS_PWM)\n  #define NUM_PWMSTICKS                 4\n  #define STICKS_PWM_ENABLED()          (!hardwareOptions.sticksPwmDisabled)\n  void sticksPwmInit();\n  void sticksPwmRead(uint16_t * values);\n  extern volatile uint32_t pwm_interrupt_count; // TODO => reusable buffer (boot section)\n  #define NUM_TRIMS_KEYS                4\n#else\n  #define NUM_TRIMS_KEYS                8\n  #define STICKS_PWM_ENABLED()          false\n#endif\n\n#if NUM_PWMSTICKS > 0\nPACK(typedef struct {\n  uint8_t sticksPwmDisabled:1;\n  uint8_t pxx2Enabled:1;\n}) HardwareOptions;\n#else\nPACK(typedef struct {\n  uint8_t pxx2Enabled:1;\n}) HardwareOptions;\n#endif\n\nextern HardwareOptions hardwareOptions;\n\n#if !defined(PXX2)\n  #define IS_PXX2_INTERNAL_ENABLED()            (false)\n  #define IS_PXX1_INTERNAL_ENABLED()            (true)\n#elif !defined(PXX1) || defined(PCBXLITES) || defined(PCBX9LITE)\n  #define IS_PXX2_INTERNAL_ENABLED()            (true)\n  #define IS_PXX1_INTERNAL_ENABLED()            (false)\n#elif defined(INTERNAL_MODULE_PXX1)\n  #define IS_PXX2_INTERNAL_ENABLED()            (false)\n  #define IS_PXX1_INTERNAL_ENABLED()            (true)\n#else\n  // TODO #define PXX2_PROBE\n  // TODO #define IS_PXX2_INTERNAL_ENABLED()            (hardwareOptions.pxx2Enabled)\n  #define IS_PXX2_INTERNAL_ENABLED()            (true)\n  #define IS_PXX1_INTERNAL_ENABLED()            (true)\n#endif\n\nenum CalibratedAnalogs {\n  CALIBRATED_STICK1,\n  CALIBRATED_STICK2,\n  CALIBRATED_STICK3,\n  CALIBRATED_STICK4,\n  CALIBRATED_POT_FIRST,\n  CALIBRATED_POT_LAST = CALIBRATED_POT_FIRST + NUM_POTS - 1,\n  CALIBRATED_SLIDER_FIRST,\n  CALIBRATED_SLIDER_LAST = CALIBRATED_SLIDER_FIRST + NUM_SLIDERS - 1,\n  NUM_CALIBRATED_ANALOGS\n};\n\n#if defined(PCBX9D)\n  #define IS_POT(x)                     ((x)>=POT_FIRST && (x)<=POT2) // POT3 is only defined in software\n#else\n  #define IS_POT(x)                     ((x)>=POT_FIRST && (x)<=POT_LAST)\n#endif\n\n#define IS_SLIDER(x)                    ((x)>POT_LAST && (x)<TX_VOLTAGE)\n\nextern uint16_t adcValues[NUM_ANALOGS];\n\n// Battery driver\n#if defined(PCBX9E)\n  // NI-MH 9.6V\n  #define BATTERY_WARN                  87 // 8.7V\n  #define BATTERY_MIN                   85 // 8.5V\n  #define BATTERY_MAX                   115 // 11.5V\n#elif defined(PCBXLITE)\n  // 2 x Li-Ion\n  #define BATTERY_WARN                  66 // 6.6V\n  #define BATTERY_MIN                   67 // 6.7V\n  #define BATTERY_MAX                   83 // 8.3V\n#else\n  // NI-MH 7.2V\n  #define BATTERY_WARN                  65 // 6.5V\n  #define BATTERY_MIN                   60 // 6.0V\n  #define BATTERY_MAX                   80 // 8.0V\n#endif\n\n#if defined(PCBXLITE)\n  #define BATT_SCALE                    131\n#elif defined(PCBX7)\n  #define BATT_SCALE                    123\n#elif defined(PCBX9LITE)\n  #define BATT_SCALE                    117\n#elif defined(RADIO_X9DP2019)\n  #define BATT_SCALE                    117\n#else\n  #define BATT_SCALE                    150\n#endif\n\n#if defined(__cplusplus) && !defined(SIMU)\nextern \"C\" {\n#endif\n\n// Power driver\n#define SOFT_PWR_CTRL\nvoid pwrInit();\nuint32_t pwrCheck();\nvoid pwrOn();\nvoid pwrOff();\nbool pwrPressed();\n#if defined(PWR_BUTTON_PRESS)\n#define STARTUP_ANIMATION\nuint32_t pwrPressedDuration();\n#endif\nvoid pwrResetHandler();\n\n#if defined(SIMU)\n#define UNEXPECTED_SHUTDOWN()           false\n#else\n#define UNEXPECTED_SHUTDOWN()           (WAS_RESET_BY_WATCHDOG() || g_eeGeneral.unexpectedShutdown)\n#endif\n\n// Backlight driver\nvoid backlightInit();\nvoid backlightDisable();\n#define BACKLIGHT_DISABLE()             backlightDisable()\nuint8_t isBacklightEnabled();\n#if !defined(__cplusplus)\n  #define backlightEnable(...)\n#elif defined(PCBX9E) || defined(PCBX9DP)\n  void backlightEnable(uint8_t level = 0, uint8_t color = 0);\n  #define BACKLIGHT_ENABLE()            backlightEnable(g_eeGeneral.backlightBright, g_eeGeneral.backlightColor)\n#else\n  void backlightEnable(uint8_t level = 0);\n  #define BACKLIGHT_ENABLE()            backlightEnable(g_eeGeneral.backlightBright)\n#endif\n\n#if !defined(SIMU)\n  void usbJoystickUpdate();\n#endif\n#define USB_NAME                        \"FrSky Taranis\"\n#define USB_MANUFACTURER                'F', 'r', 'S', 'k', 'y', ' ', ' ', ' '  /* 8 bytes */\n#define USB_PRODUCT                     'T', 'a', 'r', 'a', 'n', 'i', 's', ' '  /* 8 Bytes */\n\n#if defined(__cplusplus) && !defined(SIMU)\n}\n#endif\n\n// I2C driver: EEPROM + Audio Volume\n#define EEPROM_SIZE                   (32*1024)\n\nvoid i2cInit();\nvoid eepromReadBlock(uint8_t * buffer, size_t address, size_t size);\nvoid eepromStartWrite(uint8_t * buffer, size_t address, size_t size);\nuint8_t eepromIsTransferComplete();\n\n// Debug driver\nvoid debugPutc(const char c);\n\n// Telemetry driver\nvoid telemetryPortInit(uint32_t baudrate, uint8_t mode);\nvoid telemetryPortSetDirectionInput();\nvoid telemetryPortSetDirectionOutput();\nvoid sportSendByte(uint8_t byte);\nvoid sportSendByteLoop(uint8_t byte);\nvoid sportStopSendByteLoop();\nvoid sportSendBuffer(const uint8_t * buffer, uint32_t count);\nbool telemetryGetByte(uint8_t * byte);\nvoid telemetryClearFifo();\nextern uint32_t telemetryErrors;\n\n// soft-serial\nvoid telemetryPortInvertedInit(uint32_t baudrate);\n\n// PCBREV driver\n#if defined(PCBX7ACCESS)\n  #define HAS_SPORT_UPDATE_CONNECTOR()  true\n#elif defined(PCBX7)\n  #define IS_PCBREV_40()                (GPIO_ReadInputDataBit(PCBREV_GPIO, PCBREV_GPIO_PIN) == Bit_SET)\n  #define HAS_SPORT_UPDATE_CONNECTOR()  IS_PCBREV_40()\n#elif defined(SPORT_UPDATE_PWR_GPIO)\n  #define HAS_SPORT_UPDATE_CONNECTOR()  true\n#else\n  #define HAS_SPORT_UPDATE_CONNECTOR()  false\n#endif\n\n// Sport update driver\n#if defined(SPORT_UPDATE_PWR_GPIO)\nvoid sportUpdateInit();\nvoid sportUpdatePowerOn();\nvoid sportUpdatePowerOff();\n#define SPORT_UPDATE_POWER_ON()         sportUpdatePowerOn()\n#define SPORT_UPDATE_POWER_OFF()        sportUpdatePowerOff()\n#else\n#define sportUpdateInit()\n#define SPORT_UPDATE_POWER_ON()\n#define SPORT_UPDATE_POWER_OFF()\n#endif\n\n// Audio driver\nvoid audioInit() ;\nvoid audioEnd() ;\nvoid dacStart();\nvoid dacStop();\nvoid setSampleRate(uint32_t frequency);\n#define VOLUME_LEVEL_MAX  23\n#define VOLUME_LEVEL_DEF  12\n#if !defined(SOFTWARE_VOLUME)\nvoid setScaledVolume(uint8_t volume);\nvoid setVolume(uint8_t volume);\nint32_t getVolume();\n#endif\n#if defined(AUDIO_SPEAKER_ENABLE_GPIO)\nvoid initSpeakerEnable();\nvoid enableSpeaker();\nvoid disableSpeaker();\n#else\nstatic inline void initSpeakerEnable() { }\nstatic inline void enableSpeaker() { }\nstatic inline void disableSpeaker() { }\n#endif\n#if defined(HEADPHONE_TRAINER_SWITCH_GPIO)\nvoid initHeadphoneTrainerSwitch();\nvoid enableHeadphone();\nvoid enableTrainer();\n#else\nstatic inline void initHeadphoneTrainerSwitch() { }\nstatic inline void enableHeadphone() { }\nstatic inline void enableTrainer() { }\n#endif\n#if defined(JACK_DETECT_GPIO)\nvoid initJackDetect();\nbool isJackPlugged();\n#endif\nvoid audioConsumeCurrentBuffer();\n#define audioDisableIrq()               __disable_irq()\n#define audioEnableIrq()                __enable_irq()\n\n// Haptic driver\nvoid hapticInit();\nvoid hapticOff();\n#if defined(HAPTIC_PWM)\n  void hapticOn(uint32_t pwmPercent);\n#else\n  void hapticOn();\n#endif\n\n// Second serial port driver\n#if defined(AUX_SERIAL_GPIO)\n#define DEBUG_BAUDRATE                  115200\n#define AUX_SERIAL\nextern uint8_t auxSerialMode;\nvoid auxSerialInit(unsigned int mode, unsigned int protocol);\nvoid auxSerialPutc(char c);\n#define auxSerialTelemetryInit(protocol) auxSerialInit(UART_MODE_TELEMETRY, protocol)\nvoid auxSerialSbusInit();\nvoid auxSerialStop();\n#endif\n\n// BT driver\n#define BLUETOOTH_BOOTLOADER_BAUDRATE   230400\n#define BLUETOOTH_DEFAULT_BAUDRATE      115200\n#if defined(PCBX9E)\n#define BLUETOOTH_FACTORY_BAUDRATE      9600\n#else\n#define BLUETOOTH_FACTORY_BAUDRATE      57600\n#endif\n#define BT_TX_FIFO_SIZE    64\n#define BT_RX_FIFO_SIZE    128\nvoid bluetoothInit(uint32_t baudrate, bool enable);\nvoid bluetoothWriteWakeup();\nuint8_t bluetoothIsWriting();\nvoid bluetoothDisable();\n#if defined(PCBX9LITES) || defined(PCBX7ACCESS)\n  #define IS_BLUETOOTH_CHIP_PRESENT()     (true)\n#elif defined(PCBX9LITE)\n  #define IS_BLUETOOTH_CHIP_PRESENT()     (false)\n#elif defined(BLUETOOTH_PROBE) && !defined(SIMU)\n  extern volatile uint8_t btChipPresent;\n  #define IS_BLUETOOTH_CHIP_PRESENT()     (btChipPresent)\n#else\n  #define IS_BLUETOOTH_CHIP_PRESENT()     (true)\n#endif\n\n// LED driver\nvoid ledInit();\nvoid ledOff();\nvoid ledRed();\nvoid ledGreen();\nvoid ledBlue();\n\n// LCD driver\n#if defined(PCBX9D) || defined(PCBX9DP) || defined(PCBX9E)\n#define LCD_W                           212\n#define LCD_H                           64\n#define LCD_DEPTH                       4\n#define LCD_CONTRAST_MIN                0\n#define LCD_CONTRAST_MAX                45\n#define LCD_CONTRAST_DEFAULT            25\n#else\n#define LCD_W                           128\n#define LCD_H                           64\n#define LCD_DEPTH                       1\n#define IS_LCD_RESET_NEEDED()           true\n#define LCD_CONTRAST_MIN                10\n#define LCD_CONTRAST_MAX                30\n#define LCD_CONTRAST_DEFAULT            20\n#endif\n\n#if defined(PCBX9D) || defined(PCBX9E) || (defined(PCBX9DP) && PCBREV < 2019)\n#define IS_LCD_RESET_NEEDED()           (!WAS_RESET_BY_WATCHDOG_OR_SOFTWARE())\n#else\n#define IS_LCD_RESET_NEEDED()           true\n#endif\n\nvoid lcdInit();\nvoid lcdInitFinish();\nvoid lcdOff();\n\n// TODO lcdRefreshWait() stub in simpgmspace and remove LCD_DUAL_BUFFER\n#if defined(LCD_DMA) && !defined(LCD_DUAL_BUFFER) && !defined(SIMU)\nvoid lcdRefreshWait();\n#else\n#define lcdRefreshWait()\n#endif\n#if defined(PCBX9D) || defined(SIMU) || !defined(__cplusplus)\nvoid lcdRefresh();\n#else\nvoid lcdRefresh(bool wait=true); // TODO uint8_t wait to simplify this\n#endif\nvoid lcdSetRefVolt(unsigned char val);\nvoid lcdSetContrast();\n\n// Top LCD driver\n#if defined(TOPLCD_GPIO)\nvoid toplcdInit();\nvoid toplcdOff();\nvoid toplcdRefreshStart();\nvoid toplcdRefreshEnd();\nvoid setTopFirstTimer(int32_t value);\nvoid setTopSecondTimer(uint32_t value);\nvoid setTopRssi(uint32_t rssi);\nvoid setTopBatteryState(int state, uint8_t blinking);\nvoid setTopBatteryValue(uint32_t volts);\n#endif\n\n#define USART_FLAG_ERRORS (USART_FLAG_ORE | USART_FLAG_NE | USART_FLAG_FE | USART_FLAG_PE)\n\n#if defined(__cplusplus)\n#include \"fifo.h\"\n#include \"dmafifo.h\"\n\n#if defined(CROSSFIRE)\n#define TELEMETRY_FIFO_SIZE             128\n#else\n#define TELEMETRY_FIFO_SIZE             64\n#endif\n\nextern Fifo<uint8_t, TELEMETRY_FIFO_SIZE> telemetryFifo;\ntypedef DMAFifo<32> AuxSerialRxFifo;\nextern AuxSerialRxFifo auxSerialRxFifo;\n#endif\n\n// Gyro driver\n#define GYRO_VALUES_COUNT               6\n#define GYRO_BUFFER_LENGTH              (GYRO_VALUES_COUNT * sizeof(int16_t))\nint gyroInit();\nint gyroRead(uint8_t buffer[GYRO_BUFFER_LENGTH]);\n#define GYRO_MAX_DEFAULT                30\n#define GYRO_MAX_RANGE                  60\n#define GYRO_OFFSET_MIN                 -30\n#define GYRO_OFFSET_MAX                 10\n\n#endif // _BOARD_H_\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- radio/src/targets/taranis/board.h	(revision 82a7223b78b262f6a4c3421414e91babbd73261a)
+++ radio/src/targets/taranis/board.h	(date 1576578830767)
@@ -61,6 +61,13 @@
 void init2MhzTimer();
 void init5msTimer();
 
+// PCBREV driver
+enum {
+  // X7
+  PCBREV_X7_STD = 0,
+  PCBREV_X7_40 = 1,
+};
+
 // SD driver
 #define BLOCK_SIZE                      512 /* Block Size in Bytes */
 #if !defined(SIMU) || defined(SIMU_DISKIO)
@@ -541,16 +548,11 @@
   #define STICKS_PWM_ENABLED()          false
 #endif
 
-#if NUM_PWMSTICKS > 0
 PACK(typedef struct {
+  uint8_t pcbrev:2;
   uint8_t sticksPwmDisabled:1;
   uint8_t pxx2Enabled:1;
 }) HardwareOptions;
-#else
-PACK(typedef struct {
-  uint8_t pxx2Enabled:1;
-}) HardwareOptions;
-#endif
 
 extern HardwareOptions hardwareOptions;
 
@@ -701,7 +703,7 @@
 #if defined(PCBX7ACCESS)
   #define HAS_SPORT_UPDATE_CONNECTOR()  true
 #elif defined(PCBX7)
-  #define IS_PCBREV_40()                (GPIO_ReadInputDataBit(PCBREV_GPIO, PCBREV_GPIO_PIN) == Bit_SET)
+  #define IS_PCBREV_40()                (hardwareOptions.pcbrev == PCBREV_X7_40)
   #define HAS_SPORT_UPDATE_CONNECTOR()  IS_PCBREV_40()
 #elif defined(SPORT_UPDATE_PWR_GPIO)
   #define HAS_SPORT_UPDATE_CONNECTOR()  true
Index: radio/src/targets/horus/CMakeLists.txt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>option(DISK_CACHE \"Enable SD card disk cache\" ON)\noption(UNEXPECTED_SHUTDOWN \"Enable the Unexpected Shutdown screen\" ON)\noption(PXX1 \"PXX1 protocol support\" ON)\noption(PXX2 \"PXX2 protocol support\" OFF)\noption(MULTIMODULE \"DIY Multiprotocol TX Module (https://github.com/pascallanger/DIY-Multiprotocol-TX-Module)\" ON)\n\nset(PWR_BUTTON \"PRESS\" CACHE STRING \"Pwr button type (PRESS/SWITCH)\")\nset(CPU_TYPE STM32F4)\nset(HSE_VALUE 12000000)\nset(SDCARD YES)\nset(EEPROM SDCARD)\nset(HAPTIC YES)\nset(GUI_DIR 480x272)\nset(NAVIGATION_TYPE horus)\nset(TARGET_DIR horus)\nset(LINKER_SCRIPT targets/horus/stm32f4_flash.ld)\nset(RTC_BACKUP_RAM YES)\nset(LUA YES)\nset(PPM_LIMITS_SYMETRICAL YES)\nset(USB_SERIAL ON CACHE BOOL \"Enable USB serial (CDC)\")\n\n# for size report script\nset(CPU_TYPE_FULL STM32F429xI)\nset(SIZE_TARGET_MEM_DEFINE \"MEM_SIZE_SDRAM2=8192\")\n\nif(SPLASH STREQUAL OFF)\n  message(FATAL_ERROR \"Option SPLASH=OFF not supported on Horus\")\nendif()\n\nif (PCB STREQUAL X10)\n  set(PCBREV \"STD\" CACHE STRING \"PCB Revision\")\n  add_definitions(-DPCBX10)\n  add_definitions(-DSOFTWARE_VOLUME)\n  set(TARGET_SRC\n    ${TARGET_SRC}\n    ../common/arm/stm32/audio_dac_driver.cpp\n    ../common/arm/stm32/adc_driver.cpp\n    ../common/arm/stm32/sticks_pwm_driver.cpp\n    )\n  set(BITMAPS_TARGET x10_bitmaps)\n  set(FONTS_TARGET x10_fonts)\n  set(LCD_DRIVER lcd_driver.cpp)\n  set(LUA_EXPORT lua_export_x10)\n  set(INTERNAL_GPS OFF)\n  if (PCBREV STREQUAL EXPRESS)\n    set(FLAVOUR x10express)\n    option(INTERNAL_MODULE_PXX1 \"Support for PXX1 internal module\" OFF)\n    option(INTERNAL_MODULE_PXX2 \"Support for PXX2 internal module\" ON)\n    set(BLUETOOTH ON)\n    add_definitions(-DHARDWARE_POWER_MANAGEMENT_UNIT)\n  elseif (PCBREV STREQUAL T16)\n    set(FLAVOUR t16)\n    set(LUA_EXPORT lua_export_t16)\n    add_definitions(-DRADIO_T16)\n    option(INTERNAL_MODULE_MULTI \"Support for MULTI internal module\" OFF)\n    option(BLUETOOTH \"Support for bluetooth module\" OFF)\n  else()\n    set(FLAVOUR x10)\n    option(INTERNAL_MODULE_PXX1 \"Support for PXX1 internal module\" ON)\n    option(INTERNAL_MODULE_PXX2 \"Support for PXX2 internal module\" OFF)\n    set(BLUETOOTH ON)\n  endif()\nelseif (PCB STREQUAL X12S)\n  option(INTERNAL_MODULE_PXX1 \"Support for PXX1 internal module\" ON)\n  option(INTERNAL_MODULE_PXX2 \"Support for PXX2 internal module\" OFF)\n  set(FLAVOUR x12s)\n  set(BLUETOOTH ON)\n  set(PCBREV \"13\" CACHE STRING \"PCB Revision\")\n  if(${PCBREV} GREATER 10)\n    option(INTERNAL_GPS \"Internal GPS installed\" YES)\n  else()\n    option(INTERNAL_GPS \"Internal GPS installed\" NO)\n    if(NOT INTERNAL_GPS)\n      message(\"Horus: Internal GPS is optional, use INTERNAL_GPS=YES option to enable it\")\n    endif()\n  endif()\n  set(INTERNAL_GPS_BAUDRATE \"9600\" CACHE STRING \"Baud rate for internal GPS\")\n  add_definitions(-DPCBX12S)\n  set(TARGET_SRC\n    ${TARGET_SRC}\n    audio_spi_driver.cpp\n    x12s_adc_driver.cpp\n    gps_driver.cpp\n    )\n  set(BITMAPS_TARGET x12s_bitmaps)\n  set(FONTS_TARGET x12s_fonts)\n  set(LCD_DRIVER lcd_driver.cpp)\n  set(LUA_EXPORT lua_export_x12s)\nendif()\n\nadd_definitions(-DPCBREV=${PCBREV})\nadd_definitions(-DPCBREV_${PCBREV})\n\nset(RADIO_DEPENDENCIES\n  ${RADIO_DEPENDENCIES}\n  ${BITMAPS_TARGET}\n  )\n\nset(FIRMWARE_DEPENDENCIES datacopy)\n\nadd_definitions(-DPCBHORUS -DSTM32F429_439xx -DSDRAM -DCOLORLCD)\nadd_definitions(-DEEPROM_VARIANT=0 -DAUDIO -DVOICE -DRTCLOCK)\nadd_definitions(-DGPS_USART_BAUDRATE=${INTERNAL_GPS_BAUDRATE})\nadd_definitions(-DPWR_BUTTON_${PWR_BUTTON})\n\nif(NOT UNEXPECTED_SHUTDOWN)\n  add_definitions(-DNO_UNEXPECTED_SHUTDOWN)\nendif()\n\nif(INTERNAL_MODULE_PXX1)\n  add_definitions(-DHARDWARE_INTERNAL_MODULE)\n  add_definitions(-DINTERNAL_MODULE_PXX1)\nendif()\n\nif(INTERNAL_MODULE_PXX2)\n  set(PXX2 ON)\n  add_definitions(-DHARDWARE_INTERNAL_MODULE)\n  add_definitions(-DINTERNAL_MODULE_PXX2)\n  if (NOT PCBREV STREQUAL EXPRESS)\n    set(ACCESS_LIB ON)\n    add_definitions(-DACCESS_LIB)\n  endif()\nendif()\n\nif(INTERNAL_MODULE_MULTI)\n  add_definitions(-DHARDWARE_INTERNAL_MODULE)\n  add_definitions(-DINTERNAL_MODULE_MULTI)\nendif()\n\ninclude_directories(${RADIO_SRC_DIRECTORY}/fonts/480x272 gui/${GUI_DIR} gui/${GUI_DIR}/layouts)\n\nfile(GLOB THEMES_SRC RELATIVE ${RADIO_SRC_DIRECTORY}/gui/480x272 ${RADIO_SRC_DIRECTORY}/gui/480x272/themes/*.cpp)\nfile(GLOB LAYOUTS_SRC RELATIVE ${RADIO_SRC_DIRECTORY}/gui/480x272 ${RADIO_SRC_DIRECTORY}/gui/480x272/layouts/*.cpp)\nfile(GLOB WIDGETS_SRC RELATIVE ${RADIO_SRC_DIRECTORY}/gui/480x272 ${RADIO_SRC_DIRECTORY}/gui/480x272/widgets/*.cpp)\nset(GUI_SRC\n  ${GUI_SRC}\n  bitmapbuffer.cpp\n  curves.cpp\n  bitmaps.cpp\n  radio_sdmanager.cpp\n  radio_hardware.cpp\n  radio_diagkeys.cpp\n  radio_diaganas.cpp\n  model_inputs.cpp\n  model_mixes.cpp\n  model_curves.cpp\n  view_channels.cpp\n  view_logical_switches.cpp\n  view_about.cpp\n  view_text.cpp\n  screens_setup.cpp\n  theme.cpp\n  topbar.cpp\n  layout.cpp\n  widget.cpp\n  menus.cpp\n  ${THEMES_SRC}\n  ${LAYOUTS_SRC}\n  ${WIDGETS_SRC}\n  rle.cpp\n  )\n\nif(PXX2 OR LUA OR MULTIMODULE)\n  set(GUI_SRC ${GUI_SRC} radio_tools.cpp)\nendif()\n\nif(PXX2 OR MULTIMODULE)\n  set(GUI_SRC ${GUI_SRC} radio_spectrum_analyser.cpp)\nendif()\n\nif(PXX2)\n  set(GUI_SRC ${GUI_SRC} radio_power_meter.cpp)\nendif()\n\nif(DISK_CACHE)\n  set(SRC ${SRC} disk_cache.cpp)\n  add_definitions(-DDISK_CACHE)\nendif()\n\nif(INTERNAL_GPS)\n  set(SRC ${SRC} gps.cpp)\n  add_definitions(-DINTERNAL_GPS)\n  message(\"Horus: Internal GPS enabled\")\nendif()\n\nset(GVAR_SCREEN model_gvars.cpp)\n\nset(TARGET_SRC\n  ${TARGET_SRC}\n  led_driver.cpp\n  extmodule_driver.cpp\n  trainer_driver.cpp\n  ../common/arm/stm32/heartbeat_driver.cpp\n  ../common/arm/stm32/timers_driver.cpp\n  ../common/arm/stm32/intmodule_serial_driver.cpp\n  ../common/arm/stm32/rotary_encoder_driver.cpp\n  )\n\nif(BLUETOOTH)\n  add_definitions(-DBLUETOOTH)\n  set(TARGET_SRC ${TARGET_SRC} ../common/arm/stm32/bluetooth_driver.cpp)\n  set(SRC ${SRC} bluetooth.cpp)\nendif()\n\nset(FIRMWARE_TARGET_SRC\n  ${FIRMWARE_TARGET_SRC}\n  ${LCD_DRIVER}\n  board.cpp\n  backlight_driver.cpp\n  pwr_driver.cpp\n  sdram_driver.c\n  startup_stm32f42_43xxx.s\n  ../common/arm/stm32/sdio_sd.c\n  ../common/arm/loadboot.cpp\n  )\n\nset(SRC\n  ${SRC}\n  io/frsky_firmware_update.cpp\n  io/multi_firmware_update.cpp\n  )\n\nset(STM32LIB_SRC\n  STM32F4xx_StdPeriph_Driver/src/stm32f4xx_sdio.c\n  STM32F4xx_StdPeriph_Driver/src/stm32f4xx_fmc.c\n  STM32F4xx_StdPeriph_Driver/src/stm32f4xx_ltdc.c\n  STM32F4xx_StdPeriph_Driver/src/stm32f4xx_tim.c\n  STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma2d.c\n  )\n\nif(PYTHONINTERP_FOUND)\n  add_custom_command(\n    OUTPUT ${PROJECT_BINARY_DIR}/radio/src/datacopy.cpp\n    WORKING_DIRECTORY ${RADIO_DIRECTORY}/src\n    COMMAND ${PYTHON_EXECUTABLE} ${RADIO_DIRECTORY}/util/generate_datacopy.py datastructs.h -DPCBHORUS -DPCBX10 -DCPUARM -DCOLORLCD -DBACKUP -Itargets/horus > ${PROJECT_BINARY_DIR}/radio/src/datacopy.cpp\n    DEPENDS ${RADIO_DIRECTORY}/src/datastructs.h ${RADIO_DIRECTORY}/util/generate_datacopy.py\n    )\n  add_custom_target(datacopy\n    DEPENDS ${PROJECT_BINARY_DIR}/radio/src/datacopy.cpp\n    )\nendif()\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- radio/src/targets/horus/CMakeLists.txt	(revision 82a7223b78b262f6a4c3421414e91babbd73261a)
+++ radio/src/targets/horus/CMakeLists.txt	(date 1576578830675)
@@ -207,7 +207,7 @@
   ${LCD_DRIVER}
   board.cpp
   backlight_driver.cpp
-  pwr_driver.cpp
+  ../common/arm/stm32/pwr_driver.cpp
   sdram_driver.c
   startup_stm32f42_43xxx.s
   ../common/arm/stm32/sdio_sd.c
Index: radio/src/targets/taranis/hal.h
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>/*\n * Copyright (C) OpenTX\n *\n * Based on code named\n *   th9x - http://code.google.com/p/th9x\n *   er9x - http://code.google.com/p/er9x\n *   gruvin9x - http://code.google.com/p/gruvin9x\n *\n * License GPLv2: http://www.gnu.org/licenses/gpl-2.0.html\n *\n * This program is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License version 2 as\n * published by the Free Software Foundation.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n */\n\n#ifndef _HAL_H_\n#define _HAL_H_\n\n// Keys\n#if defined(PCBX9E)\n  #define KEYS_GPIO_REG_MENU            GPIOD->IDR\n  #define KEYS_GPIO_PIN_MENU            GPIO_Pin_7  // PD.07\n  #define KEYS_GPIO_REG_EXIT            GPIOD->IDR\n  #define KEYS_GPIO_PIN_EXIT            GPIO_Pin_2  // PD.02\n  #define KEYS_GPIO_REG_PAGE            GPIOD->IDR\n  #define KEYS_GPIO_PIN_PAGE            GPIO_Pin_3  // PD.03\n  #define KEYS_GPIO_REG_ENTER           GPIOF->IDR\n  #define KEYS_GPIO_PIN_ENTER           GPIO_Pin_0  // PF.00\n#elif defined(PCBXLITE)\n  #define KEYS_GPIO_REG_SHIFT           GPIOE->IDR\n  #define KEYS_GPIO_PIN_SHIFT           GPIO_Pin_8  // PE.08\n  #define KEYS_GPIO_REG_EXIT            GPIOE->IDR\n  #define KEYS_GPIO_PIN_EXIT            GPIO_Pin_7  // PE.07\n  #define KEYS_GPIO_REG_ENTER           GPIOE->IDR\n  #define KEYS_GPIO_PIN_ENTER           GPIO_Pin_11 // PE.11\n  #define KEYS_GPIO_REG_UP              GPIOE->IDR\n  #define KEYS_GPIO_PIN_UP              GPIO_Pin_10 // PE.10\n  #define KEYS_GPIO_REG_DOWN            GPIOE->IDR\n  #define KEYS_GPIO_PIN_DOWN            GPIO_Pin_14 // PE.14\n  #define KEYS_GPIO_REG_LEFT            GPIOE->IDR\n  #define KEYS_GPIO_PIN_LEFT            GPIO_Pin_12 // PE.12\n  #define KEYS_GPIO_REG_RIGHT           GPIOE->IDR\n  #define KEYS_GPIO_PIN_RIGHT           GPIO_Pin_13 // PE.13\n#elif defined(RADIO_T12)\n  #define KEYS_GPIO_REG_EXIT            GPIOD->IDR\n  #define KEYS_GPIO_PIN_EXIT            GPIO_Pin_2  // PD.02\n  #define KEYS_GPIO_REG_ENTER           GPIOE->IDR\n  #define KEYS_GPIO_PIN_ENTER           GPIO_Pin_10 // PE.10\n  #define KEYS_GPIO_REG_UP              GPIOE->IDR\n  #define KEYS_GPIO_PIN_UP              GPIO_Pin_9 // PE.09\n  #define KEYS_GPIO_REG_DOWN            GPIOE->IDR\n  #define KEYS_GPIO_PIN_DOWN            GPIO_Pin_11 // PE.11\n  #define KEYS_GPIO_REG_LEFT            GPIOD->IDR\n  #define KEYS_GPIO_PIN_LEFT            GPIO_Pin_7 // PD.07\n  #define KEYS_GPIO_REG_RIGHT           GPIOD->IDR\n  #define KEYS_GPIO_PIN_RIGHT           GPIO_Pin_3 // PD.03\n#elif defined(PCBX7)\n  #define KEYS_GPIO_REG_PAGE            GPIOD->IDR\n  #define KEYS_GPIO_PIN_PAGE            GPIO_Pin_3  // PD.03\n  #define KEYS_GPIO_REG_MENU            GPIOD->IDR\n  #define KEYS_GPIO_PIN_MENU            GPIO_Pin_7  // PD.07\n  #define KEYS_GPIO_REG_EXIT            GPIOD->IDR\n  #define KEYS_GPIO_PIN_EXIT            GPIO_Pin_2  // PD.02\n  #define KEYS_GPIO_REG_ENTER           GPIOE->IDR\n  #define KEYS_GPIO_PIN_ENTER           GPIO_Pin_10 // PE.10\n#elif defined(PCBX9LITE)\n  #define KEYS_GPIO_REG_PAGE            GPIOE->IDR\n  #define KEYS_GPIO_PIN_PAGE            GPIO_Pin_8  // PE.08\n  #define KEYS_GPIO_REG_MENU            GPIOE->IDR\n  #define KEYS_GPIO_PIN_MENU            GPIO_Pin_7  // PE.07\n  #define KEYS_GPIO_REG_EXIT            GPIOE->IDR\n  #define KEYS_GPIO_PIN_EXIT            GPIO_Pin_9  // PE.09\n  #define KEYS_GPIO_REG_ENTER           GPIOE->IDR\n  #define KEYS_GPIO_PIN_ENTER           GPIO_Pin_11 // PE.11\n#elif defined(RADIO_X9DP2019)\n  #define KEYS_GPIO_REG_MENU            GPIOD->IDR\n  #define KEYS_GPIO_PIN_MENU            GPIO_Pin_2  // PD.02\n  #define KEYS_GPIO_REG_EXIT            GPIOD->IDR\n  #define KEYS_GPIO_PIN_EXIT            GPIO_Pin_7  // PD.07\n  #define KEYS_GPIO_REG_PAGE            GPIOD->IDR\n  #define KEYS_GPIO_PIN_PAGE            GPIO_Pin_3  // PD.03\n  #define KEYS_GPIO_REG_ENTER           GPIOE->IDR\n  #define KEYS_GPIO_PIN_ENTER           GPIO_Pin_12 // PE.12\n#else\n  #define KEYS_GPIO_REG_MENU            GPIOD->IDR\n  #define KEYS_GPIO_PIN_MENU            GPIO_Pin_7  // PD.07\n  #define KEYS_GPIO_REG_EXIT            GPIOD->IDR\n  #define KEYS_GPIO_PIN_EXIT            GPIO_Pin_2  // PD.02\n  #define KEYS_GPIO_REG_PAGE            GPIOD->IDR\n  #define KEYS_GPIO_PIN_PAGE            GPIO_Pin_3  // PD.03\n  #define KEYS_GPIO_REG_PLUS            GPIOE->IDR\n  #define KEYS_GPIO_PIN_PLUS            GPIO_Pin_10 // PE.10\n  #define KEYS_GPIO_REG_MINUS           GPIOE->IDR\n  #define KEYS_GPIO_PIN_MINUS           GPIO_Pin_11 // PE.11\n  #define KEYS_GPIO_REG_ENTER           GPIOE->IDR\n  #define KEYS_GPIO_PIN_ENTER           GPIO_Pin_12 // PE.12\n#endif\n\n// Rotary Encoder\n#if defined(PCBX9E)\n  #define ROTARY_ENCODER_NAVIGATION\n  #define ROTARY_ENCODER_GPIO           GPIOD\n  #define ROTARY_ENCODER_GPIO_PIN_A     GPIO_Pin_12 // PD.12\n  #define ROTARY_ENCODER_GPIO_PIN_B     GPIO_Pin_13 // PD.13\n  #define ROTARY_ENCODER_POSITION()     (ROTARY_ENCODER_GPIO->IDR >> 12) & 0x03\n  #define ROTARY_ENCODER_EXTI_LINE1     EXTI_Line12\n  #define ROTARY_ENCODER_EXTI_LINE2     EXTI_Line13\n  #define ROTARY_ENCODER_EXTI_IRQn1        EXTI15_10_IRQn\n  #define ROTARY_ENCODER_EXTI_IRQHandler1  EXTI15_10_IRQHandler\n  #define ROTARY_ENCODER_EXTI_PortSource   EXTI_PortSourceGPIOD\n  #define ROTARY_ENCODER_EXTI_PinSource1   EXTI_PinSource12\n  #define ROTARY_ENCODER_EXTI_PinSource2   EXTI_PinSource13\n#elif defined(RADIO_X9DP2019)\n  #define ROTARY_ENCODER_NAVIGATION\n  #define ROTARY_ENCODER_GPIO           GPIOE\n  #define ROTARY_ENCODER_GPIO_PIN_A     GPIO_Pin_10 // PE.10\n  #define ROTARY_ENCODER_GPIO_PIN_B     GPIO_Pin_11 // PE.11\n  #define ROTARY_ENCODER_POSITION()     (((ROTARY_ENCODER_GPIO->IDR >> 9) & 0x02) + ((ROTARY_ENCODER_GPIO->IDR >> 11) & 0x01))\n  #define ROTARY_ENCODER_EXTI_LINE1     EXTI_Line10\n  #define ROTARY_ENCODER_EXTI_LINE2     EXTI_Line11\n  #define ROTARY_ENCODER_EXTI_IRQn1        EXTI15_10_IRQn\n  #define ROTARY_ENCODER_EXTI_IRQHandler1  EXTI15_10_IRQHandler\n  #define ROTARY_ENCODER_EXTI_PortSource   EXTI_PortSourceGPIOE\n  #define ROTARY_ENCODER_EXTI_PinSource1   EXTI_PinSource10\n  #define ROTARY_ENCODER_EXTI_PinSource2   EXTI_PinSource11\n#elif defined(RADIO_X7) || defined(RADIO_X7ACCESS)\n  #define ROTARY_ENCODER_NAVIGATION\n  #define ROTARY_ENCODER_GPIO           GPIOE\n  #define ROTARY_ENCODER_GPIO_PIN_A     GPIO_Pin_9  // PE.09\n  #define ROTARY_ENCODER_GPIO_PIN_B     GPIO_Pin_11 // PE.11\n  #define ROTARY_ENCODER_POSITION()     (((ROTARY_ENCODER_GPIO->IDR >> 10) & 0x02) + ((ROTARY_ENCODER_GPIO->IDR >> 9) & 0x01))\n  #define ROTARY_ENCODER_EXTI_LINE1     EXTI_Line9\n  #define ROTARY_ENCODER_EXTI_LINE2     EXTI_Line11\n  #define ROTARY_ENCODER_EXTI_IRQn1        EXTI9_5_IRQn\n  #define ROTARY_ENCODER_EXTI_IRQHandler1  EXTI9_5_IRQHandler\n  #define ROTARY_ENCODER_EXTI_IRQn2        EXTI15_10_IRQn\n  #define ROTARY_ENCODER_EXTI_IRQHandler2  EXTI15_10_IRQHandler\n  #define ROTARY_ENCODER_EXTI_PortSource  EXTI_PortSourceGPIOE\n  #define ROTARY_ENCODER_EXTI_PinSource1  EXTI_PinSource9\n  #define ROTARY_ENCODER_EXTI_PinSource2  EXTI_PinSource11\n#elif defined(PCBX9LITE)\n  #define ROTARY_ENCODER_NAVIGATION\n  #define ROTARY_ENCODER_GPIO           GPIOE\n  #define ROTARY_ENCODER_GPIO_PIN_A     GPIO_Pin_10 // PE.10\n  #define ROTARY_ENCODER_GPIO_PIN_B     GPIO_Pin_12 // PE.12\n  #define ROTARY_ENCODER_POSITION()     (((ROTARY_ENCODER_GPIO->IDR >> 12) & 0x01) + ((ROTARY_ENCODER_GPIO->IDR >> 9) & 0x02))\n  #define ROTARY_ENCODER_EXTI_LINE1     EXTI_Line10\n  #define ROTARY_ENCODER_EXTI_LINE2     EXTI_Line12\n  #define ROTARY_ENCODER_EXTI_IRQn1        EXTI15_10_IRQn\n  #define ROTARY_ENCODER_EXTI_IRQHandler1  EXTI15_10_IRQHandler\n  #define ROTARY_ENCODER_EXTI_PortSource  EXTI_PortSourceGPIOE\n  #define ROTARY_ENCODER_EXTI_PinSource1  EXTI_PinSource10\n  #define ROTARY_ENCODER_EXTI_PinSource2  EXTI_PinSource12\n#endif\n#if defined(ROTARY_ENCODER_NAVIGATION)\n  #define ROTARY_ENCODER_RCC_APB1Periph   RCC_APB1Periph_TIM5\n  #define ROTARY_ENCODER_TIMER            TIM5\n  #define ROTARY_ENCODER_TIMER_IRQn       TIM5_IRQn\n  #define ROTARY_ENCODER_TIMER_IRQHandler TIM5_IRQHandler\n#else\n  #define ROTARY_ENCODER_RCC_APB1Periph   0\n#endif\n\n// Trims\n#if defined(PCBX9E)\n  #define TRIMS_GPIO_REG_LHL            GPIOG->IDR\n  #define TRIMS_GPIO_PIN_LHL            GPIO_Pin_1  // PG.01\n  #define TRIMS_GPIO_REG_LHR            GPIOG->IDR\n  #define TRIMS_GPIO_PIN_LHR            GPIO_Pin_0  // PG.00\n  #define TRIMS_GPIO_REG_LVD            GPIOE->IDR\n  #define TRIMS_GPIO_PIN_LVD            GPIO_Pin_4  // PE.04\n  #define TRIMS_GPIO_REG_LVU            GPIOE->IDR\n  #define TRIMS_GPIO_PIN_LVU            GPIO_Pin_3  // PE.03\n  #define TRIMS_GPIO_REG_RVD            GPIOC->IDR\n  #define TRIMS_GPIO_PIN_RVD            GPIO_Pin_3  // PC.03\n  #define TRIMS_GPIO_REG_RHL            GPIOC->IDR\n  #define TRIMS_GPIO_PIN_RHL            GPIO_Pin_1  // PC.01\n  #define TRIMS_GPIO_REG_RVU            GPIOC->IDR\n  #define TRIMS_GPIO_PIN_RVU            GPIO_Pin_2  // PC.02\n  #define TRIMS_GPIO_REG_RHR            GPIOC->IDR\n  #define TRIMS_GPIO_PIN_RHR            GPIO_Pin_13 // PC.13\n#elif defined(PCBXLITE)\n  #define TRIMS_GPIO_REG_LHL            GPIOC->IDR\n  #define TRIMS_GPIO_PIN_LHL            GPIO_Pin_4  // PC.04\n  #define TRIMS_GPIO_REG_LHR            GPIOC->IDR\n  #define TRIMS_GPIO_PIN_LHR            GPIO_Pin_5  // PC.05\n  #define TRIMS_GPIO_REG_LVU            GPIOB->IDR\n  #define TRIMS_GPIO_PIN_LVU            GPIO_Pin_0  // PB.00\n  #define TRIMS_GPIO_REG_LVD            GPIOB->IDR\n  #define TRIMS_GPIO_PIN_LVD            GPIO_Pin_1  // PB.01\n#elif defined(RADIO_X7ACCESS)\n  #define TRIMS_GPIO_REG_LHR            GPIOD->IDR\n  #define TRIMS_GPIO_PIN_LHR            GPIO_Pin_15 // PD.15\n  #define TRIMS_GPIO_REG_LHL            GPIOC->IDR\n  #define TRIMS_GPIO_PIN_LHL            GPIO_Pin_1  // PC.01\n  #define TRIMS_GPIO_REG_LVD            GPIOE->IDR\n  #define TRIMS_GPIO_PIN_LVD            GPIO_Pin_6  // PE.06\n  #define TRIMS_GPIO_REG_LVU            GPIOE->IDR\n  #define TRIMS_GPIO_PIN_LVU            GPIO_Pin_5  // PE.05\n  #define TRIMS_GPIO_REG_RVD            GPIOC->IDR\n  #define TRIMS_GPIO_PIN_RVD            GPIO_Pin_3  // PC.03\n  #define TRIMS_GPIO_REG_RHR            GPIOE->IDR\n  #define TRIMS_GPIO_PIN_RHR            GPIO_Pin_3  // PE.03\n  #define TRIMS_GPIO_REG_RVU            GPIOC->IDR\n  #define TRIMS_GPIO_PIN_RVU            GPIO_Pin_2  // PC.02\n  #define TRIMS_GPIO_REG_RHL            GPIOE->IDR\n  #define TRIMS_GPIO_PIN_RHL            GPIO_Pin_4  // PE.04\n#elif defined(PCBX7)\n  #define TRIMS_GPIO_REG_LHL            GPIOD->IDR\n  #define TRIMS_GPIO_PIN_LHL            GPIO_Pin_15 // PD.15\n  #define TRIMS_GPIO_REG_LHR            GPIOC->IDR\n  #define TRIMS_GPIO_PIN_LHR            GPIO_Pin_1  // PC.01\n  #define TRIMS_GPIO_REG_LVD            GPIOE->IDR\n  #define TRIMS_GPIO_PIN_LVD            GPIO_Pin_6  // PE.06\n  #define TRIMS_GPIO_REG_LVU            GPIOE->IDR\n  #define TRIMS_GPIO_PIN_LVU            GPIO_Pin_5  // PE.05\n  #define TRIMS_GPIO_REG_RVD            GPIOC->IDR\n  #define TRIMS_GPIO_PIN_RVD            GPIO_Pin_3  // PC.03\n  #define TRIMS_GPIO_REG_RHL            GPIOE->IDR\n  #define TRIMS_GPIO_PIN_RHL            GPIO_Pin_3  // PE.03\n  #define TRIMS_GPIO_REG_RVU            GPIOC->IDR\n  #define TRIMS_GPIO_PIN_RVU            GPIO_Pin_2  // PC.02\n  #define TRIMS_GPIO_REG_RHR            GPIOE->IDR\n  #define TRIMS_GPIO_PIN_RHR            GPIO_Pin_4  // PE.04\n#elif defined(PCBX9LITE)\n  #define TRIMS_GPIO_REG_LHR            GPIOC->IDR\n  #define TRIMS_GPIO_PIN_LHR            GPIO_Pin_4  // PC.04\n  #define TRIMS_GPIO_REG_LHL            GPIOC->IDR\n  #define TRIMS_GPIO_PIN_LHL            GPIO_Pin_5  // PC.05\n  #define TRIMS_GPIO_REG_LVU            GPIOB->IDR\n  #define TRIMS_GPIO_PIN_LVU            GPIO_Pin_0  // PB.00\n  #define TRIMS_GPIO_REG_LVD            GPIOB->IDR\n  #define TRIMS_GPIO_PIN_LVD            GPIO_Pin_1  // PB.01\n  #define TRIMS_GPIO_REG_RVU            GPIOE->IDR\n  #define TRIMS_GPIO_PIN_RVU            GPIO_Pin_13 // PE.13\n  #define TRIMS_GPIO_REG_RHR            GPIOD->IDR\n  #define TRIMS_GPIO_PIN_RHR            GPIO_Pin_8  // PD.08\n  #define TRIMS_GPIO_REG_RVD            GPIOE->IDR\n  #define TRIMS_GPIO_PIN_RVD            GPIO_Pin_14 // PE.14\n  #define TRIMS_GPIO_REG_RHL            GPIOD->IDR\n  #define TRIMS_GPIO_PIN_RHL            GPIO_Pin_9  // PD.09\n#elif defined(RADIO_X9DP2019)\n  #define TRIMS_GPIO_REG_LHL            GPIOE->IDR\n  #define TRIMS_GPIO_PIN_LHL            GPIO_Pin_3  // PE.03\n  #define TRIMS_GPIO_REG_LHR            GPIOE->IDR\n  #define TRIMS_GPIO_PIN_LHR            GPIO_Pin_4  // PE.04\n  #define TRIMS_GPIO_REG_LVD            GPIOE->IDR\n  #define TRIMS_GPIO_PIN_LVD            GPIO_Pin_6  // PE.06\n  #define TRIMS_GPIO_REG_LVU            GPIOE->IDR\n  #define TRIMS_GPIO_PIN_LVU            GPIO_Pin_5  // PE.05\n  #define TRIMS_GPIO_REG_RVD            GPIOC->IDR\n  #define TRIMS_GPIO_PIN_RVD            GPIO_Pin_3  // PC.03\n  #define TRIMS_GPIO_REG_RVU            GPIOC->IDR\n  #define TRIMS_GPIO_PIN_RVU            GPIO_Pin_2  // PC.02\n  #define TRIMS_GPIO_REG_RHL            GPIOC->IDR\n  #define TRIMS_GPIO_PIN_RHL            GPIO_Pin_13 // PC.13\n  #define TRIMS_GPIO_REG_RHR            GPIOC->IDR\n  #define TRIMS_GPIO_PIN_RHR            GPIO_Pin_1  // PC.01\n#else\n  #define TRIMS_GPIO_REG_LHL            GPIOE->IDR\n  #define TRIMS_GPIO_PIN_LHL            GPIO_Pin_4  // PE.04\n  #define TRIMS_GPIO_REG_LHR            GPIOE->IDR\n  #define TRIMS_GPIO_PIN_LHR            GPIO_Pin_3  // PE.03\n  #define TRIMS_GPIO_REG_LVD            GPIOE->IDR\n  #define TRIMS_GPIO_PIN_LVD            GPIO_Pin_6  // PE.06\n  #define TRIMS_GPIO_REG_LVU            GPIOE->IDR\n  #define TRIMS_GPIO_PIN_LVU            GPIO_Pin_5  // PE.05\n  #define TRIMS_GPIO_REG_RVD            GPIOC->IDR\n  #define TRIMS_GPIO_PIN_RVD            GPIO_Pin_3  // PC.03\n  #define TRIMS_GPIO_REG_RHL            GPIOC->IDR\n  #define TRIMS_GPIO_PIN_RHL            GPIO_Pin_1  // PC.01\n  #define TRIMS_GPIO_REG_RVU            GPIOC->IDR\n  #define TRIMS_GPIO_PIN_RVU            GPIO_Pin_2  // PC.02\n  #define TRIMS_GPIO_REG_RHR            GPIOC->IDR\n  #define TRIMS_GPIO_PIN_RHR            GPIO_Pin_13 // PC.13\n#endif\n\n// Switches\n#if defined(PCBX9E)\n  #define STORAGE_SWITCH_A\n  #define HARDWARE_SWITCH_A\n  #define HARDWARE_SWITCH_A\n  #define SWITCHES_GPIO_REG_A_H         GPIOD->IDR\n  #define SWITCHES_GPIO_PIN_A_H         GPIO_Pin_10 // PD.10\n  #define SWITCHES_GPIO_REG_A_L         GPIOD->IDR\n  #define SWITCHES_GPIO_PIN_A_L         GPIO_Pin_14 // PD.14\n#elif defined(PCBXLITE) || defined(PCBX9LITE)\n  #define STORAGE_SWITCH_A\n  #define HARDWARE_SWITCH_A\n  #define SWITCHES_GPIO_REG_A_H         GPIOE->IDR\n  #define SWITCHES_GPIO_PIN_A_H         GPIO_Pin_1  // PE.01\n  #define SWITCHES_GPIO_REG_A_L         GPIOE->IDR\n  #define SWITCHES_GPIO_PIN_A_L         GPIO_Pin_0  // PE.00\n#elif defined(PCBX7)\n  #define STORAGE_SWITCH_A\n  #define HARDWARE_SWITCH_A\n  #define SWITCHES_GPIO_REG_A_L         GPIOE->IDR\n  #define SWITCHES_GPIO_PIN_A_L         GPIO_Pin_7  // PE.07\n  #define SWITCHES_GPIO_REG_A_H         GPIOE->IDR\n  #define SWITCHES_GPIO_PIN_A_H         GPIO_Pin_13 // PE.13\n#else\n  #define STORAGE_SWITCH_A\n  #define HARDWARE_SWITCH_A\n  #define SWITCHES_GPIO_REG_A_H         GPIOB->IDR\n  #define SWITCHES_GPIO_PIN_A_H         GPIO_Pin_5  // PB.05\n  #define SWITCHES_GPIO_REG_A_L         GPIOE->IDR\n  #define SWITCHES_GPIO_PIN_A_L         GPIO_Pin_0  // PE.00\n#endif\n\n#if defined(PCBX9E)\n  #define STORAGE_SWITCH_B\n  #define HARDWARE_SWITCH_B\n  #define SWITCHES_GPIO_REG_B_H         GPIOG->IDR\n  #define SWITCHES_GPIO_PIN_B_H         GPIO_Pin_11 // PG.11\n  #define SWITCHES_GPIO_REG_B_L         GPIOG->IDR\n  #define SWITCHES_GPIO_PIN_B_L         GPIO_Pin_10 // PG.10\n#elif defined(PCBXLITE)\n  #define STORAGE_SWITCH_B\n  #define HARDWARE_SWITCH_B\n  #define SWITCHES_GPIO_REG_B_L         GPIOA->IDR\n  #define SWITCHES_GPIO_PIN_B_L         GPIO_Pin_6  // PA.06\n  #define SWITCHES_GPIO_REG_B_H         GPIOA->IDR\n  #define SWITCHES_GPIO_PIN_B_H         GPIO_Pin_5  // PA.05\n#elif defined(PCBX7)\n  #define STORAGE_SWITCH_B\n  #define HARDWARE_SWITCH_B\n  #define SWITCHES_GPIO_REG_B_L         GPIOE->IDR\n  #define SWITCHES_GPIO_PIN_B_L         GPIO_Pin_15 // PE.15\n  #define SWITCHES_GPIO_REG_B_H         GPIOA->IDR\n  #define SWITCHES_GPIO_PIN_B_H         GPIO_Pin_5  // PA.05\n#elif defined(PCBX9LITE)\n  #define STORAGE_SWITCH_B\n  #define HARDWARE_SWITCH_B\n  #define SWITCHES_GPIO_REG_B_L         GPIOB->IDR\n  #define SWITCHES_GPIO_PIN_B_L         GPIO_Pin_4  // PB.04\n  #define SWITCHES_GPIO_REG_B_H         GPIOB->IDR\n  #define SWITCHES_GPIO_PIN_B_H         GPIO_Pin_5  // PB.05\n#else\n  #define STORAGE_SWITCH_B\n  #define HARDWARE_SWITCH_B\n  #define SWITCHES_GPIO_REG_B_H         GPIOE->IDR\n  #define SWITCHES_GPIO_PIN_B_H         GPIO_Pin_1  // PE.01\n  #define SWITCHES_GPIO_REG_B_L         GPIOE->IDR\n  #define SWITCHES_GPIO_PIN_B_L         GPIO_Pin_2  // PE.02\n#endif\n\n#if defined(PCBX9E)\n  #define STORAGE_SWITCH_C\n  #define HARDWARE_SWITCH_C\n  #define SWITCHES_GPIO_REG_C_H         GPIOF->IDR\n  #define SWITCHES_GPIO_PIN_C_H         GPIO_Pin_13 // PF.13\n  #define SWITCHES_GPIO_REG_C_L         GPIOF->IDR\n  #define SWITCHES_GPIO_PIN_C_L         GPIO_Pin_14 // PF.14\n#elif defined(PCBXLITE) || defined(PCBX9LITE)\n  #define STORAGE_SWITCH_C\n  #define HARDWARE_SWITCH_C\n  #define SWITCHES_GPIO_REG_C_L         GPIOE->IDR\n  #define SWITCHES_GPIO_PIN_C_L         GPIO_Pin_2  // PE.02\n  #define SWITCHES_GPIO_REG_C_H         GPIOE->IDR\n  #define SWITCHES_GPIO_PIN_C_H         GPIO_Pin_3  // PE.03\n#elif defined(PCBX7)\n  #define STORAGE_SWITCH_C\n  #define HARDWARE_SWITCH_C\n  #define SWITCHES_GPIO_REG_C_L         GPIOD->IDR\n  #define SWITCHES_GPIO_PIN_C_L         GPIO_Pin_11 // PD.11\n  #if defined(PCBX7ACCESS)    \n    #define SWITCHES_GPIO_REG_C_H       GPIOD->IDR\n    #define SWITCHES_GPIO_PIN_C_H       GPIO_Pin_10 // PD.10\n  #else\n    #define SWITCHES_GPIO_REG_C_H       GPIOE->IDR\n    #define SWITCHES_GPIO_PIN_C_H       GPIO_Pin_0  // PE.00\n  #endif\n#else\n  #define STORAGE_SWITCH_C\n  #define HARDWARE_SWITCH_C\n  #define SWITCHES_GPIO_REG_C_H         GPIOE->IDR\n  #define SWITCHES_GPIO_PIN_C_H         GPIO_Pin_15 // PE.15\n  #define SWITCHES_GPIO_REG_C_L         GPIOA->IDR\n  #define SWITCHES_GPIO_PIN_C_L         GPIO_Pin_5  // PA.05\n#endif\n\n#if defined(PCBX9E)\n  #define STORAGE_SWITCH_D\n  #define HARDWARE_SWITCH_D\n  #define SWITCHES_GPIO_REG_D_H         GPIOE->IDR\n  #define SWITCHES_GPIO_PIN_D_H         GPIO_Pin_1  // PE.01\n  #define SWITCHES_GPIO_REG_D_L         GPIOE->IDR\n  #define SWITCHES_GPIO_PIN_D_L         GPIO_Pin_2  // PE.02\n#elif defined(PCBX9DP)\n  #define STORAGE_SWITCH_D\n  #define HARDWARE_SWITCH_D\n  #define SWITCHES_GPIO_REG_D_H         GPIOE->IDR\n  #define SWITCHES_GPIO_PIN_D_H         GPIO_Pin_7  // PE.07\n  #define SWITCHES_GPIO_REG_D_L         GPIOE->IDR\n  #define SWITCHES_GPIO_PIN_D_L         GPIO_Pin_13 // PE.13\n#elif defined(PCBXLITE)\n  #define STORAGE_SWITCH_D\n  #define HARDWARE_SWITCH_D\n  #define SWITCHES_GPIO_REG_D_L         GPIOB->IDR\n  #define SWITCHES_GPIO_PIN_D_L         GPIO_Pin_4  // PB.04\n  #define SWITCHES_GPIO_REG_D_H         GPIOB->IDR\n  #define SWITCHES_GPIO_PIN_D_H         GPIO_Pin_5  // PB.05\n#elif defined(PCBX7)\n  #define STORAGE_SWITCH_D\n  #define HARDWARE_SWITCH_D\n  #define SWITCHES_GPIO_REG_D_L         GPIOE->IDR\n  #define SWITCHES_GPIO_PIN_D_L         GPIO_Pin_1  // PE.01\n  #define SWITCHES_GPIO_REG_D_H         GPIOE->IDR\n  #define SWITCHES_GPIO_PIN_D_H         GPIO_Pin_2  // PE.02\n#elif defined(PCBX9LITE)\n  #define STORAGE_SWITCH_D\n  #define HARDWARE_SWITCH_D\n  #define SWITCHES_GPIO_REG_D           GPIOC->IDR\n  #define SWITCHES_GPIO_PIN_D           GPIO_Pin_13 // PC.13\n#else\n  #define STORAGE_SWITCH_D\n  #define HARDWARE_SWITCH_D\n  #define SWITCHES_GPIO_REG_D_H         GPIOE->IDR\n  #define SWITCHES_GPIO_PIN_D_H         GPIO_Pin_7  // PE.07\n  #define SWITCHES_GPIO_REG_D_L         GPIOB->IDR\n  #define SWITCHES_GPIO_PIN_D_L         GPIO_Pin_1  // PB.01\n#endif\n\n#if defined(PCBX9E)\n  #define STORAGE_SWITCH_E\n  #define HARDWARE_SWITCH_E\n  #define SWITCHES_GPIO_REG_E_H         GPIOE->IDR\n  #define SWITCHES_GPIO_PIN_E_H         GPIO_Pin_7  // PE.07\n  #define SWITCHES_GPIO_REG_E_L         GPIOE->IDR\n  #define SWITCHES_GPIO_PIN_E_L         GPIO_Pin_13 // PE.13\n#elif defined(PCBXLITES)\n  #define STORAGE_SWITCH_E\n  #define HARDWARE_SWITCH_E\n  #define SWITCHES_GPIO_REG_E           GPIOE->IDR\n  #define SWITCHES_GPIO_PIN_E           GPIO_Pin_5  // PE.05\n#elif defined(PCBXLITE)\n  // no SWE but we want to remain compatible with XLiteS\n  #define STORAGE_SWITCH_E\n#elif defined(PCBX9LITE)\n  #define STORAGE_SWITCH_E\n  #define HARDWARE_SWITCH_E\n  #define SWITCHES_GPIO_REG_E           GPIOA->IDR\n  #define SWITCHES_GPIO_PIN_E           GPIO_Pin_5  // PA.05\n#elif defined(PCBX7)\n  // no SWE\n#else\n  #define STORAGE_SWITCH_E\n  #define HARDWARE_SWITCH_E\n  #define SWITCHES_GPIO_REG_E_H         GPIOB->IDR\n  #define SWITCHES_GPIO_PIN_E_H         GPIO_Pin_3  // PB.03\n  #define SWITCHES_GPIO_REG_E_L         GPIOB->IDR\n  #define SWITCHES_GPIO_PIN_E_L         GPIO_Pin_4  // PB.04\n#endif\n\n#if defined(PCBX9E)\n  #define STORAGE_SWITCH_F\n  #define HARDWARE_SWITCH_F\n  #define SWITCHES_GPIO_REG_F           GPIOE->IDR\n  #define SWITCHES_GPIO_PIN_F           GPIO_Pin_11 // PE.11\n#elif defined(PCBXLITES)\n  #define STORAGE_SWITCH_F\n  #define HARDWARE_SWITCH_F\n  #define SWITCHES_GPIO_REG_F           GPIOC->IDR\n  #define SWITCHES_GPIO_PIN_F           GPIO_Pin_3  // PC.03\n#elif defined(PCBXLITE)\n  // no SWF but we want to remain compatible with XLiteS\n  #define STORAGE_SWITCH_F\n#elif defined(PCBX9LITES)\n  #define STORAGE_SWITCH_F\n  #define HARDWARE_SWITCH_F\n  #define SWITCHES_GPIO_REG_F           GPIOC->IDR\n  #define SWITCHES_GPIO_PIN_F           GPIO_Pin_3 // PC.03\n#elif defined(PCBX9LITE)\n  // no SWF\n#elif defined(PCBX7)\n  #define STORAGE_SWITCH_F\n  #define HARDWARE_SWITCH_F\n  #define SWITCHES_GPIO_REG_F           GPIOE->IDR\n  #define SWITCHES_GPIO_PIN_F           GPIO_Pin_14 // PE.14\n#else\n  #define STORAGE_SWITCH_F\n  #define HARDWARE_SWITCH_F\n  #define SWITCHES_GPIO_REG_F           GPIOE->IDR\n  #define SWITCHES_GPIO_PIN_F           GPIO_Pin_14 // PE.14\n#endif\n\n#if defined(PCBX9E)\n  #define STORAGE_SWITCH_G\n  #define HARDWARE_SWITCH_G\n  #define SWITCHES_GPIO_REG_G_H         GPIOF->IDR\n  #define SWITCHES_GPIO_PIN_G_H         GPIO_Pin_3  // PF.03\n  #define SWITCHES_GPIO_REG_G_L         GPIOF->IDR\n  #define SWITCHES_GPIO_PIN_G_L         GPIO_Pin_4  // PF.04\n#elif defined(PCBX9LITES)\n  #define STORAGE_SWITCH_G\n  #define HARDWARE_SWITCH_G\n  #define SWITCHES_GPIO_REG_G           GPIOC->IDR\n  #define SWITCHES_GPIO_PIN_G           GPIO_Pin_2 // PC.02\n#elif defined(PCBX7) || defined(PCBXLITE) || defined(PCBX9LITE)\n  // no SWG\n#else\n  #define STORAGE_SWITCH_G\n  #define HARDWARE_SWITCH_G\n  #define SWITCHES_GPIO_REG_G_H         GPIOE->IDR\n  #define SWITCHES_GPIO_PIN_G_H         GPIO_Pin_9  // PE.09\n  #define SWITCHES_GPIO_REG_G_L         GPIOE->IDR\n  #define SWITCHES_GPIO_PIN_G_L         GPIO_Pin_8  // PE.08\n#endif\n\n#if defined(PCBX9E)\n  #define STORAGE_SWITCH_H\n  #define HARDWARE_SWITCH_H\n  #define SWITCHES_GPIO_REG_H           GPIOF->IDR\n  #define SWITCHES_GPIO_PIN_H           GPIO_Pin_1  // PF.01\n#elif defined(PCBX9DP)\n  #define STORAGE_SWITCH_H\n  #define HARDWARE_SWITCH_H\n  #define SWITCHES_GPIO_REG_H           GPIOD->IDR\n  #define SWITCHES_GPIO_PIN_H           GPIO_Pin_14 // PD.14\n#elif defined(PCBXLITE) || defined(PCBX9LITE)\n  // no SWH\n#elif defined(PCBX7)\n  #define STORAGE_SWITCH_H\n  #define HARDWARE_SWITCH_H\n  #define SWITCHES_GPIO_REG_H           GPIOD->IDR\n  #define SWITCHES_GPIO_PIN_H           GPIO_Pin_14 // PD.14\n#else\n  #define STORAGE_SWITCH_H\n  #define HARDWARE_SWITCH_H\n  #define SWITCHES_GPIO_REG_H           GPIOE->IDR\n  #define SWITCHES_GPIO_PIN_H           GPIO_Pin_13 // PE.13\n#endif\n\n#if defined(RADIO_X9DP2019)\n  #define STORAGE_SWITCH_I\n  #define HARDWARE_SWITCH_I\n  #define SWITCHES_GPIO_REG_I           GPIOD->IDR\n  #define SWITCHES_GPIO_PIN_I           GPIO_Pin_10 // PD.10\n#elif defined(PCBX9D) || defined(PCBX9DP)\n  #define STORAGE_SWITCH_I\n#endif\n\n// X7 P400 P401 headers additionnal momentary switches\n#if defined(PCBX7ACCESS)\n  #define STORAGE_SWITCH_I\n  #define HARDWARE_SWITCH_I\n  #define SWITCHES_GPIO_REG_I           GPIOC->IDR\n  #define SWITCHES_GPIO_PIN_I           GPIO_Pin_13  // PC.13\n  #define STORAGE_SWITCH_J\n#elif defined(PCBX7)  \n  #define STORAGE_SWITCH_I\n  #define HARDWARE_SWITCH_I\n  #define SWITCHES_GPIO_REG_I           GPIOC->IDR\n  #define SWITCHES_GPIO_PIN_I           GPIO_Pin_13  // PC.13\n  #define STORAGE_SWITCH_J\n  #define HARDWARE_SWITCH_J\n  #define SWITCHES_GPIO_REG_J           GPIOD->IDR\n  #define SWITCHES_GPIO_PIN_J           GPIO_Pin_10  // PD.10\n#endif\n\n#if defined(PCBX9E)\n  #define STORAGE_SWITCH_I\n  #define HARDWARE_SWITCH_I\n  #define SWITCHES_GPIO_REG_I_H         GPIOF->IDR\n  #define SWITCHES_GPIO_PIN_I_H         GPIO_Pin_15 // PF.15\n  #define SWITCHES_GPIO_REG_I_L         GPIOE->IDR\n  #define SWITCHES_GPIO_PIN_I_L         GPIO_Pin_14 // PE.14\n  #define STORAGE_SWITCH_J\n  #define HARDWARE_SWITCH_J\n  #define SWITCHES_GPIO_REG_J_H         GPIOG->IDR\n  #define SWITCHES_GPIO_PIN_J_H         GPIO_Pin_7  // PG.07\n  #define SWITCHES_GPIO_REG_J_L         GPIOG->IDR\n  #define SWITCHES_GPIO_PIN_J_L         GPIO_Pin_8  // PG.08\n  #define STORAGE_SWITCH_K\n  #define HARDWARE_SWITCH_K\n  #define SWITCHES_GPIO_REG_K_H         GPIOG->IDR\n  #define SWITCHES_GPIO_PIN_K_H         GPIO_Pin_13 // PG.13\n  #define SWITCHES_GPIO_REG_K_L         GPIOG->IDR\n  #define SWITCHES_GPIO_PIN_K_L         GPIO_Pin_12 // PG.12\n  #define STORAGE_SWITCH_L\n  #define HARDWARE_SWITCH_L\n  #define SWITCHES_GPIO_REG_L_H         GPIOE->IDR\n  #define SWITCHES_GPIO_PIN_L_H         GPIO_Pin_9  // PE.09\n  #define SWITCHES_GPIO_REG_L_L         GPIOE->IDR\n  #define SWITCHES_GPIO_PIN_L_L         GPIO_Pin_8  // PE.08\n  #define STORAGE_SWITCH_M\n  #define HARDWARE_SWITCH_M\n  #define SWITCHES_GPIO_REG_M_H         GPIOE->IDR\n  #define SWITCHES_GPIO_PIN_M_H         GPIO_Pin_15 // PE.15\n  #define SWITCHES_GPIO_REG_M_L         GPIOA->IDR\n  #define SWITCHES_GPIO_PIN_M_L         GPIO_Pin_5  // PA.05\n  #define STORAGE_SWITCH_N\n  #define HARDWARE_SWITCH_N\n  #define SWITCHES_GPIO_REG_N_H         GPIOB->IDR\n  #define SWITCHES_GPIO_PIN_N_H         GPIO_Pin_3  // PB.03\n  #define SWITCHES_GPIO_REG_N_L         GPIOB->IDR\n  #define SWITCHES_GPIO_PIN_N_L         GPIO_Pin_4  // PB.04\n  #define STORAGE_SWITCH_O\n  #define HARDWARE_SWITCH_O\n  #define SWITCHES_GPIO_REG_O_H         GPIOF->IDR\n  #define SWITCHES_GPIO_PIN_O_H         GPIO_Pin_7  // PF.07\n  #define SWITCHES_GPIO_REG_O_L         GPIOE->IDR\n  #define SWITCHES_GPIO_PIN_O_L         GPIO_Pin_10 // PE.10\n  #define STORAGE_SWITCH_P\n  #define HARDWARE_SWITCH_P\n  #define SWITCHES_GPIO_REG_P_H         GPIOF->IDR\n  #define SWITCHES_GPIO_PIN_P_H         GPIO_Pin_11 // PF.11\n  #define SWITCHES_GPIO_REG_P_L         GPIOF->IDR\n  #define SWITCHES_GPIO_PIN_P_L         GPIO_Pin_12 // PF.12\n  #define STORAGE_SWITCH_Q\n  #define HARDWARE_SWITCH_Q\n  #define SWITCHES_GPIO_REG_Q_H         GPIOF->IDR\n  #define SWITCHES_GPIO_PIN_Q_H         GPIO_Pin_5  // PF.05\n  #define SWITCHES_GPIO_REG_Q_L         GPIOF->IDR\n  #define SWITCHES_GPIO_PIN_Q_L         GPIO_Pin_6  // PF.06\n  #define STORAGE_SWITCH_R\n  #define HARDWARE_SWITCH_R\n  #define SWITCHES_GPIO_REG_R_H         GPIOB->IDR\n  #define SWITCHES_GPIO_PIN_R_H         GPIO_Pin_5  // PB.05\n  #define SWITCHES_GPIO_REG_R_L         GPIOE->IDR\n  #define SWITCHES_GPIO_PIN_R_L         GPIO_Pin_0  // PE.00\n#endif\n\n#if defined(PCBX9E)\n  #define KEYS_RCC_AHB1Periph           (RCC_AHB1Periph_GPIOA|RCC_AHB1Periph_GPIOB|RCC_AHB1Periph_GPIOC|RCC_AHB1Periph_GPIOD|RCC_AHB1Periph_GPIOE|RCC_AHB1Periph_GPIOF|RCC_AHB1Periph_GPIOG)\n  #define KEYS_GPIOA_PINS               (SWITCHES_GPIO_PIN_M_L)\n  #define KEYS_GPIOB_PINS               (SWITCHES_GPIO_PIN_N_H | SWITCHES_GPIO_PIN_N_L | SWITCHES_GPIO_PIN_R_H)\n  #define KEYS_GPIOC_PINS               (TRIMS_GPIO_PIN_RVD | TRIMS_GPIO_PIN_RVU | TRIMS_GPIO_PIN_RHL | TRIMS_GPIO_PIN_RHR)\n  #define KEYS_GPIOD_PINS               (KEYS_GPIO_PIN_MENU | KEYS_GPIO_PIN_EXIT | KEYS_GPIO_PIN_PAGE | SWITCHES_GPIO_PIN_A_H | SWITCHES_GPIO_PIN_A_L | ROTARY_ENCODER_GPIO_PIN_A | ROTARY_ENCODER_GPIO_PIN_B)\n  #define KEYS_GPIOE_PINS               (TRIMS_GPIO_PIN_LVU | TRIMS_GPIO_PIN_LVD | SWITCHES_GPIO_PIN_D_H | SWITCHES_GPIO_PIN_D_L| SWITCHES_GPIO_PIN_E_H | SWITCHES_GPIO_PIN_E_L | SWITCHES_GPIO_PIN_F | SWITCHES_GPIO_PIN_I_L | SWITCHES_GPIO_PIN_L_H | SWITCHES_GPIO_PIN_L_L | SWITCHES_GPIO_PIN_M_H | SWITCHES_GPIO_PIN_O_L | SWITCHES_GPIO_PIN_R_L)\n  #define KEYS_GPIOF_PINS               (KEYS_GPIO_PIN_ENTER | SWITCHES_GPIO_PIN_C_H | SWITCHES_GPIO_PIN_C_L | SWITCHES_GPIO_PIN_G_H | SWITCHES_GPIO_PIN_G_L | SWITCHES_GPIO_PIN_H | SWITCHES_GPIO_PIN_I_H | SWITCHES_GPIO_PIN_O_H | SWITCHES_GPIO_PIN_P_H | SWITCHES_GPIO_PIN_P_L | SWITCHES_GPIO_PIN_Q_H | SWITCHES_GPIO_PIN_Q_L)\n  #define KEYS_GPIOG_PINS               (TRIMS_GPIO_PIN_LHL | TRIMS_GPIO_PIN_LHR| SWITCHES_GPIO_PIN_B_H | SWITCHES_GPIO_PIN_B_L | SWITCHES_GPIO_PIN_J_H | SWITCHES_GPIO_PIN_J_L | SWITCHES_GPIO_PIN_K_H | SWITCHES_GPIO_PIN_K_L)\n#elif defined(RADIO_X9DP2019)\n  #define KEYS_RCC_AHB1Periph           (RCC_AHB1Periph_GPIOA | RCC_AHB1Periph_GPIOB | RCC_AHB1Periph_GPIOC | RCC_AHB1Periph_GPIOD | RCC_AHB1Periph_GPIOE)\n  #define KEYS_GPIOA_PINS               (GPIO_Pin_5)\n  #define KEYS_GPIOB_PINS               (GPIO_Pin_3 | GPIO_Pin_4 | GPIO_Pin_5)\n  #define KEYS_GPIOC_PINS               (GPIO_Pin_1 | GPIO_Pin_2 | GPIO_Pin_3 | GPIO_Pin_13)\n  #define KEYS_GPIOD_PINS               (GPIO_Pin_2 | GPIO_Pin_3 | GPIO_Pin_7 | GPIO_Pin_10 | GPIO_Pin_14)\n  #define KEYS_GPIOE_PINS               (GPIO_Pin_0 | GPIO_Pin_1 | GPIO_Pin_2 | GPIO_Pin_3 | GPIO_Pin_4 | GPIO_Pin_5 | GPIO_Pin_6 | GPIO_Pin_7 | GPIO_Pin_8 | GPIO_Pin_9 | GPIO_Pin_10 | GPIO_Pin_11 | GPIO_Pin_12 | GPIO_Pin_13 | GPIO_Pin_14 | GPIO_Pin_15)\n#elif defined(PCBX9DP)\n  #define KEYS_RCC_AHB1Periph           (RCC_AHB1Periph_GPIOA|RCC_AHB1Periph_GPIOB|RCC_AHB1Periph_GPIOC|RCC_AHB1Periph_GPIOD|RCC_AHB1Periph_GPIOE)\n  #define KEYS_GPIOA_PINS               (SWITCHES_GPIO_PIN_C_L)\n  #define KEYS_GPIOB_PINS               (SWITCHES_GPIO_PIN_E_L | SWITCHES_GPIO_PIN_E_H | SWITCHES_GPIO_PIN_A_H)\n  #define KEYS_GPIOC_PINS               (TRIMS_GPIO_PIN_RVD | TRIMS_GPIO_PIN_RVU | TRIMS_GPIO_PIN_RHL | TRIMS_GPIO_PIN_RHR)\n  #define KEYS_GPIOD_PINS               (KEYS_GPIO_PIN_MENU | KEYS_GPIO_PIN_EXIT | KEYS_GPIO_PIN_PAGE | SWITCHES_GPIO_PIN_H)\n  #define KEYS_GPIOE_PINS               (KEYS_GPIO_PIN_PLUS | KEYS_GPIO_PIN_ENTER | KEYS_GPIO_PIN_MINUS | TRIMS_GPIO_PIN_LHR | TRIMS_GPIO_PIN_LHL | TRIMS_GPIO_PIN_LVD | TRIMS_GPIO_PIN_LVU | SWITCHES_GPIO_PIN_F | SWITCHES_GPIO_PIN_A_L | SWITCHES_GPIO_PIN_B_H | SWITCHES_GPIO_PIN_B_L | SWITCHES_GPIO_PIN_C_H | SWITCHES_GPIO_PIN_D_H | SWITCHES_GPIO_PIN_D_L | SWITCHES_GPIO_PIN_G_H | SWITCHES_GPIO_PIN_G_L)\n#elif defined(PCBXLITES)\n  #define KEYS_RCC_AHB1Periph           (RCC_AHB1Periph_GPIOB | RCC_AHB1Periph_GPIOC | RCC_AHB1Periph_GPIOE)\n  #define KEYS_GPIOA_PINS               (GPIO_Pin_5 | GPIO_Pin_6)\n  #define KEYS_GPIOB_PINS               (GPIO_Pin_0 | GPIO_Pin_1 | GPIO_Pin_4 | GPIO_Pin_5)\n  #define KEYS_GPIOC_PINS               (GPIO_Pin_3 | GPIO_Pin_4 | GPIO_Pin_5)\n  #define KEYS_GPIOE_PINS               (GPIO_Pin_0 | GPIO_Pin_1 | GPIO_Pin_2 | GPIO_Pin_3 | GPIO_Pin_5 | GPIO_Pin_7 | GPIO_Pin_8 | GPIO_Pin_10 | GPIO_Pin_11 | GPIO_Pin_12 | GPIO_Pin_13 | GPIO_Pin_14)\n#elif defined(PCBXLITE)\n  #define KEYS_RCC_AHB1Periph           (RCC_AHB1Periph_GPIOB | RCC_AHB1Periph_GPIOC | RCC_AHB1Periph_GPIOE)\n  #define KEYS_GPIOA_PINS               (GPIO_Pin_5 | GPIO_Pin_6)\n  #define KEYS_GPIOB_PINS               (GPIO_Pin_0 | GPIO_Pin_1 | GPIO_Pin_4 | GPIO_Pin_5)\n  #define KEYS_GPIOC_PINS               (GPIO_Pin_4 | GPIO_Pin_5)\n  #define KEYS_GPIOE_PINS               (GPIO_Pin_0 | GPIO_Pin_1 | GPIO_Pin_2 | GPIO_Pin_3 | GPIO_Pin_7 | GPIO_Pin_8 | GPIO_Pin_10 | GPIO_Pin_11 | GPIO_Pin_12 | GPIO_Pin_13 | GPIO_Pin_14)\n#elif defined(RADIO_T12)\n  #define KEYS_RCC_AHB1Periph           (RCC_AHB1Periph_GPIOB | RCC_AHB1Periph_GPIOC | RCC_AHB1Periph_GPIOD | RCC_AHB1Periph_GPIOE)\n  #define KEYS_GPIOA_PINS               GPIO_Pin_5\n  #define KEYS_GPIOC_PINS               (GPIO_Pin_1 | GPIO_Pin_2 | GPIO_Pin_3)\n  #define KEYS_GPIOD_PINS               (GPIO_Pin_2 | GPIO_Pin_3 | GPIO_Pin_7 | GPIO_Pin_11 | GPIO_Pin_14 | GPIO_Pin_15)\n  #define KEYS_GPIOE_PINS               (GPIO_Pin_0 | GPIO_Pin_1 | GPIO_Pin_2 | GPIO_Pin_3 | GPIO_Pin_4 | GPIO_Pin_5 | GPIO_Pin_6 | GPIO_Pin_7 | GPIO_Pin_9  | GPIO_Pin_10 | GPIO_Pin_11 | GPIO_Pin_13 | GPIO_Pin_14 | GPIO_Pin_15)\n#elif defined(RADIO_X7ACCESS)\n  #define KEYS_RCC_AHB1Periph           (RCC_AHB1Periph_GPIOA | RCC_AHB1Periph_GPIOB | RCC_AHB1Periph_GPIOC | RCC_AHB1Periph_GPIOD | RCC_AHB1Periph_GPIOE)\n  #define KEYS_GPIOA_PINS               GPIO_Pin_5\n  #define KEYS_GPIOC_PINS               (GPIO_Pin_1 | GPIO_Pin_2 | GPIO_Pin_3 | GPIO_Pin_13)\n  #define KEYS_GPIOD_PINS               (GPIO_Pin_2 | GPIO_Pin_3 | GPIO_Pin_7 | GPIO_Pin_10 | GPIO_Pin_11 | GPIO_Pin_14 | GPIO_Pin_15)\n  #define KEYS_GPIOE_PINS               (GPIO_Pin_1 | GPIO_Pin_2 | GPIO_Pin_3 | GPIO_Pin_4 | GPIO_Pin_5 | GPIO_Pin_6 | GPIO_Pin_7 | GPIO_Pin_9 | GPIO_Pin_10 | GPIO_Pin_11 | GPIO_Pin_13 | GPIO_Pin_14 | GPIO_Pin_15)\n#elif defined(RADIO_X7)\n  #define KEYS_RCC_AHB1Periph           (RCC_AHB1Periph_GPIOA | RCC_AHB1Periph_GPIOB | RCC_AHB1Periph_GPIOC | RCC_AHB1Periph_GPIOD | RCC_AHB1Periph_GPIOE)\n  #define KEYS_GPIOA_PINS               GPIO_Pin_5\n  #define KEYS_GPIOC_PINS               (GPIO_Pin_1 | GPIO_Pin_2 | GPIO_Pin_3 | GPIO_Pin_13)\n  #define KEYS_GPIOD_PINS               (GPIO_Pin_2 | GPIO_Pin_3 | GPIO_Pin_7 | GPIO_Pin_10 | GPIO_Pin_11 | GPIO_Pin_14 | GPIO_Pin_15)\n  #define KEYS_GPIOE_PINS               (GPIO_Pin_0 | GPIO_Pin_1 | GPIO_Pin_2 | GPIO_Pin_3 | GPIO_Pin_4 | GPIO_Pin_5 | GPIO_Pin_6 | GPIO_Pin_7 | GPIO_Pin_9 | GPIO_Pin_10 | GPIO_Pin_11 | GPIO_Pin_13 | GPIO_Pin_14 | GPIO_Pin_15)\n#elif defined(PCBX9LITES)\n  #define KEYS_RCC_AHB1Periph           (RCC_AHB1Periph_GPIOA | RCC_AHB1Periph_GPIOB | RCC_AHB1Periph_GPIOC | RCC_AHB1Periph_GPIOD | RCC_AHB1Periph_GPIOE)\n  #define KEYS_GPIOA_PINS               (GPIO_Pin_5)\n  #define KEYS_GPIOB_PINS               (GPIO_Pin_0 | GPIO_Pin_1 | GPIO_Pin_4 | GPIO_Pin_5)\n  #define KEYS_GPIOC_PINS               (GPIO_Pin_2 | GPIO_Pin_3 | GPIO_Pin_4 | GPIO_Pin_5 | GPIO_Pin_13)\n  #define KEYS_GPIOD_PINS               (GPIO_Pin_8 | GPIO_Pin_9)\n  #define KEYS_GPIOE_PINS               (GPIO_Pin_0 | GPIO_Pin_1 | GPIO_Pin_2 | GPIO_Pin_3 | GPIO_Pin_7 | GPIO_Pin_8 | GPIO_Pin_9 | GPIO_Pin_10 | GPIO_Pin_11 | GPIO_Pin_12 | GPIO_Pin_13 | GPIO_Pin_14)\n#elif defined(PCBX9LITE)\n  #define KEYS_RCC_AHB1Periph           (RCC_AHB1Periph_GPIOA | RCC_AHB1Periph_GPIOB | RCC_AHB1Periph_GPIOC | RCC_AHB1Periph_GPIOD | RCC_AHB1Periph_GPIOE)\n  #define KEYS_GPIOA_PINS               (GPIO_Pin_5)\n  #define KEYS_GPIOB_PINS               (GPIO_Pin_0 | GPIO_Pin_1 | GPIO_Pin_4 | GPIO_Pin_5)\n  #define KEYS_GPIOC_PINS               (GPIO_Pin_4 | GPIO_Pin_5 | GPIO_Pin_13)\n  #define KEYS_GPIOD_PINS               (GPIO_Pin_8 | GPIO_Pin_9)\n  #define KEYS_GPIOE_PINS               (GPIO_Pin_0 | GPIO_Pin_1 | GPIO_Pin_2 | GPIO_Pin_3 | GPIO_Pin_7 | GPIO_Pin_8 | GPIO_Pin_9 | GPIO_Pin_10 | GPIO_Pin_11 | GPIO_Pin_12 | GPIO_Pin_13 | GPIO_Pin_14)\n#else\n  #define KEYS_RCC_AHB1Periph           (RCC_AHB1Periph_GPIOA|RCC_AHB1Periph_GPIOB|RCC_AHB1Periph_GPIOC|RCC_AHB1Periph_GPIOD|RCC_AHB1Periph_GPIOE)\n  #define KEYS_GPIOA_PINS               (SWITCHES_GPIO_PIN_C_L)\n  #define KEYS_GPIOB_PINS               (SWITCHES_GPIO_PIN_E_L | SWITCHES_GPIO_PIN_E_H | SWITCHES_GPIO_PIN_A_H | SWITCHES_GPIO_PIN_D_L)\n  #define KEYS_GPIOC_PINS               (TRIMS_GPIO_PIN_RVD | TRIMS_GPIO_PIN_RVU | TRIMS_GPIO_PIN_RHL | TRIMS_GPIO_PIN_RHR)\n  #define KEYS_GPIOD_PINS               (KEYS_GPIO_PIN_MENU | KEYS_GPIO_PIN_EXIT | KEYS_GPIO_PIN_PAGE)\n  #define KEYS_GPIOE_PINS               (KEYS_GPIO_PIN_PLUS | KEYS_GPIO_PIN_ENTER | KEYS_GPIO_PIN_MINUS | TRIMS_GPIO_PIN_LHR | TRIMS_GPIO_PIN_LHL | TRIMS_GPIO_PIN_LVD | TRIMS_GPIO_PIN_LVU | SWITCHES_GPIO_PIN_F | SWITCHES_GPIO_PIN_A_L | SWITCHES_GPIO_PIN_B_H | SWITCHES_GPIO_PIN_B_L | SWITCHES_GPIO_PIN_C_H | SWITCHES_GPIO_PIN_D_H | SWITCHES_GPIO_PIN_G_H | SWITCHES_GPIO_PIN_G_L | SWITCHES_GPIO_PIN_H)\n#endif\n\n// ADC\n#define ADC_MAIN                        ADC1\n#define ADC_DMA                         DMA2\n#define ADC_DMA_SxCR_CHSEL              0\n#define ADC_DMA_Stream                  DMA2_Stream4\n#define ADC_SET_DMA_FLAGS()             ADC_DMA->HIFCR = (DMA_HIFCR_CTCIF4 | DMA_HIFCR_CHTIF4 | DMA_HIFCR_CTEIF4 | DMA_HIFCR_CDMEIF4 | DMA_HIFCR_CFEIF4)\n#define ADC_TRANSFER_COMPLETE()         (ADC_DMA->HISR & DMA_HISR_TCIF4)\n#define ADC_SAMPTIME                    2   // sample time = 28 cycles\n#if defined(PCBX9E)\n  #define HARDWARE_POT1\n  #define HARDWARE_POT2\n  #define HARDWARE_POT3\n  #define HARDWARE_POT4\n  #define ADC_RCC_AHB1Periph            (RCC_AHB1Periph_GPIOA | RCC_AHB1Periph_GPIOB | RCC_AHB1Periph_GPIOC | RCC_AHB1Periph_GPIOF | RCC_AHB1Periph_DMA2)\n  #define ADC_RCC_APB1Periph            0\n  #define ADC_RCC_APB2Periph            (RCC_APB2Periph_ADC1 | RCC_APB2Periph_ADC3)\n  #define ADC_GPIO_PIN_STICK_RV         GPIO_Pin_0  // PA.00\n  #define ADC_GPIO_PIN_STICK_RH         GPIO_Pin_1  // PA.01\n  #define ADC_GPIO_PIN_STICK_LH         GPIO_Pin_2  // PA.02\n  #define ADC_GPIO_PIN_STICK_LV         GPIO_Pin_3  // PA.03\n  #define ADC_CHANNEL_STICK_RV          ADC_Channel_0  // ADC1_IN0\n  #define ADC_CHANNEL_STICK_RH          ADC_Channel_1  // ADC1_IN1\n  #define ADC_CHANNEL_STICK_LH          ADC_Channel_2  // ADC1_IN2\n  #define ADC_CHANNEL_STICK_LV          ADC_Channel_3  // ADC1_IN3\n  #define ADC_GPIO_PIN_POT1             GPIO_Pin_8  // PF.08\n  #define ADC_GPIO_PIN_POT2             GPIO_Pin_0  // PB.00\n  #define ADC_GPIO_PIN_POT3             GPIO_Pin_5  // PC.05\n  #define ADC_GPIO_PIN_POT4             GPIO_Pin_4  // PC.04\n  #define ADC_GPIO_PIN_SLIDER1          GPIO_Pin_10 // PF.10\n  #define ADC_GPIO_PIN_SLIDER2          GPIO_Pin_9  // PF.09\n  #define ADC_GPIO_PIN_SLIDER3          GPIO_Pin_6  // PA.06\n  #define ADC_GPIO_PIN_SLIDER4          GPIO_Pin_1  // PB.01\n  #define ADC_GPIO_PIN_BATT             GPIO_Pin_0  // PC.00\n  #define ADC_GPIOA_PINS                (ADC_GPIO_PIN_STICK_RV | ADC_GPIO_PIN_STICK_RH | ADC_GPIO_PIN_STICK_LH | ADC_GPIO_PIN_STICK_LV | ADC_GPIO_PIN_SLIDER3)\n  #define ADC_GPIOB_PINS                (ADC_GPIO_PIN_POT2 | ADC_GPIO_PIN_SLIDER4)\n  #define ADC_GPIOC_PINS                (ADC_GPIO_PIN_POT3 | ADC_GPIO_PIN_POT4 | ADC_GPIO_PIN_SLIDER1 | ADC_GPIO_PIN_SLIDER2 | ADC_GPIO_PIN_BATT)\n  #define ADC_GPIOF_PINS                (ADC_GPIO_PIN_POT1 | ADC_GPIO_PIN_SLIDER1 | ADC_GPIO_PIN_SLIDER2)\n  #define ADC_CHANNEL_POT1              ADC_Channel_6  // ADC3_IN6\n  #define ADC_CHANNEL_POT2              ADC_Channel_8  // ADC1_IN8\n  #define ADC_CHANNEL_POT3              ADC_Channel_15 // ADC1_IN15\n  #define ADC_CHANNEL_POT4              ADC_Channel_14 // ADC1_IN14\n  #define ADC_CHANNEL_SLIDER1           ADC_Channel_8  // ADC3_IN8\n  #define ADC_CHANNEL_SLIDER2           ADC_Channel_7  // ADC3_IN7\n  #define ADC_CHANNEL_SLIDER3           ADC_Channel_6  // ADC1_IN6\n  #define ADC_CHANNEL_SLIDER4           ADC_Channel_9  // ADC1_IN9\n  #define ADC_CHANNEL_BATT              ADC_Channel_10 // ADC1_IN10\n  #define ADC_EXT                       ADC3\n  #define ADC_EXT_DMA                   DMA2\n  #define ADC_EXT_DMA_Stream            DMA2_Stream0\n  #define ADC_EXT_SET_DMA_FLAGS()       ADC_DMA->LIFCR = (DMA_LIFCR_CTCIF0 | DMA_LIFCR_CHTIF0 | DMA_LIFCR_CTEIF0 | DMA_LIFCR_CDMEIF0 | DMA_LIFCR_CFEIF0)\n  #define ADC_EXT_TRANSFER_COMPLETE()   (ADC_DMA->LISR & DMA_LISR_TCIF0)\n  #define ADC_EXT_SAMPTIME              3    // sample time = 56 cycles\n  #define ADC_VREF_PREC2                200\n#elif defined(PCBX9DP)\n  #define HARDWARE_POT1\n  #define HARDWARE_POT2\n  #define HARDWARE_POT3\n  #define ADC_RCC_AHB1Periph            (RCC_AHB1Periph_GPIOA | RCC_AHB1Periph_GPIOB | RCC_AHB1Periph_GPIOC | RCC_AHB1Periph_DMA2)\n  #define ADC_RCC_APB1Periph            0\n  #define ADC_RCC_APB2Periph            RCC_APB2Periph_ADC1\n  #define ADC_GPIO_PIN_STICK_RV         GPIO_Pin_0  // PA.00\n  #define ADC_GPIO_PIN_STICK_RH         GPIO_Pin_1  // PA.01\n  #define ADC_GPIO_PIN_STICK_LH         GPIO_Pin_2  // PA.02\n  #define ADC_GPIO_PIN_STICK_LV         GPIO_Pin_3  // PA.03\n  #define ADC_CHANNEL_STICK_RV          ADC_Channel_0  // ADC1_IN0\n  #define ADC_CHANNEL_STICK_RH          ADC_Channel_1  // ADC1_IN1\n  #define ADC_CHANNEL_STICK_LH          ADC_Channel_2  // ADC1_IN2\n  #define ADC_CHANNEL_STICK_LV          ADC_Channel_3  // ADC1_IN3\n  #define ADC_GPIO_PIN_POT1             GPIO_Pin_6  // PA.06\n  #define ADC_GPIO_PIN_POT2             GPIO_Pin_0  // PB.00\n  #if PCBREV < 2019\n    #define ADC_GPIO_PIN_POT3           GPIO_Pin_1  // PB.01\n    #define ADC_GPIOB_PINS              (ADC_GPIO_PIN_POT2 | ADC_GPIO_PIN_POT3)\n    #define ADC_CHANNEL_POT3            ADC_Channel_9\n    #define ADC_VREF_PREC2              330\n  #else\n    #define ADC_GPIOB_PINS              (ADC_GPIO_PIN_POT2)\n    #define ADC_CHANNEL_POT3            0\n    #define ADC_VREF_PREC2              300\n  #endif\n  #define ADC_GPIO_PIN_SLIDER1          GPIO_Pin_4  // PC.04\n  #define ADC_GPIO_PIN_SLIDER2          GPIO_Pin_5  // PC.05\n  #define ADC_GPIO_PIN_BATT             GPIO_Pin_0  // PC.00\n  #define ADC_GPIOA_PINS                (ADC_GPIO_PIN_STICK_RV | ADC_GPIO_PIN_STICK_RH | ADC_GPIO_PIN_STICK_LH | ADC_GPIO_PIN_STICK_LV | ADC_GPIO_PIN_POT1)\n  #define ADC_GPIOC_PINS                (ADC_GPIO_PIN_SLIDER1 | ADC_GPIO_PIN_SLIDER2 | ADC_GPIO_PIN_BATT)\n  #define ADC_CHANNEL_POT1              ADC_Channel_6\n  #define ADC_CHANNEL_POT2              ADC_Channel_8\n  #define ADC_CHANNEL_SLIDER1           ADC_Channel_14\n  #define ADC_CHANNEL_SLIDER2           ADC_Channel_15\n  #define ADC_CHANNEL_BATT              ADC_Channel_10\n#elif defined(PCBXLITE)\n  #define HARDWARE_POT1\n  #define HARDWARE_POT2\n  #define ADC_RCC_AHB1Periph            (RCC_AHB1Periph_GPIOA | RCC_AHB1Periph_GPIOC | RCC_AHB1Periph_DMA2)\n  #define ADC_RCC_APB1Periph            RCC_APB1Periph_TIM5\n  #define ADC_RCC_APB2Periph            RCC_APB2Periph_ADC1\n  #define ADC_GPIO_PIN_STICK_RV         GPIO_Pin_0  // PA.00\n  #define ADC_GPIO_PIN_STICK_RH         GPIO_Pin_1  // PA.01\n  #define ADC_GPIO_PIN_STICK_LV         GPIO_Pin_2  // PA.02\n  #define ADC_GPIO_PIN_STICK_LH         GPIO_Pin_3  // PA.03\n  #define ADC_GPIO_PIN_POT1             GPIO_Pin_1  // PC.01\n  #define ADC_GPIO_PIN_POT2             GPIO_Pin_2  // PC.02\n  #define ADC_GPIO_PIN_BATT             GPIO_Pin_0  // PC.00\n  #define PWM_TIMER                     TIM5\n  #define PWM_GPIO                      GPIOA\n  #define PWM_GPIO_AF                   GPIO_AF_TIM5\n  #define PWM_IRQHandler                TIM5_IRQHandler\n  #define PWM_IRQn                      TIM5_IRQn\n  #define PWM_GPIOA_PINS                (GPIO_Pin_0 | GPIO_Pin_1 | GPIO_Pin_2 | GPIO_Pin_3)\n  #define ADC_GPIOA_PINS                (STICKS_PWM_ENABLED() ? 0 : (GPIO_Pin_0 | GPIO_Pin_1 | GPIO_Pin_2 | GPIO_Pin_3))\n  #define ADC_GPIOC_PINS                (GPIO_Pin_0 | GPIO_Pin_1 | GPIO_Pin_2)\n  #define ADC_CHANNEL_STICK_RV          ADC_Channel_3  // ADC1_IN3\n  #define ADC_CHANNEL_STICK_RH          ADC_Channel_2  // ADC1_IN2\n  #define ADC_CHANNEL_STICK_LV          ADC_Channel_1  // ADC1_IN1\n  #define ADC_CHANNEL_STICK_LH          ADC_Channel_0  // ADC1_IN0\n  #define ADC_CHANNEL_POT1              ADC_Channel_11 // ADC1_IN11\n  #define ADC_CHANNEL_POT2              ADC_Channel_12 // ADC1_IN12\n  #define ADC_CHANNEL_BATT              ADC_Channel_10 // ADC1_IN10\n  #define ADC_VREF_PREC2                330\n#elif defined(PCBX7)\n  #define HARDWARE_POT1\n  #define HARDWARE_POT2\n  #define ADC_RCC_AHB1Periph            (RCC_AHB1Periph_GPIOA | RCC_AHB1Periph_GPIOB | RCC_AHB1Periph_GPIOC | RCC_AHB1Periph_DMA2)\n  #define ADC_RCC_APB1Periph            0\n  #define ADC_RCC_APB2Periph            RCC_APB2Periph_ADC1\n  #define ADC_GPIO_PIN_STICK_RV         GPIO_Pin_0  // PA.00\n  #define ADC_GPIO_PIN_STICK_RH         GPIO_Pin_1  // PA.01\n  #define ADC_GPIO_PIN_STICK_LV         GPIO_Pin_2  // PA.02\n  #define ADC_GPIO_PIN_STICK_LH         GPIO_Pin_3  // PA.03\n  #define ADC_CHANNEL_STICK_RV          ADC_Channel_0  // ADC1_IN0\n  #define ADC_CHANNEL_STICK_RH          ADC_Channel_1  // ADC1_IN1\n  #define ADC_CHANNEL_STICK_LV          ADC_Channel_2  // ADC1_IN2\n  #define ADC_CHANNEL_STICK_LH          ADC_Channel_3  // ADC1_IN3\n  #define ADC_GPIO_PIN_POT1             GPIO_Pin_0  // PB.00\n  #define ADC_GPIO_PIN_POT2             GPIO_Pin_6  // PA.06\n  #define ADC_GPIO_PIN_BATT             GPIO_Pin_0  // PC.00\n  #define ADC_GPIOA_PINS                (ADC_GPIO_PIN_STICK_RV | ADC_GPIO_PIN_STICK_RH | ADC_GPIO_PIN_STICK_LH | ADC_GPIO_PIN_STICK_LV | ADC_GPIO_PIN_POT2)\n  #define ADC_GPIOB_PINS                ADC_GPIO_PIN_POT1\n  #define ADC_GPIOC_PINS                ADC_GPIO_PIN_BATT\n  #define ADC_CHANNEL_POT1              ADC_Channel_8\n  #define ADC_CHANNEL_POT2              ADC_Channel_6\n  #define ADC_CHANNEL_BATT              ADC_Channel_10\n  #define ADC_VREF_PREC2                330\n#elif defined(PCBX9LITE)\n  #define HARDWARE_POT1\n  #define ADC_RCC_AHB1Periph            (RCC_AHB1Periph_GPIOA | RCC_AHB1Periph_GPIOC | RCC_AHB1Periph_DMA2)\n  #define ADC_RCC_APB1Periph            0\n  #define ADC_RCC_APB2Periph            RCC_APB2Periph_ADC1\n  #define ADC_GPIO_PIN_STICK_LH         GPIO_Pin_0  // PA.00\n  #define ADC_GPIO_PIN_STICK_LV         GPIO_Pin_1  // PA.01\n  #define ADC_GPIO_PIN_STICK_RV         GPIO_Pin_2  // PA.02\n  #define ADC_GPIO_PIN_STICK_RH         GPIO_Pin_3  // PA.03\n  #define ADC_CHANNEL_STICK_LH          ADC_Channel_0  // ADC1_IN0\n  #define ADC_CHANNEL_STICK_LV          ADC_Channel_1  // ADC1_IN1\n  #define ADC_CHANNEL_STICK_RV          ADC_Channel_2  // ADC1_IN2\n  #define ADC_CHANNEL_STICK_RH          ADC_Channel_3  // ADC1_IN3\n  #define ADC_GPIO_PIN_POT1             GPIO_Pin_1  // PC.01\n  #define ADC_GPIO_PIN_BATT             GPIO_Pin_0  // PC.00\n  #define ADC_GPIOA_PINS                (GPIO_Pin_0 | GPIO_Pin_1 | GPIO_Pin_2 | GPIO_Pin_3)\n  #define ADC_GPIOC_PINS                (GPIO_Pin_0 | GPIO_Pin_1)\n  #define ADC_CHANNEL_POT1              ADC_Channel_11 // ADC1_IN11\n  #define ADC_CHANNEL_BATT              ADC_Channel_10 // ADC1_IN10\n  #define ADC_VREF_PREC2                300\n#else\n  #define HARDWARE_POT1\n  #define HARDWARE_POT2\n  #define ADC_RCC_AHB1Periph            (RCC_AHB1Periph_GPIOA | RCC_AHB1Periph_GPIOB | RCC_AHB1Periph_GPIOC | RCC_AHB1Periph_DMA2)\n  #define ADC_RCC_APB1Periph            0\n  #define ADC_RCC_APB2Periph            RCC_APB2Periph_ADC1\n  #define ADC_GPIO_PIN_STICK_RV         GPIO_Pin_0  // PA.00\n  #define ADC_GPIO_PIN_STICK_RH         GPIO_Pin_1  // PA.01\n  #define ADC_GPIO_PIN_STICK_LH         GPIO_Pin_2  // PA.02\n  #define ADC_GPIO_PIN_STICK_LV         GPIO_Pin_3  // PA.03\n  #define ADC_CHANNEL_STICK_RV          ADC_Channel_0  // ADC1_IN0\n  #define ADC_CHANNEL_STICK_RH          ADC_Channel_1  // ADC1_IN1\n  #define ADC_CHANNEL_STICK_LH          ADC_Channel_2  // ADC1_IN2\n  #define ADC_CHANNEL_STICK_LV          ADC_Channel_3  // ADC1_IN3\n  #define ADC_GPIO_PIN_POT1             GPIO_Pin_6  // PA.06\n  #define ADC_GPIO_PIN_POT2             GPIO_Pin_0  // PB.00\n  #define ADC_GPIO_PIN_SLIDER1          GPIO_Pin_4  // PC.04\n  #define ADC_GPIO_PIN_SLIDER2          GPIO_Pin_5  // PC.05\n  #define ADC_GPIO_PIN_BATT             GPIO_Pin_0  // PC.00\n  #define ADC_GPIOA_PINS                (ADC_GPIO_PIN_STICK_RV | ADC_GPIO_PIN_STICK_RH | ADC_GPIO_PIN_STICK_LH | ADC_GPIO_PIN_STICK_LV | ADC_GPIO_PIN_POT1)\n  #define ADC_GPIOB_PINS                (ADC_GPIO_PIN_POT2)\n  #define ADC_GPIOC_PINS                (ADC_GPIO_PIN_SLIDER1 | ADC_GPIO_PIN_SLIDER2 | ADC_GPIO_PIN_BATT)\n  #define ADC_CHANNEL_POT1              ADC_Channel_6\n  #define ADC_CHANNEL_POT2              ADC_Channel_8\n  #define ADC_CHANNEL_POT3              ADC_Channel_9\n  #define ADC_CHANNEL_SLIDER1           ADC_Channel_14\n  #define ADC_CHANNEL_SLIDER2           ADC_Channel_15\n  #define ADC_CHANNEL_BATT              ADC_Channel_10\n  #define ADC_VREF_PREC2                330\n#endif\n\n// PWR and LED driver\n#define PWR_RCC_AHB1Periph              (RCC_AHB1Periph_GPIOA | RCC_AHB1Periph_GPIOB | RCC_AHB1Periph_GPIOC | RCC_AHB1Periph_GPIOD | RCC_AHB1Periph_GPIOE)\n\n#if defined(PCBX9LITE)\n  #define PWR_SWITCH_GPIO               GPIOA\n  #define PWR_SWITCH_GPIO_PIN           GPIO_Pin_7  // PA.07\n  #define PWR_ON_GPIO                   GPIOA\n  #define PWR_ON_GPIO_PIN               GPIO_Pin_6  // PA.06\n#elif defined(PCBXLITE)\n  #define PWR_SWITCH_GPIO               GPIOA\n  #define PWR_SWITCH_GPIO_PIN           GPIO_Pin_7  // PA.07\n  #define PWR_ON_GPIO                   GPIOE\n  #define PWR_ON_GPIO_PIN               GPIO_Pin_9  // PE.09\n#else\n  #define PWR_SWITCH_GPIO               GPIOD\n  #define PWR_SWITCH_GPIO_PIN           GPIO_Pin_1  // PD.01\n  #define PWR_ON_GPIO                   GPIOD\n  #define PWR_ON_GPIO_PIN               GPIO_Pin_0  // PD.00\n#endif\n\n#if defined(RADIO_X9DP2019)\n  #define STATUS_LEDS\n  #define GPIO_LED_GPIO_ON              GPIO_ResetBits\n  #define GPIO_LED_GPIO_OFF             GPIO_SetBits\n  #define LED_RED_GPIO                  GPIOA\n  #define LED_RED_GPIO_PIN              GPIO_Pin_13 // PA.13\n#elif defined(PCBXLITE)\n  #define STATUS_LEDS\n  #define GPIO_LED_GPIO_ON              GPIO_ResetBits\n  #define GPIO_LED_GPIO_OFF             GPIO_SetBits\n  #define LED_BLUE_GPIO                 GPIOE\n  #define LED_BLUE_GPIO_PIN             GPIO_Pin_6  // PE.06\n  #define LED_RED_GPIO                  GPIOE\n  #define LED_RED_GPIO_PIN              GPIO_Pin_4  // PE.04\n  #define LED_GREEN_GPIO                GPIOE\n  #define LED_GREEN_GPIO_PIN            GPIO_Pin_5  // PE.05\n#elif defined(PCBX7ACCESS)\n  #define STATUS_LEDS\n  #define GPIO_LED_GPIO_ON              GPIO_SetBits\n  #define GPIO_LED_GPIO_OFF             GPIO_ResetBits\n  #define LED_BLUE_GPIO                 GPIOB\n  #define LED_BLUE_GPIO_PIN             GPIO_Pin_1  // PB.01\n  #define LED_RED_GPIO                  GPIOC\n  #define LED_RED_GPIO_PIN              GPIO_Pin_4  // PC.04\n#elif defined(PCBX7)\n  #define STATUS_LEDS\n  #define GPIO_LED_GPIO_ON              GPIO_SetBits\n  #define GPIO_LED_GPIO_OFF             GPIO_ResetBits\n  #define LED_GREEN_GPIO                GPIOC\n  #define LED_GREEN_GPIO_PIN            GPIO_Pin_4  // PC.04\n  #define LED_RED_GPIO                  GPIOC\n  #define LED_RED_GPIO_PIN              GPIO_Pin_5  // PC.05\n  #define LED_BLUE_GPIO                 GPIOB\n  #define LED_BLUE_GPIO_PIN             GPIO_Pin_1  // PB.01\n#elif defined(PCBX9LITES)\n  #define STATUS_LEDS\n  #define GPIO_LED_GPIO_ON              GPIO_SetBits\n  #define GPIO_LED_GPIO_OFF             GPIO_ResetBits\n  #define LED_RED_GPIO                  GPIOE\n  #define LED_RED_GPIO_PIN              GPIO_Pin_5  // PE.05\n  #define LED_BLUE_GPIO                 GPIOE\n  #define LED_BLUE_GPIO_PIN             GPIO_Pin_6  // PE.06\n#elif defined(PCBX9LITE)\n  #define STATUS_LEDS\n  #define GPIO_LED_GPIO_ON              GPIO_SetBits\n  #define GPIO_LED_GPIO_OFF             GPIO_ResetBits\n  #define LED_RED_GPIO                  GPIOE\n  #define LED_RED_GPIO_PIN              GPIO_Pin_5  // PE.05\n  #define LED_GREEN_GPIO                GPIOE\n  #define LED_GREEN_GPIO_PIN            GPIO_Pin_4  // PE.04\n  #define LED_BLUE_GPIO                 GPIOE\n  #define LED_BLUE_GPIO_PIN             GPIO_Pin_6  // PE.06\n#endif\n\n// Internal Module\n#if defined(PCBXLITE)\n#define EXTERNAL_ANTENNA\n#endif\n#if defined(PCBXLITE) || defined(PCBX9LITE)\n  #define INTMODULE_RCC_APB1Periph      0\n  #define INTMODULE_RCC_APB2Periph      RCC_APB2Periph_USART1\n  #if defined(PCBXLITES) || defined(PCBX9LITE)\n    #define INTMODULE_RCC_AHB1Periph    (RCC_AHB1Periph_GPIOA | RCC_AHB1Periph_GPIOB | RCC_AHB1Periph_DMA2)\n    #define INTMODULE_PWR_GPIO          GPIOA\n    #define INTMODULE_PWR_GPIO_PIN      GPIO_Pin_15 // PA.15\n  #else\n    #define INTMODULE_RCC_AHB1Periph    (RCC_AHB1Periph_GPIOB | RCC_AHB1Periph_GPIOD | RCC_AHB1Periph_DMA2)\n    #define INTMODULE_PWR_GPIO          GPIOD\n    #define INTMODULE_PWR_GPIO_PIN      GPIO_Pin_9  // PD.09\n  #endif\n  #define INTMODULE_GPIO                GPIOB\n  #define INTMODULE_TX_GPIO_PIN         GPIO_Pin_6  // PB.06\n  #define INTMODULE_RX_GPIO_PIN         GPIO_Pin_7  // PB.07\n  #define INTMODULE_GPIO_PinSource_TX   GPIO_PinSource6\n  #define INTMODULE_GPIO_PinSource_RX   GPIO_PinSource7\n  #define INTMODULE_USART               USART1\n  #define INTMODULE_GPIO_AF             GPIO_AF_USART1\n  #define INTMODULE_USART_IRQHandler    USART1_IRQHandler\n  #define INTMODULE_USART_IRQn          USART1_IRQn\n  #define INTMODULE_DMA_STREAM          DMA2_Stream7\n  #define INTMODULE_DMA_STREAM_IRQ         DMA2_Stream7_IRQn\n  #define INTMODULE_DMA_STREAM_IRQHandler  DMA2_Stream7_IRQHandler\n  #define INTMODULE_DMA_FLAG_TC         DMA_IT_TCIF7\n  #define INTMODULE_DMA_CHANNEL         DMA_Channel_4\n  #if defined(PCBXLITES)\n    #define INTMODULE_BOOTCMD_GPIO      GPIOC\n    #define INTMODULE_BOOTCMD_GPIO_PIN  GPIO_Pin_8  // PC.08\n  #endif\n#elif defined(RADIO_X9DP2019)\n  #define INTMODULE_RCC_APB1Periph      0\n  #define INTMODULE_RCC_APB2Periph      RCC_APB2Periph_USART1\n  #define INTMODULE_RCC_AHB1Periph      (RCC_AHB1Periph_GPIOA | RCC_AHB1Periph_GPIOB | RCC_AHB1Periph_DMA2)\n  #define INTMODULE_PWR_GPIO            GPIOA\n  #define INTMODULE_PWR_GPIO_PIN        GPIO_Pin_7  // PA.07\n  #define INTMODULE_GPIO                GPIOB\n  #define INTMODULE_TX_GPIO_PIN         GPIO_Pin_6  // PB.06\n  #define INTMODULE_RX_GPIO_PIN         GPIO_Pin_7  // PB.07\n  #define INTMODULE_GPIO_PinSource_TX   GPIO_PinSource6\n  #define INTMODULE_GPIO_PinSource_RX   GPIO_PinSource7\n  #define INTMODULE_USART               USART1\n  #define INTMODULE_GPIO_AF             GPIO_AF_USART1\n  #define INTMODULE_USART_IRQHandler    USART1_IRQHandler\n  #define INTMODULE_USART_IRQn          USART1_IRQn\n  #define INTMODULE_DMA_STREAM          DMA2_Stream7\n  #define INTMODULE_DMA_STREAM_IRQ         DMA2_Stream7_IRQn\n  #define INTMODULE_DMA_STREAM_IRQHandler  DMA2_Stream7_IRQHandler\n  #define INTMODULE_DMA_FLAG_TC         DMA_IT_TCIF7\n  #define INTMODULE_DMA_CHANNEL         DMA_Channel_4\n#elif defined(RADIO_X7ACCESS)\n  #define INTMODULE_RCC_APB1Periph      0\n  #define INTMODULE_RCC_APB2Periph      RCC_APB2Periph_USART1\n  #define INTMODULE_RCC_AHB1Periph      (RCC_AHB1Periph_GPIOC | RCC_AHB1Periph_GPIOB | RCC_AHB1Periph_DMA2)\n  #define INTMODULE_PWR_GPIO            GPIOC\n  #define INTMODULE_PWR_GPIO_PIN        GPIO_Pin_5  // PC.05\n  #define INTMODULE_GPIO                GPIOB\n  #define INTMODULE_TX_GPIO_PIN         GPIO_Pin_6  // PB.06\n  #define INTMODULE_RX_GPIO_PIN         GPIO_Pin_7  // PB.07\n  #define INTMODULE_GPIO_PinSource_TX   GPIO_PinSource6\n  #define INTMODULE_GPIO_PinSource_RX   GPIO_PinSource7\n  #define INTMODULE_USART               USART1\n  #define INTMODULE_GPIO_AF             GPIO_AF_USART1\n  #define INTMODULE_USART_IRQHandler    USART1_IRQHandler\n  #define INTMODULE_USART_IRQn          USART1_IRQn\n  #define INTMODULE_DMA_STREAM          DMA2_Stream7\n  #define INTMODULE_DMA_STREAM_IRQ         DMA2_Stream7_IRQn\n  #define INTMODULE_DMA_STREAM_IRQHandler  DMA2_Stream7_IRQHandler\n  #define INTMODULE_DMA_FLAG_TC         DMA_IT_TCIF7\n  #define INTMODULE_DMA_CHANNEL         DMA_Channel_4\n#elif defined(PCBX9E) || defined(PCBX9DP) || defined(RADIO_X7)\n  #define INTMODULE_PULSES\n  #define INTMODULE_RCC_AHB1Periph      (RCC_AHB1Periph_GPIOA | RCC_AHB1Periph_GPIOC | RCC_AHB1Periph_DMA2)\n  #define INTMODULE_RCC_APB1Periph      0\n  #define INTMODULE_RCC_APB2Periph      RCC_APB2Periph_TIM1\n  #define INTMODULE_PWR_GPIO            GPIOC\n  #define INTMODULE_PWR_GPIO_PIN        GPIO_Pin_6  // PC.06\n  #define INTMODULE_TX_GPIO             GPIOA\n  #define INTMODULE_TX_GPIO_PIN         GPIO_Pin_10 // PA.10\n  #define INTMODULE_TX_GPIO_PinSource   GPIO_PinSource10\n  #define INTMODULE_TIMER               TIM1\n  #define INTMODULE_TIMER_CC_IRQn       TIM1_CC_IRQn\n  #define INTMODULE_TIMER_CC_IRQHandler TIM1_CC_IRQHandler\n  #define INTMODULE_TX_GPIO_AF          GPIO_AF_TIM1\n  #define INTMODULE_DMA_CHANNEL         DMA_Channel_6\n  #define INTMODULE_DMA_STREAM          DMA2_Stream5\n  #define INTMODULE_DMA_STREAM_IRQn     DMA2_Stream5_IRQn\n  #define INTMODULE_DMA_STREAM_IRQHandler DMA2_Stream5_IRQHandler\n  #define INTMODULE_DMA_FLAG_TC         DMA_IT_TCIF5\n  #define INTMODULE_TIMER_FREQ          (PERI2_FREQUENCY * TIMER_MULT_APB2)\n#elif defined(RADIO_T12)\n  #define INTMODULE_RCC_AHB1Periph        (RCC_AHB1Periph_GPIOC | RCC_AHB1Periph_GPIOB | RCC_AHB1Periph_DMA1)\n  #define INTMODULE_PWR_GPIO              GPIOC\n  #define INTMODULE_PWR_GPIO_PIN          GPIO_Pin_6  // PC.06\n  #define INTMODULE_GPIO                  GPIOB\n  #define INTMODULE_TX_GPIO_PIN           GPIO_Pin_10  // PB.10\n  #define INTMODULE_RX_GPIO_PIN           GPIO_Pin_11  // PB.11\n  #define INTMODULE_GPIO_PinSource_TX     GPIO_PinSource10\n  #define INTMODULE_GPIO_PinSource_RX     GPIO_PinSource11\n  #define INTMODULE_USART                 USART3\n  #define INTMODULE_GPIO_AF               GPIO_AF_USART3\n  #define INTMODULE_USART_IRQn            USART3_IRQn\n  #define INTMODULE_USART_IRQHandler      USART3_IRQHandler\n  #define INTMODULE_DMA_STREAM            DMA1_Stream3\n  #define INTMODULE_DMA_STREAM_IRQ        DMA1_Stream3_IRQn\n  #define INTMODULE_DMA_STREAM_IRQHandler DMA1_Stream3_IRQHandler\n  #define INTMODULE_DMA_FLAG_TC           DMA_IT_TCIF3\n  #define INTMODULE_DMA_CHANNEL           DMA_Channel_4\n  #define INTMODULE_RCC_APB1Periph        RCC_APB1Periph_TIM2\n  #define INTMODULE_RCC_APB2Periph        RCC_APB1Periph_USART3\n  #define INTMODULE_TIMER                 TIM2\n  #define INTMODULE_TIMER_IRQn            TIM2_IRQn\n  #define INTMODULE_TIMER_IRQHandler      TIM2_IRQHandler\n  #define INTMODULE_TIMER_CC_IRQn         TIM2_CC_IRQn\n  #define INTMODULE_TIMER_CC_IRQHandler   TIM2_CC_IRQHandler\n  #define INTMODULE_TIMER_FREQ            (PERI2_FREQUENCY * TIMER_MULT_APB2)\n#else\n  #define INTMODULE_PULSES\n  #define INTMODULE_RCC_AHB1Periph      (RCC_AHB1Periph_GPIOA | RCC_AHB1Periph_GPIOD | RCC_AHB1Periph_DMA2)\n  #define INTMODULE_RCC_APB1Periph      0\n  #define INTMODULE_RCC_APB2Periph      RCC_APB2Periph_TIM1\n  #define INTMODULE_PWR_GPIO            GPIOD\n  #define INTMODULE_PWR_GPIO_PIN        GPIO_Pin_15 // PD.15\n  #define INTMODULE_TX_GPIO             GPIOA\n  #define INTMODULE_TX_GPIO_PIN         GPIO_Pin_10 // PA.10\n  #define INTMODULE_TX_GPIO_PinSource   GPIO_PinSource10\n  #define INTMODULE_TIMER               TIM1\n  #define INTMODULE_TIMER_CC_IRQn       TIM1_CC_IRQn\n  #define INTMODULE_TIMER_CC_IRQHandler TIM1_CC_IRQHandler\n  #define INTMODULE_TX_GPIO_AF          GPIO_AF_TIM1\n  #define INTMODULE_DMA_CHANNEL         DMA_Channel_6\n  #define INTMODULE_DMA_STREAM          DMA2_Stream5\n  #define INTMODULE_DMA_STREAM_IRQn     DMA2_Stream5_IRQn\n  #define INTMODULE_DMA_STREAM_IRQHandler DMA2_Stream5_IRQHandler\n  #define INTMODULE_DMA_FLAG_TC         DMA_IT_TCIF5\n  #define INTMODULE_TIMER_FREQ          (PERI2_FREQUENCY * TIMER_MULT_APB2)\n#endif\n\n// External Module\n#if defined(PCBXLITE) || defined(PCBX9LITE) || defined(RADIO_X9DP2019) || defined(PCBX7ACCESS)\n  #define EXTMODULE_RCC_APB2Periph      (RCC_APB2Periph_TIM8 | RCC_APB2Periph_USART6)\n  #if defined(RADIO_X9DP2019) || defined(RADIO_X7ACCESS)\n    #define EXTMODULE_RCC_AHB1Periph    (RCC_AHB1Periph_GPIOC | RCC_AHB1Periph_GPIOD | RCC_AHB1Periph_DMA2)\n    #define EXTMODULE_PWR_GPIO          GPIOD\n    #define EXTMODULE_PWR_GPIO_PIN      GPIO_Pin_8  // PD.08\n  #elif defined(PCBX9LITE)\n    #define HARDWARE_EXTERNAL_MODULE_SIZE_SML\n    #define EXTMODULE_RCC_AHB1Periph    (RCC_AHB1Periph_GPIOA | RCC_AHB1Periph_GPIOC | RCC_AHB1Periph_DMA2)\n    #define EXTMODULE_PWR_GPIO          GPIOA\n    #define EXTMODULE_PWR_GPIO_PIN      GPIO_Pin_8  // PA.08\n  #else\n    #define HARDWARE_EXTERNAL_MODULE_SIZE_SML\n    #define EXTMODULE_RCC_AHB1Periph    (RCC_AHB1Periph_GPIOC | RCC_AHB1Periph_GPIOD | RCC_AHB1Periph_DMA2)\n    #define EXTMODULE_PWR_GPIO          GPIOD\n    #define EXTMODULE_PWR_GPIO_PIN      GPIO_Pin_11 // PD.11\n  #endif\n  #define EXTERNAL_MODULE_PWR_ON()      GPIO_SetBits(EXTMODULE_PWR_GPIO, EXTMODULE_PWR_GPIO_PIN)\n  #define EXTERNAL_MODULE_PWR_OFF()     GPIO_ResetBits(EXTMODULE_PWR_GPIO, EXTMODULE_PWR_GPIO_PIN)\n  #define IS_EXTERNAL_MODULE_ON()       (GPIO_ReadInputDataBit(EXTMODULE_PWR_GPIO, EXTMODULE_PWR_GPIO_PIN) == Bit_SET)\n  #define EXTMODULE_TX_GPIO             GPIOC\n  #define EXTMODULE_USART_GPIO          EXTMODULE_TX_GPIO\n  #define EXTMODULE_TX_GPIO_PIN         GPIO_Pin_6  // PC.06\n  #define EXTMODULE_TX_GPIO_PinSource   GPIO_PinSource6\n  #define EXTMODULE_RX_GPIO_PIN         GPIO_Pin_7  // PC.07\n  #define EXTMODULE_RX_GPIO_PinSource   GPIO_PinSource7\n  #define EXTMODULE_TIMER               TIM8\n  #define EXTMODULE_TIMER_FREQ          (PERI2_FREQUENCY * TIMER_MULT_APB2)\n  #define EXTMODULE_TIMER_CC_IRQn       TIM8_CC_IRQn\n  #define EXTMODULE_TIMER_CC_IRQHandler TIM8_CC_IRQHandler\n  #define EXTMODULE_TIMER_TX_GPIO_AF    GPIO_AF_TIM8 // TIM8_CH1\n  #define EXTMODULE_TIMER_DMA_CHANNEL           DMA_Channel_7\n  #define EXTMODULE_TIMER_DMA_STREAM            DMA2_Stream1\n  #define EXTMODULE_TIMER_DMA_STREAM_IRQn       DMA2_Stream1_IRQn\n  #define EXTMODULE_TIMER_DMA_STREAM_IRQHandler DMA2_Stream1_IRQHandler\n  #define EXTMODULE_TIMER_DMA_FLAG_TC           DMA_IT_TCIF1\n  #define EXTMODULE_TIMER_OUTPUT_ENABLE         TIM_CCER_CC1E\n  #define EXTMODULE_TIMER_OUTPUT_POLARITY       TIM_CCER_CC1P\n  #define EXTMODULE_USART_GPIO_AF               GPIO_AF_USART6\n  #define EXTMODULE_USART                       USART6\n  #define EXTMODULE_USART_IRQn                  USART6_IRQn\n  #define EXTMODULE_USART_IRQHandler            USART6_IRQHandler\n  #define EXTMODULE_USART_TX_DMA_CHANNEL        DMA_Channel_5\n  #define EXTMODULE_USART_TX_DMA_STREAM         DMA2_Stream6\n  #define EXTMODULE_USART_RX_DMA_CHANNEL        DMA_Channel_5\n  #define EXTMODULE_USART_RX_DMA_STREAM         DMA2_Stream1\n#elif defined(RADIO_T12)\n  //Jumper T12v2 external module configured\n  #define EXTMODULE_RCC_AHB1Periph      (RCC_AHB1Periph_GPIOA | RCC_AHB1Periph_GPIOD | RCC_AHB1Periph_DMA2)\n  #define EXTMODULE_RCC_APB2Periph      RCC_APB2Periph_TIM8\n  #define EXTMODULE_PWR_GPIO            GPIOD\n  #define EXTMODULE_PWR_GPIO_PIN        GPIO_Pin_8   // JUMPER EXT PD.08  // X7 EXT is PD.08\n  #define EXTERNAL_MODULE_PWR_ON()      GPIO_SetBits(EXTMODULE_PWR_GPIO, EXTMODULE_PWR_GPIO_PIN)\n  #define EXTERNAL_MODULE_PWR_OFF()     GPIO_ResetBits(EXTMODULE_PWR_GPIO, EXTMODULE_PWR_GPIO_PIN)\n  #define IS_EXTERNAL_MODULE_ON()       (GPIO_ReadInputDataBit(EXTMODULE_PWR_GPIO, EXTMODULE_PWR_GPIO_PIN) == Bit_SET)\n  #define EXTMODULE_TX_GPIO             GPIOA\n  #define EXTMODULE_TX_GPIO_PIN         GPIO_Pin_7   // JUMPER EXT PA.07  // X7 EXT is PA.07\n  #define EXTMODULE_TX_GPIO_PinSource   GPIO_PinSource7\n  #define EXTMODULE_TIMER               TIM8\n  #define EXTMODULE_TIMER_TX_GPIO_AF          GPIO_AF_TIM8 // TIM8_CH1N\n  #define EXTMODULE_TIMER_CC_IRQn       TIM8_CC_IRQn\n  #define EXTMODULE_TIMER_CC_IRQHandler TIM8_CC_IRQHandler\n  #define EXTMODULE_TIMER_DMA_CHANNEL         DMA_Channel_7\n  #define EXTMODULE_TIMER_DMA_STREAM          DMA2_Stream1\n  #define EXTMODULE_TIMER_DMA_STREAM_IRQn       DMA2_Stream1_IRQn\n  #define EXTMODULE_TIMER_DMA_STREAM_IRQHandler DMA2_Stream1_IRQHandler\n  #define EXTMODULE_TIMER_DMA_FLAG_TC         DMA_IT_TCIF1\n  #define EXTMODULE_TIMER_OUTPUT_ENABLE         TIM_CCER_CC1NE\n  #define EXTMODULE_TIMER_OUTPUT_POLARITY       TIM_CCER_CC1NP\n  #define EXTMODULE_TIMER_FREQ          (PERI2_FREQUENCY * TIMER_MULT_APB2)\n#elif defined(RADIO_X9DP2019)\n  #define EXTMODULE_RCC_AHB1Periph      (RCC_AHB1Periph_GPIOC | RCC_AHB1Periph_GPIOD | RCC_AHB1Periph_DMA2)\n  #define EXTMODULE_RCC_APB2Periph      (RCC_APB2Periph_TIM8 | RCC_APB2Periph_USART6)\n  #define EXTMODULE_PWR_GPIO            GPIOD\n  #define EXTMODULE_PWR_GPIO_PIN        GPIO_Pin_8  // PD.08\n  #define EXTERNAL_MODULE_PWR_ON()      GPIO_SetBits(EXTMODULE_PWR_GPIO, EXTMODULE_PWR_GPIO_PIN)\n  #define EXTERNAL_MODULE_PWR_OFF()     GPIO_ResetBits(EXTMODULE_PWR_GPIO, EXTMODULE_PWR_GPIO_PIN)\n  #define IS_EXTERNAL_MODULE_ON()       (GPIO_ReadInputDataBit(EXTMODULE_PWR_GPIO, EXTMODULE_PWR_GPIO_PIN) == Bit_SET)\n  #define EXTMODULE_TX_GPIO             GPIOC\n  #define EXTMODULE_TX_GPIO_PIN         GPIO_Pin_7  // PC.07\n  #define EXTMODULE_TX_GPIO_PinSource   GPIO_PinSource7\n  #define EXTMODULE_TIMER               TIM8\n  #define EXTMODULE_TIMER_TX_GPIO_AF    GPIO_AF_TIM8 // TIM8_CH2\n  #define EXTMODULE_TIMER_CC_IRQn       TIM8_CC_IRQn\n  #define EXTMODULE_TIMER_CC_IRQHandler TIM8_CC_IRQHandler\n  #define EXTMODULE_TIMER_DMA_CHANNEL         DMA_Channel_7 // TIM8_UP\n  #define EXTMODULE_TIMER_DMA_STREAM          DMA2_Stream1 // TIM8_UP\n  #define EXTMODULE_TIMER_DMA_STREAM_IRQn       DMA2_Stream1_IRQn\n  #define EXTMODULE_TIMER_DMA_STREAM_IRQHandler DMA2_Stream1_IRQHandler\n  #define EXTMODULE_TIMER_DMA_FLAG_TC           DMA_IT_TCIF1\n  #define EXTMODULE_TIMER_OUTPUT_ENABLE         TIM_CCER_CC2E\n  #define EXTMODULE_TIMER_OUTPUT_POLARITY       TIM_CCER_CC2NP\n  #define EXTMODULE_TIMER_FREQ                  (PERI2_FREQUENCY * TIMER_MULT_APB2)\n#else\n  #define EXTMODULE_RCC_AHB1Periph      (RCC_AHB1Periph_GPIOA | RCC_AHB1Periph_GPIOD | RCC_AHB1Periph_DMA2)\n  #define EXTMODULE_RCC_APB2Periph      RCC_APB2Periph_TIM8\n  #define EXTMODULE_PWR_GPIO            GPIOD\n  #define EXTMODULE_PWR_GPIO_PIN        GPIO_Pin_8  // PD.08\n  #define EXTERNAL_MODULE_PWR_ON()      GPIO_SetBits(EXTMODULE_PWR_GPIO, EXTMODULE_PWR_GPIO_PIN)\n  #define EXTERNAL_MODULE_PWR_OFF()     GPIO_ResetBits(EXTMODULE_PWR_GPIO, EXTMODULE_PWR_GPIO_PIN)\n  #define IS_EXTERNAL_MODULE_ON()       (GPIO_ReadInputDataBit(EXTMODULE_PWR_GPIO, EXTMODULE_PWR_GPIO_PIN) == Bit_SET)\n  #define EXTMODULE_TX_GPIO             GPIOA\n  #define EXTMODULE_TX_GPIO_PIN         GPIO_Pin_7  // PA.07\n  #define EXTMODULE_TX_GPIO_PinSource   GPIO_PinSource7\n  #define EXTMODULE_TIMER               TIM8\n  #define EXTMODULE_TIMER_TX_GPIO_AF          GPIO_AF_TIM8 // TIM8_CH1N\n  #define EXTMODULE_TIMER_CC_IRQn       TIM8_CC_IRQn\n  #define EXTMODULE_TIMER_CC_IRQHandler TIM8_CC_IRQHandler\n  #define EXTMODULE_TIMER_DMA_CHANNEL         DMA_Channel_7 // TIM8_UP\n  #define EXTMODULE_TIMER_DMA_STREAM          DMA2_Stream1 // TIM8_UP\n  #define EXTMODULE_TIMER_DMA_STREAM_IRQn       DMA2_Stream1_IRQn\n  #define EXTMODULE_TIMER_DMA_STREAM_IRQHandler DMA2_Stream1_IRQHandler\n  #define EXTMODULE_TIMER_DMA_FLAG_TC           DMA_IT_TCIF1\n  #define EXTMODULE_TIMER_OUTPUT_ENABLE         TIM_CCER_CC1NE\n  #define EXTMODULE_TIMER_OUTPUT_POLARITY       TIM_CCER_CC1NP\n  #define EXTMODULE_TIMER_FREQ                  (PERI2_FREQUENCY * TIMER_MULT_APB2)\n#endif\n\n// Trainer Port\n#if defined(PCBXLITES) || defined(PCBX9LITE)\n  // on these 2 radios the trainer port already uses DMA1_Stream6, we won't use the DMA\n  #define TRAINER_RCC_AHB1Periph        RCC_AHB1Periph_GPIOD\n  #define TRAINER_RCC_APB1Periph        RCC_APB1Periph_TIM4\n  #define TRAINER_GPIO                  GPIOD\n  #define TRAINER_IN_GPIO_PIN           GPIO_Pin_13 // PD.13\n  #define TRAINER_IN_GPIO_PinSource     GPIO_PinSource13\n  #define TRAINER_OUT_GPIO_PIN          GPIO_Pin_12 // PD.12\n  #define TRAINER_OUT_GPIO_PinSource    GPIO_PinSource12\n#if defined(PCBX9LITE)\n  #define TRAINER_DETECT_GPIO           GPIOD\n  #define TRAINER_DETECT_GPIO_PIN       GPIO_Pin_11 // PD.11\n#endif\n  #define TRAINER_TIMER                 TIM4\n  #define TRAINER_GPIO_AF               GPIO_AF_TIM4 // TIM4_CH1 (Out) + TIM4_CH2 (In)\n  #define TRAINER_TIMER_IRQn            TIM4_IRQn\n  #define TRAINER_TIMER_IRQHandler      TIM4_IRQHandler\n  #define TRAINER_TIMER_FREQ            (PERI1_FREQUENCY * TIMER_MULT_APB1)\n  #define TRAINER_OUT_CCMR1             TIM_CCMR1_OC1M_1 | TIM_CCMR1_OC1M_2 | TIM_CCMR1_OC1PE;\n  #define TRAINER_IN_CCMR1              TIM_CCMR1_IC2F_0 | TIM_CCMR1_IC2F_1 | TIM_CCMR1_CC2S_0;\n  #define TRAINER_OUT_COUNTER_REGISTER  TRAINER_TIMER->CCR1\n  #define TRAINER_IN_COUNTER_REGISTER   TRAINER_TIMER->CCR2\n  #define TRAINER_SETUP_REGISTER        TRAINER_TIMER->CCR3\n  #define TRAINER_OUT_INTERRUPT_FLAG    TIM_SR_CC3IF\n  #define TRAINER_OUT_INTERRUPT_ENABLE  TIM_DIER_CC3IE\n  #define TRAINER_IN_INTERRUPT_ENABLE   TIM_DIER_CC2IE\n  #define TRAINER_IN_INTERRUPT_FLAG     TIM_SR_CC2IF\n  #define TRAINER_OUT_CCER              TIM_CCER_CC1E\n  #define TRAINER_CCER_POLARYTY         TIM_CCER_CC1P\n  #define TRAINER_IN_CCER               TIM_CCER_CC2E\n#elif defined(PCBXLITE)\n  #define TRAINER_TIMER                 TIM4\n  #define TRAINER_RCC_AHB1Periph        0\n  #define TRAINER_RCC_APB1Periph        RCC_APB1Periph_TIM4\n  #define TRAINER_TIMER_IRQn            TIM4_IRQn\n  #define TRAINER_TIMER_IRQHandler      TIM4_IRQHandler\n#else\n  #define TRAINER_RCC_AHB1Periph        (RCC_AHB1Periph_GPIOA | RCC_AHB1Periph_GPIOC | RCC_AHB1Periph_DMA1)\n  #define TRAINER_RCC_APB1Periph        RCC_APB1Periph_TIM3\n  #define TRAINER_GPIO                  GPIOC\n  #define TRAINER_IN_GPIO_PIN           GPIO_Pin_8  // PC.08\n  #define TRAINER_IN_GPIO_PinSource     GPIO_PinSource8\n  #define TRAINER_OUT_GPIO_PIN          GPIO_Pin_9  // PC.09\n  #define TRAINER_OUT_GPIO_PinSource    GPIO_PinSource9\n  #define TRAINER_DETECT_GPIO           GPIOA\n  #define TRAINER_DETECT_GPIO_PIN       GPIO_Pin_8  // PA.08\n  #define TRAINER_TIMER                 TIM3\n  #define TRAINER_TIMER_IRQn            TIM3_IRQn\n  #define TRAINER_GPIO_AF               GPIO_AF_TIM3\n  #define TRAINER_DMA                   DMA1\n  #define TRAINER_DMA_CHANNEL           DMA_Channel_5\n  #define TRAINER_DMA_STREAM            DMA1_Stream2\n  #define TRAINER_DMA_IRQn              DMA1_Stream2_IRQn\n  #define TRAINER_DMA_IRQHandler        DMA1_Stream2_IRQHandler\n  #define TRAINER_DMA_FLAG_TC           DMA_IT_TCIF2\n  #define TRAINER_TIMER_IRQn            TIM3_IRQn\n  #define TRAINER_TIMER_IRQHandler      TIM3_IRQHandler\n  #define TRAINER_TIMER_FREQ            (PERI1_FREQUENCY * TIMER_MULT_APB1)\n  #define TRAINER_OUT_CCMR2             TIM_CCMR2_OC4M_1 | TIM_CCMR2_OC4M_2 | TIM_CCMR2_OC4PE;\n  #define TRAINER_IN_CCMR2              TIM_CCMR2_IC3F_0 | TIM_CCMR2_IC3F_1 | TIM_CCMR2_CC3S_0;\n  #define TRAINER_OUT_COUNTER_REGISTER  TRAINER_TIMER->CCR4\n  #define TRAINER_IN_COUNTER_REGISTER   TRAINER_TIMER->CCR3\n  #define TRAINER_SETUP_REGISTER        TRAINER_TIMER->CCR1\n  #define TRAINER_OUT_INTERRUPT_FLAG    TIM_SR_CC1IF\n  #define TRAINER_OUT_INTERRUPT_ENABLE  TIM_DIER_CC1IE\n  #define TRAINER_IN_INTERRUPT_ENABLE   TIM_DIER_CC3IE\n  #define TRAINER_IN_INTERRUPT_FLAG     TIM_SR_CC3IF\n  #define TRAINER_OUT_CCER              TIM_CCER_CC4E\n  #define TRAINER_IN_CCER               TIM_CCER_CC3E\n  #define TRAINER_CCER_POLARYTY         TIM_CCER_CC4P\n#endif\n\n// Serial Port\n#if defined(PCBX7) || defined(PCBXLITE) || defined(PCBX9LITE) || defined(RADIO_X9DP2019)\n  #define AUX_SERIAL_RCC_AHB1Periph         0\n  #define AUX_SERIAL_RCC_APB1Periph         0\n#else\n  #define TRAINER_BATTERY_COMPARTMENT\n  #define AUX_SERIAL_RCC_AHB1Periph         (RCC_AHB1Periph_GPIOB | RCC_AHB1Periph_DMA1)\n  #define AUX_SERIAL_RCC_APB1Periph         RCC_APB1Periph_USART3\n  #define AUX_SERIAL_GPIO                   GPIOB\n  #define AUX_SERIAL_GPIO_PIN_TX            GPIO_Pin_10 // PB.10\n  #define AUX_SERIAL_GPIO_PIN_RX            GPIO_Pin_11 // PB.11\n  #define AUX_SERIAL_GPIO_PinSource_TX      GPIO_PinSource10\n  #define AUX_SERIAL_GPIO_PinSource_RX      GPIO_PinSource11\n  #define AUX_SERIAL_GPIO_AF                GPIO_AF_USART3\n  #define AUX_SERIAL_USART                  USART3\n  #define AUX_SERIAL_USART_IRQHandler       USART3_IRQHandler\n  #define AUX_SERIAL_USART_IRQn             USART3_IRQn\n  #define AUX_SERIAL_DMA_Stream_RX          DMA1_Stream1\n  #define AUX_SERIAL_DMA_Channel_RX         DMA_Channel_4\n#endif\n\n// Telemetry\n#define TELEMETRY_RCC_AHB1Periph        (RCC_AHB1Periph_GPIOD | RCC_AHB1Periph_DMA1)\n#define TELEMETRY_RCC_APB1Periph        RCC_APB1Periph_USART2\n#define TELEMETRY_DIR_GPIO              GPIOD\n#define TELEMETRY_DIR_GPIO_PIN          GPIO_Pin_4  // PD.04\n#if defined(PCBXLITE) || defined(PCBX9LITE) || defined(RADIO_X9DP2019) || defined(RADIO_X7ACCESS)\n  #define TELEMETRY_DIR_OUTPUT()          TELEMETRY_DIR_GPIO->BSRRH = TELEMETRY_DIR_GPIO_PIN\n  #define TELEMETRY_DIR_INPUT()           TELEMETRY_DIR_GPIO->BSRRL = TELEMETRY_DIR_GPIO_PIN\n#else\n  #define TELEMETRY_DIR_OUTPUT()          TELEMETRY_DIR_GPIO->BSRRL = TELEMETRY_DIR_GPIO_PIN\n  #define TELEMETRY_DIR_INPUT()           TELEMETRY_DIR_GPIO->BSRRH = TELEMETRY_DIR_GPIO_PIN\n#endif\n#define TELEMETRY_GPIO                  GPIOD\n#define TELEMETRY_TX_GPIO_PIN           GPIO_Pin_5  // PD.05\n#define TELEMETRY_RX_GPIO_PIN           GPIO_Pin_6  // PD.06\n#define TELEMETRY_GPIO_PinSource_TX     GPIO_PinSource5\n#define TELEMETRY_GPIO_PinSource_RX     GPIO_PinSource6\n#define TELEMETRY_GPIO_AF               GPIO_AF_USART2\n#define TELEMETRY_USART                 USART2\n#define TELEMETRY_DMA_Stream_TX         DMA1_Stream6\n#define TELEMETRY_DMA_Channel_TX        DMA_Channel_4\n#define TELEMETRY_DMA_TX_Stream_IRQ     DMA1_Stream6_IRQn\n#define TELEMETRY_DMA_TX_IRQHandler     DMA1_Stream6_IRQHandler\n#define TELEMETRY_DMA_TX_FLAG_TC        DMA_IT_TCIF6\n#define TELEMETRY_USART_IRQHandler      USART2_IRQHandler\n#define TELEMETRY_USART_IRQn            USART2_IRQn\n#define TELEMETRY_EXTI_PortSource       EXTI_PortSourceGPIOD\n#define TELEMETRY_EXTI_PinSource        EXTI_PinSource6\n#define TELEMETRY_EXTI_LINE             EXTI_Line6\n#define TELEMETRY_EXTI_IRQn             EXTI9_5_IRQn\n#define TELEMETRY_EXTI_TRIGGER          EXTI_Trigger_Rising\n\n#if defined(RADIO_X7) || defined(RADIO_X7ACCESS)\n  #define TELEMETRY_EXTI_REUSE_INTERRUPT_ROTARY_ENCODER\n#elif defined(PCBXLITE) || defined(PCBX9LITE) || defined(RADIO_X9DP2019)\n  #define TELEMETRY_EXTI_IRQHandler       EXTI9_5_IRQHandler\n#else\n  #define TELEMETRY_EXTI_REUSE_INTERRUPT_INTMODULE_HEARTBEAT\n#endif\n\n#define TELEMETRY_TIMER                 TIM11\n#define TELEMETRY_TIMER_IRQn            TIM1_TRG_COM_TIM11_IRQn\n#define TELEMETRY_TIMER_IRQHandler      TIM1_TRG_COM_TIM11_IRQHandler\n\n// PCBREV\n#if defined(PCBX7)\n  #define PCBREV_RCC_AHB1Periph         RCC_AHB1Periph_GPIOA\n  #define PCBREV_GPIO                   GPIOA\n  #define PCBREV_GPIO_PIN               GPIO_Pin_14  // PA.14\n#else\n  #define PCBREV_RCC_AHB1Periph         0\n#endif\n\n// S.Port update connector\n#if defined(PCBXLITE)\n  #define SPORT_MAX_BAUDRATE            250000 // not tested\n  #define SPORT_UPDATE_RCC_AHB1Periph   RCC_AHB1Periph_GPIOD\n  #define SPORT_UPDATE_PWR_GPIO         GPIOD\n  #define SPORT_UPDATE_PWR_GPIO_PIN     GPIO_Pin_8  // PD.08\n  #define GPIO_SPORT_UPDATE_PWR_GPIO_ON  GPIO_SetBits\n  #define GPIO_SPORT_UPDATE_PWR_GPIO_OFF GPIO_ResetBits\n#elif defined(PCBX7ACCESS)  \n  #define SPORT_MAX_BAUDRATE            400000\n  #define SPORT_UPDATE_RCC_AHB1Periph   RCC_AHB1Periph_GPIOB\n  #define SPORT_UPDATE_PWR_GPIO         GPIOB\n  #define SPORT_UPDATE_PWR_GPIO_PIN     GPIO_Pin_3  // PB.03\n  #define GPIO_SPORT_UPDATE_PWR_GPIO_ON  GPIO_SetBits\n  #define GPIO_SPORT_UPDATE_PWR_GPIO_OFF GPIO_ResetBits\n#elif defined(PCBX7)\n  #define SPORT_MAX_BAUDRATE            250000 // < 400000\n  #define SPORT_UPDATE_RCC_AHB1Periph   RCC_AHB1Periph_GPIOB\n  #define SPORT_UPDATE_PWR_GPIO         GPIOB\n  #define SPORT_UPDATE_PWR_GPIO_PIN     GPIO_Pin_2  // PB.02\n  #define GPIO_SPORT_UPDATE_PWR_GPIO_ON  GPIO_SetBits\n  #define GPIO_SPORT_UPDATE_PWR_GPIO_OFF GPIO_ResetBits\n#elif defined(PCBX9LITE)\n  #define SPORT_MAX_BAUDRATE            250000 // not tested\n  #define SPORT_UPDATE_RCC_AHB1Periph   RCC_AHB1Periph_GPIOE\n  #define SPORT_UPDATE_PWR_GPIO         GPIOE\n  #define SPORT_UPDATE_PWR_GPIO_PIN     GPIO_Pin_15 // PE.15\n  #define GPIO_SPORT_UPDATE_PWR_GPIO_ON  GPIO_SetBits\n  #define GPIO_SPORT_UPDATE_PWR_GPIO_OFF GPIO_ResetBits\n#elif defined(RADIO_X9DP2019)\n  #define SPORT_MAX_BAUDRATE            400000\n  #define SPORT_UPDATE_RCC_AHB1Periph   RCC_AHB1Periph_GPIOA\n  #define SPORT_UPDATE_PWR_GPIO         GPIOA\n  #define SPORT_UPDATE_PWR_GPIO_PIN     GPIO_Pin_14 // PA.14\n  #define GPIO_SPORT_UPDATE_PWR_GPIO_ON  GPIO_SetBits\n  #define GPIO_SPORT_UPDATE_PWR_GPIO_OFF GPIO_ResetBits\n#else\n  #define SPORT_MAX_BAUDRATE            400000\n  #define SPORT_UPDATE_RCC_AHB1Periph   0\n#endif\n\n// Heartbeat for iXJT / ISRM synchro\n#define INTMODULE_HEARTBEAT_TRIGGER               EXTI_Trigger_Falling\n#if defined(PCBXLITE)\n  #define INTMODULE_HEARTBEAT\n  #define INTMODULE_HEARTBEAT_RCC_AHB1Periph      RCC_AHB1Periph_GPIOD\n  #define INTMODULE_HEARTBEAT_GPIO                GPIOD\n  #define INTMODULE_HEARTBEAT_GPIO_PIN            GPIO_Pin_15\n  #define INTMODULE_HEARTBEAT_EXTI_PortSource     EXTI_PortSourceGPIOD\n  #define INTMODULE_HEARTBEAT_EXTI_PinSource      GPIO_PinSource15\n  #define INTMODULE_HEARTBEAT_EXTI_LINE           EXTI_Line15\n  #define INTMODULE_HEARTBEAT_EXTI_IRQn           EXTI15_10_IRQn\n  #define INTMODULE_HEARTBEAT_EXTI_IRQHandler     EXTI15_10_IRQHandler\n#elif defined(PCBX9LITE)\n  // #define INTMODULE_HEARTBEAT\n  #define INTMODULE_HEARTBEAT_RCC_AHB1Periph      0 // RCC_AHB1Periph_GPIOC\n  // #define INTMODULE_HEARTBEAT_GPIO             GPIOC\n  // #define INTMODULE_HEARTBEAT_GPIO_PIN         GPIO_Pin_9\n  // #define INTMODULE_HEARTBEAT_EXTI_PortSource     EXTI_PortSourceGPIOC\n  // #define INTMODULE_HEARTBEAT_EXTI_PinSource      GPIO_PinSource9\n  // #define INTMODULE_HEARTBEAT_EXTI_LINE           EXTI_Line9\n  // #define INTMODULE_HEARTBEAT_EXTI_IRQn           EXTI9_5_IRQn\n  // #define INTMODULE_HEARTBEAT_EXTI_IRQHandler     EXTI9_5_IRQHandler\n#elif defined(RADIO_X7ACCESS)\n  #define INTMODULE_HEARTBEAT\n  #define INTMODULE_HEARTBEAT_REUSE_INTERRUPT_ROTARY_ENCODER\n  #define INTMODULE_HEARTBEAT_RCC_AHB1Periph      RCC_AHB1Periph_GPIOA\n  #define INTMODULE_HEARTBEAT_GPIO                GPIOA\n  #define INTMODULE_HEARTBEAT_GPIO_PIN            GPIO_Pin_7  // PA.07\n  #define INTMODULE_HEARTBEAT_EXTI_PortSource     EXTI_PortSourceGPIOA\n  #define INTMODULE_HEARTBEAT_EXTI_PinSource      GPIO_PinSource7\n  #define INTMODULE_HEARTBEAT_EXTI_LINE           EXTI_Line7\n  #define INTMODULE_HEARTBEAT_EXTI_IRQn           EXTI9_5_IRQn\n#elif defined(RADIO_X7) \n  #define INTMODULE_HEARTBEAT\n  #define INTMODULE_HEARTBEAT_REUSE_INTERRUPT_ROTARY_ENCODER\n  #define INTMODULE_HEARTBEAT_RCC_AHB1Periph      RCC_AHB1Periph_GPIOC\n  #define INTMODULE_HEARTBEAT_GPIO                GPIOC\n  #define INTMODULE_HEARTBEAT_GPIO_PIN            GPIO_Pin_7  // PC.07\n  #define INTMODULE_HEARTBEAT_EXTI_PortSource     EXTI_PortSourceGPIOC\n  #define INTMODULE_HEARTBEAT_EXTI_PinSource      GPIO_PinSource7\n  #define INTMODULE_HEARTBEAT_EXTI_LINE           EXTI_Line7\n  #define INTMODULE_HEARTBEAT_EXTI_IRQn           EXTI9_5_IRQn\n#elif defined(RADIO_X9DP2019)\n  #define INTMODULE_HEARTBEAT\n  #define INTMODULE_HEARTBEAT_RCC_AHB1Periph      RCC_AHB1Periph_GPIOB\n  #define INTMODULE_HEARTBEAT_GPIO                GPIOB\n  #define INTMODULE_HEARTBEAT_GPIO_PIN            GPIO_Pin_1  // PB.01\n  #define INTMODULE_HEARTBEAT_EXTI_PortSource     EXTI_PortSourceGPIOB\n  #define INTMODULE_HEARTBEAT_EXTI_PinSource      GPIO_PinSource1\n  #define INTMODULE_HEARTBEAT_EXTI_LINE           EXTI_Line1\n  #define INTMODULE_HEARTBEAT_EXTI_IRQn           EXTI1_IRQn\n  #define INTMODULE_HEARTBEAT_EXTI_IRQHandler     EXTI1_IRQHandler\n#else\n  #define INTMODULE_HEARTBEAT\n  #define INTMODULE_HEARTBEAT_RCC_AHB1Periph      RCC_AHB1Periph_GPIOC\n  #define INTMODULE_HEARTBEAT_GPIO                GPIOC\n  #define INTMODULE_HEARTBEAT_GPIO_PIN            GPIO_Pin_7\n  #define INTMODULE_HEARTBEAT_EXTI_PortSource     EXTI_PortSourceGPIOC\n  #define INTMODULE_HEARTBEAT_EXTI_PinSource      GPIO_PinSource7\n  #define INTMODULE_HEARTBEAT_EXTI_LINE           EXTI_Line7\n  #define INTMODULE_HEARTBEAT_EXTI_IRQn           EXTI9_5_IRQn\n  #define INTMODULE_HEARTBEAT_EXTI_IRQHandler     EXTI9_5_IRQHandler\n#endif\n\n#if defined(PCBX9LITE)\n  #define EXTMODULE_HEARTBEAT_RCC_AHB1Periph      RCC_AHB1Periph_GPIOD\n  #define EXTMODULE_HEARTBEAT_GPIO                GPIOD\n  #define EXTMODULE_HEARTBEAT_GPIO_PIN            GPIO_Pin_15\n  #define EXTMODULE_HEARTBEAT_EXTI_PortSource     EXTI_PortSourceGPIOD\n  #define EXTMODULE_HEARTBEAT_EXTI_PinSource      GPIO_PinSource15\n  #define EXTMODULE_HEARTBEAT_EXTI_LINE           EXTI_Line15\n  #define EXTMODULE_HEARTBEAT_EXTI_IRQn           EXTI15_10_IRQn\n  #define EXTMODULE_HEARTBEAT_EXTI_IRQHandler     EXTI15_10_IRQHandler\n#endif\n\n// Trainer / Trainee from the module bay\n#if defined(PCBX9LITE) ||  defined(PCBXLITE)\n  #define TRAINER_MODULE_CPPM\n  #define TRAINER_MODULE_SBUS\n  #define TRAINER_MODULE_RCC_AHB1Periph      0\n  #define TRAINER_MODULE_RCC_APB1Periph      RCC_APB1Periph_TIM3\n  #define TRAINER_MODULE_RCC_APB2Periph      0\n  #define TRAINER_MODULE_CPPM_GPIO           EXTMODULE_USART_GPIO\n  #define TRAINER_MODULE_CPPM_GPIO_PIN       EXTMODULE_RX_GPIO_PIN\n  #define TRAINER_MODULE_CPPM_GPIO_PinSource EXTMODULE_RX_GPIO_PinSource\n  #define TRAINER_MODULE_CPPM_GPIO_AF        GPIO_AF_TIM3\n  #define TRAINER_MODULE_CPPM_TIMER          TIM3\n  #define TRAINER_MODULE_CPPM_COUNTER_REGISTER TRAINER_MODULE_CPPM_TIMER->CCR2\n  #define TRAINER_MODULE_CPPM_INTERRUPT_ENABLE TIM_DIER_CC2IE\n  #define TRAINER_MODULE_CPPM_INTERRUPT_FLAG   TIM_SR_CC2IF\n  #define TRAINER_MODULE_CPPM_CCMR1            (TIM_CCMR1_IC2F_0 | TIM_CCMR1_IC2F_1 | TIM_CCMR1_CC2S_0)\n  #define TRAINER_MODULE_CPPM_CCER             TIM_CCER_CC2E\n  #define TRAINER_MODULE_CPPM_TIMER_IRQn       TIM3_IRQn\n  #define TRAINER_MODULE_CPPM_TIMER_IRQHandler TIM3_IRQHandler\n  #define TRAINER_MODULE_SBUS_GPIO             EXTMODULE_USART_GPIO\n  #define TRAINER_MODULE_SBUS_GPIO_PIN         EXTMODULE_RX_GPIO_PIN\n  #define TRAINER_MODULE_SBUS_GPIO_AF          EXTMODULE_USART_GPIO_AF\n  #define TRAINER_MODULE_SBUS_USART            EXTMODULE_USART\n  #define TRAINER_MODULE_SBUS_GPIO_PinSource   EXTMODULE_RX_GPIO_PinSource\n  #define TRAINER_MODULE_SBUS_DMA_STREAM       EXTMODULE_USART_RX_DMA_STREAM\n  #define TRAINER_MODULE_SBUS_DMA_CHANNEL      EXTMODULE_USART_RX_DMA_CHANNEL\n#else\n  #define TRAINER_MODULE_CPPM\n  #define TRAINER_MODULE_SBUS\n  #define TRAINER_MODULE_RCC_AHB1Periph      RCC_AHB1Periph_GPIOC\n  #define TRAINER_MODULE_RCC_APB2Periph      RCC_APB2Periph_USART6\n  #define TRAINER_MODULE_RCC_APB1Periph      RCC_APB1Periph_TIM3\n  #define TRAINER_MODULE_CPPM_TIMER          TRAINER_TIMER\n  #define TRAINER_MODULE_CPPM_GPIO           INTMODULE_HEARTBEAT_GPIO\n  #define TRAINER_MODULE_CPPM_GPIO_PIN       INTMODULE_HEARTBEAT_GPIO_PIN\n  #define TRAINER_MODULE_CPPM_GPIO_PinSource INTMODULE_HEARTBEAT_EXTI_PinSource\n  #define TRAINER_MODULE_CPPM_INTERRUPT_ENABLE TIM_DIER_CC2IE\n  #define TRAINER_MODULE_CPPM_INTERRUPT_FLAG   TIM_SR_CC2IF\n  #define TRAINER_MODULE_CPPM_CCMR1            (TIM_CCMR1_IC2F_0 | TIM_CCMR1_IC2F_1 | TIM_CCMR1_CC2S_0)\n  #define TRAINER_MODULE_CPPM_CCER             TIM_CCER_CC2E\n  #define TRAINER_MODULE_CPPM_COUNTER_REGISTER TRAINER_TIMER->CCR2\n  #define TRAINER_MODULE_CPPM_TIMER_IRQn       TRAINER_TIMER_IRQn\n  #define TRAINER_MODULE_CPPM_GPIO_AF          GPIO_AF_TIM3\n  #define TRAINER_MODULE_SBUS_GPIO_AF          GPIO_AF_USART6\n  #define TRAINER_MODULE_SBUS_USART            USART6\n  #define TRAINER_MODULE_SBUS_GPIO             INTMODULE_HEARTBEAT_GPIO\n  #define TRAINER_MODULE_SBUS_GPIO_PIN         INTMODULE_HEARTBEAT_GPIO_PIN\n  #define TRAINER_MODULE_SBUS_GPIO_PinSource   INTMODULE_HEARTBEAT_EXTI_PinSource\n  #define TRAINER_MODULE_SBUS_DMA_STREAM       DMA2_Stream1\n  #define TRAINER_MODULE_SBUS_DMA_CHANNEL      DMA_Channel_5\n#endif\n\n// USB\n#define USB_RCC_AHB1Periph_GPIO         RCC_AHB1Periph_GPIOA\n#define USB_GPIO                        GPIOA\n#define USB_GPIO_PIN_VBUS               GPIO_Pin_9  // PA.09\n#define USB_GPIO_PIN_DM                 GPIO_Pin_11 // PA.11\n#define USB_GPIO_PIN_DP                 GPIO_Pin_12 // PA.12\n#define USB_GPIO_PinSource_DM           GPIO_PinSource11\n#define USB_GPIO_PinSource_DP           GPIO_PinSource12\n#define USB_GPIO_AF                     GPIO_AF_OTG1_FS\n\n// BackLight\n#if defined(PCBX9E)\n  #define BACKLIGHT_RCC_AHB1Periph      RCC_AHB1Periph_GPIOE\n  #define BACKLIGHT_RCC_APB1Periph      0\n  #define BACKLIGHT_RCC_APB2Periph      RCC_APB2Periph_TIM9\n  #define BACKLIGHT_TIMER_FREQ          (PERI2_FREQUENCY * TIMER_MULT_APB2)\n  #define BACKLIGHT_TIMER               TIM9\n  #define BACKLIGHT_GPIO                GPIOE\n  #define BACKLIGHT_GPIO_PIN_1          GPIO_Pin_6 // PE.06\n  #define BACKLIGHT_GPIO_PIN_2          GPIO_Pin_5 // PE.05\n  #define BACKLIGHT_GPIO_PinSource_1    GPIO_PinSource6\n  #define BACKLIGHT_GPIO_PinSource_2    GPIO_PinSource5\n  #define BACKLIGHT_GPIO_AF_1           GPIO_AF_TIM9\n  #define BACKLIGHT_GPIO_AF_2           GPIO_AF_TIM9\n#elif defined(PCBX9DP)\n  #define BACKLIGHT_RCC_AHB1Periph      RCC_AHB1Periph_GPIOD\n  #define BACKLIGHT_RCC_APB1Periph      RCC_APB1Periph_TIM4\n  #define BACKLIGHT_RCC_APB2Periph      0\n  #define BACKLIGHT_TIMER_FREQ          (PERI1_FREQUENCY * TIMER_MULT_APB1)\n  #define BACKLIGHT_TIMER               TIM4\n  #define BACKLIGHT_GPIO                GPIOD\n  #define BACKLIGHT_GPIO_PIN_1          GPIO_Pin_15 // PD.15\n  #define BACKLIGHT_GPIO_PIN_2          GPIO_Pin_13 // PD.13\n  #define BACKLIGHT_GPIO_PinSource_1    GPIO_PinSource15\n  #define BACKLIGHT_GPIO_PinSource_2    GPIO_PinSource13\n  #define BACKLIGHT_GPIO_AF_1           GPIO_AF_TIM4\n  #define BACKLIGHT_GPIO_AF_2           GPIO_AF_TIM4\n#elif defined(PCBXLITES) || defined(PCBX9LITE)\n  #define BACKLIGHT_RCC_AHB1Periph      RCC_AHB1Periph_GPIOA\n  #define BACKLIGHT_RCC_APB1Periph      0\n  #define BACKLIGHT_RCC_APB2Periph      RCC_APB2Periph_TIM1\n  #define BACKLIGHT_TIMER_FREQ          (PERI2_FREQUENCY * TIMER_MULT_APB2)\n  #define BACKLIGHT_TIMER               TIM1\n  #define BACKLIGHT_GPIO                GPIOA\n  #define BACKLIGHT_GPIO_PIN            GPIO_Pin_10 // PA.10\n  #define BACKLIGHT_GPIO_PinSource      GPIO_PinSource10\n  #define BACKLIGHT_GPIO_AF             GPIO_AF_TIM1\n  #define BACKLIGHT_CCMR2               TIM_CCMR2_OC3M_1 | TIM_CCMR2_OC3M_2 // Channel 3, PWM\n  #define BACKLIGHT_CCER                TIM_CCER_CC3E\n  #define BACKLIGHT_COUNTER_REGISTER    BACKLIGHT_TIMER->CCR3\n#elif defined(PCBXLITE)\n  #define BACKLIGHT_RCC_AHB1Periph      RCC_AHB1Periph_GPIOA\n  #define BACKLIGHT_RCC_APB1Periph      0\n  #define BACKLIGHT_RCC_APB2Periph      RCC_APB2Periph_TIM1\n  #define BACKLIGHT_TIMER_FREQ          (PERI2_FREQUENCY * TIMER_MULT_APB2)\n  #define BACKLIGHT_TIMER               TIM1\n  #define BACKLIGHT_GPIO                GPIOA\n  #define BACKLIGHT_GPIO_PIN            GPIO_Pin_8 // PA.08\n  #define BACKLIGHT_GPIO_PinSource      GPIO_PinSource8\n  #define BACKLIGHT_GPIO_AF             GPIO_AF_TIM1\n  #define BACKLIGHT_CCMR1               TIM_CCMR1_OC1M_1 | TIM_CCMR1_OC1M_2 // Channel 1, PWM\n  #define BACKLIGHT_CCER                TIM_CCER_CC1E\n  #define BACKLIGHT_COUNTER_REGISTER    BACKLIGHT_TIMER->CCR1\n#elif defined(PCBX7)\n  #define BACKLIGHT_RCC_AHB1Periph      RCC_AHB1Periph_GPIOD\n  #define BACKLIGHT_RCC_APB1Periph      RCC_APB1Periph_TIM4\n  #define BACKLIGHT_RCC_APB2Periph      0\n  #define BACKLIGHT_TIMER_FREQ          (PERI1_FREQUENCY * TIMER_MULT_APB1)\n  #define BACKLIGHT_TIMER               TIM4\n  #define BACKLIGHT_GPIO                GPIOD\n  #define BACKLIGHT_GPIO_PIN            GPIO_Pin_13 // PD.13\n  #define BACKLIGHT_GPIO_PinSource      GPIO_PinSource13\n  #define BACKLIGHT_GPIO_AF             GPIO_AF_TIM4\n  #define BACKLIGHT_CCMR1               TIM_CCMR1_OC2M_1 | TIM_CCMR1_OC2M_2 // Channel2, PWM\n  #define BACKLIGHT_CCER                TIM_CCER_CC2E\n  #define BACKLIGHT_COUNTER_REGISTER    BACKLIGHT_TIMER->CCR2\n#else\n  #define BACKLIGHT_RCC_AHB1Periph      RCC_AHB1Periph_GPIOB\n  #define BACKLIGHT_RCC_APB1Periph      0\n  #define BACKLIGHT_RCC_APB2Periph      RCC_APB2Periph_TIM10\n  #define BACKLIGHT_TIMER_FREQ          (PERI2_FREQUENCY * TIMER_MULT_APB2)\n  #define BACKLIGHT_TIMER               TIM10\n  #define BACKLIGHT_GPIO                GPIOB\n  #define BACKLIGHT_GPIO_PIN            GPIO_Pin_8  // PB.08\n  #define BACKLIGHT_GPIO_PinSource      GPIO_PinSource8\n  #define BACKLIGHT_GPIO_AF             GPIO_AF_TIM10\n#endif\n\n// LCD driver\n#if defined(PCBX9E)\n  #define LCD_RCC_AHB1Periph            (RCC_AHB1Periph_GPIOA | RCC_AHB1Periph_GPIOC | RCC_AHB1Periph_GPIOD | RCC_AHB1Periph_DMA1)\n  #define LCD_RCC_APB1Periph            RCC_APB1Periph_SPI3\n  #define LCD_SPI_GPIO                  GPIOC\n  #define LCD_MOSI_GPIO_PIN             GPIO_Pin_12 // PC.12\n  #define LCD_MOSI_GPIO_PinSource       GPIO_PinSource12\n  #define LCD_CLK_GPIO_PIN              GPIO_Pin_10 // PC.10\n  #define LCD_CLK_GPIO_PinSource        GPIO_PinSource10\n  #define LCD_A0_GPIO_PIN               GPIO_Pin_11 // PC.11\n  #define LCD_NCS_GPIO                  GPIOA\n  #define LCD_NCS_GPIO_PIN              GPIO_Pin_15 // PA.15\n  #define LCD_RST_GPIO                  GPIOD\n  #define LCD_RST_GPIO_PIN              GPIO_Pin_15 // PD.15\n  #define LCD_DMA                       DMA1\n  #define LCD_DMA_Stream                DMA1_Stream7\n  #define LCD_DMA_Stream_IRQn           DMA1_Stream7_IRQn\n  #define LCD_DMA_Stream_IRQHandler     DMA1_Stream7_IRQHandler\n  #define LCD_DMA_FLAGS                 (DMA_HIFCR_CTCIF7 | DMA_HIFCR_CHTIF7 | DMA_HIFCR_CTEIF7 | DMA_HIFCR_CDMEIF7 | DMA_HIFCR_CFEIF7)\n  #define LCD_DMA_FLAG_INT              DMA_HIFCR_CTCIF7\n  #define LCD_SPI                       SPI3\n  #define LCD_GPIO_AF                   GPIO_AF_SPI3\n#elif defined(PCBXLITE) || defined(PCBX9LITE)\n  #define LCD_RCC_AHB1Periph            (RCC_AHB1Periph_GPIOC | RCC_AHB1Periph_GPIOD | RCC_AHB1Periph_DMA1)\n  #define LCD_RCC_APB1Periph            RCC_APB1Periph_SPI3\n  #define LCD_SPI_GPIO                  GPIOC\n  #define LCD_MOSI_GPIO_PIN             GPIO_Pin_12 // PC.12\n  #define LCD_MOSI_GPIO_PinSource       GPIO_PinSource12\n  #define LCD_CLK_GPIO_PIN              GPIO_Pin_10 // PC.10\n  #define LCD_CLK_GPIO_PinSource        GPIO_PinSource10\n  #define LCD_A0_GPIO_PIN               GPIO_Pin_11 // PC.11\n  #define LCD_NCS_GPIO                  GPIOD\n  #define LCD_NCS_GPIO_PIN              GPIO_Pin_3  // PD.03\n  #define LCD_RST_GPIO                  GPIOD\n  #define LCD_RST_GPIO_PIN              GPIO_Pin_2  // PD.02\n  #define LCD_DMA                       DMA1\n  #define LCD_DMA_Stream                DMA1_Stream7\n  #define LCD_DMA_Stream_IRQn           DMA1_Stream7_IRQn\n  #define LCD_DMA_Stream_IRQHandler     DMA1_Stream7_IRQHandler\n  #define LCD_DMA_FLAGS                 (DMA_HIFCR_CTCIF7 | DMA_HIFCR_CHTIF7 | DMA_HIFCR_CTEIF7 | DMA_HIFCR_CDMEIF7 | DMA_HIFCR_CFEIF7)\n  #define LCD_DMA_FLAG_INT              DMA_HIFCR_CTCIF7\n  #define LCD_SPI                       SPI3\n  #define LCD_GPIO_AF                   GPIO_AF_SPI3\n#elif defined(PCBX9DP) || defined(PCBX7)\n  #define LCD_RCC_AHB1Periph            (RCC_AHB1Periph_GPIOA | RCC_AHB1Periph_GPIOC | RCC_AHB1Periph_GPIOD | RCC_AHB1Periph_DMA1)\n  #define LCD_RCC_APB1Periph            RCC_APB1Periph_SPI3\n  #define LCD_SPI_GPIO                  GPIOC\n  #define LCD_MOSI_GPIO_PIN             GPIO_Pin_12 // PC.12\n  #define LCD_MOSI_GPIO_PinSource       GPIO_PinSource12\n  #define LCD_CLK_GPIO_PIN              GPIO_Pin_10 // PC.10\n  #define LCD_CLK_GPIO_PinSource        GPIO_PinSource10\n  #define LCD_A0_GPIO_PIN               GPIO_Pin_11 // PC.11\n  #define LCD_NCS_GPIO                  GPIOA\n  #define LCD_NCS_GPIO_PIN              GPIO_Pin_15 // PA.15\n  #define LCD_RST_GPIO                  GPIOD\n  #define LCD_RST_GPIO_PIN              GPIO_Pin_12 // PD.12\n  #define LCD_DMA                       DMA1\n  #define LCD_DMA_Stream                DMA1_Stream7\n  #define LCD_DMA_Stream_IRQn           DMA1_Stream7_IRQn\n  #define LCD_DMA_Stream_IRQHandler     DMA1_Stream7_IRQHandler\n  #define LCD_DMA_FLAGS                 (DMA_HIFCR_CTCIF7 | DMA_HIFCR_CHTIF7 | DMA_HIFCR_CTEIF7 | DMA_HIFCR_CDMEIF7 | DMA_HIFCR_CFEIF7)\n  #define LCD_DMA_FLAG_INT              DMA_HIFCR_CTCIF7\n  #define LCD_SPI                       SPI3\n  #define LCD_GPIO_AF                   GPIO_AF_SPI3\n#else\n  #define LCD_RCC_AHB1Periph            RCC_AHB1Periph_GPIOD\n  #define LCD_RCC_APB1Periph            0\n  #define LCD_SPI_GPIO                  GPIOD\n  #define LCD_MOSI_GPIO_PIN             GPIO_Pin_10 // PD.10\n  #define LCD_CLK_GPIO_PIN              GPIO_Pin_11 // PD.11\n  #define LCD_A0_GPIO_PIN               GPIO_Pin_13 // PD.13\n  #define LCD_NCS_GPIO                  GPIOD\n  #define LCD_NCS_GPIO_PIN              GPIO_Pin_14 // PD.14\n  #define LCD_RST_GPIO                  GPIOD\n  #define LCD_RST_GPIO_PIN              GPIO_Pin_12 // PD.12\n#endif\n#define LCD_RCC_APB2Periph              0\n\n// I2C Bus: EEPROM and CAT5137 digital pot for volume control\n#define I2C_RCC_APB1Periph              RCC_APB1Periph_I2C1\n#define I2C                             I2C1\n#define I2C_GPIO_AF                     GPIO_AF_I2C1\n#if defined(PCBXLITE) || defined(PCBX9LITE)\n  #define I2C_RCC_AHB1Periph            (RCC_AHB1Periph_GPIOB | RCC_AHB1Periph_GPIOD)\n  #define I2C_SPI_GPIO                  GPIOB\n  #define I2C_SDA_GPIO_PIN              GPIO_Pin_9  // PB.09\n  #define I2C_SCL_GPIO_PIN              GPIO_Pin_8  // PB.08\n  #define I2C_WP_GPIO                   GPIOD\n  #define I2C_WP_GPIO_PIN               GPIO_Pin_7  // PD.07\n  #define I2C_SCL_GPIO_PinSource        GPIO_PinSource8\n  #define I2C_SDA_GPIO_PinSource        GPIO_PinSource9\n#elif defined(PCBX7ACCESS)\n  #define I2C_RCC_AHB1Periph            RCC_AHB1Periph_GPIOB\n  #define I2C_SPI_GPIO                  GPIOB\n  #define I2C_SDA_GPIO_PIN              GPIO_Pin_9  // PB.09\n  #define I2C_SCL_GPIO_PIN              GPIO_Pin_8  // PB.08\n  #define I2C_WP_GPIO                   GPIOB\n  #define I2C_WP_GPIO_PIN               GPIO_Pin_5  // PB.05\n  #define I2C_SDA_GPIO_PinSource        GPIO_PinSource9\n  #define I2C_SCL_GPIO_PinSource        GPIO_PinSource8\n#elif defined(RADIO_X9DP2019)\n  #define I2C_RCC_AHB1Periph            (RCC_AHB1Periph_GPIOB | RCC_AHB1Periph_GPIOF)\n  #define I2C_SPI_GPIO                  GPIOB\n  #define I2C_SDA_GPIO_PIN              GPIO_Pin_9  // PB.09\n  #define I2C_SCL_GPIO_PIN              GPIO_Pin_8  // PB.08\n  #define I2C_WP_GPIO                   GPIOF\n  #define I2C_WP_GPIO_PIN               GPIO_Pin_0  // PF.00\n  #define I2C_SCL_GPIO_PinSource        GPIO_PinSource8\n  #define I2C_SDA_GPIO_PinSource        GPIO_PinSource9\n#else\n  #define I2C_RCC_AHB1Periph            RCC_AHB1Periph_GPIOB\n  #define I2C_SPI_GPIO                  GPIOB\n  #define I2C_SCL_GPIO_PIN              GPIO_Pin_6  // PB.06\n  #define I2C_SDA_GPIO_PIN              GPIO_Pin_7  // PB.07\n  #define I2C_WP_GPIO                   GPIOB\n  #define I2C_WP_GPIO_PIN               GPIO_Pin_9  // PB.09\n  #define I2C_SCL_GPIO_PinSource        GPIO_PinSource6\n  #define I2C_SDA_GPIO_PinSource        GPIO_PinSource7\n  #define I2C_ADDRESS_VOLUME            0x5C\n#endif\n#define I2C_SPEED                       400000\n#define I2C_ADDRESS_EEPROM              0xA2\n#define I2C_FLASH_PAGESIZE              64\n\n// Second I2C Bus: IMU\n#if defined(PCBXLITES)\n  #define GYRO_RCC_AHB1Periph           (RCC_AHB1Periph_GPIOA | RCC_AHB1Periph_GPIOC)\n  #define GYRO_RCC_APB1Periph           RCC_APB1Periph_I2C3\n  #define I2CX                          I2C3\n  #define I2CX_SCL_GPIO                 GPIOA\n  #define I2CX_SCL_GPIO_PIN             GPIO_Pin_8  // PA.08\n  #define I2CX_SDA_GPIO                 GPIOC\n  #define I2CX_SDA_GPIO_PIN             GPIO_Pin_9  // PC.09\n  #define I2CX_GPIO_AF                  GPIO_AF_I2C3\n  #define I2CX_SCL_GPIO_PinSource       GPIO_PinSource8\n  #define I2CX_SDA_GPIO_PinSource       GPIO_PinSource9\n  #define I2CX_SPEED                    400000\n#else\n  #define GYRO_RCC_AHB1Periph           0\n  #define GYRO_RCC_APB1Periph           0\n#endif\n\n// SD - SPI2\n#define SD_RCC_AHB1Periph               (RCC_AHB1Periph_GPIOD | RCC_AHB1Periph_GPIOB | RCC_AHB1Periph_DMA1)\n#define SD_RCC_APB1Periph               RCC_APB1Periph_SPI2\n#define SD_GPIO_PRESENT_GPIO            GPIOD\n#if defined(PCBXLITE) || defined(PCBX9LITE)\n  #define SD_GPIO_PRESENT_GPIO_PIN      GPIO_Pin_10 // PD.10\n#else\n  #define SD_GPIO_PRESENT_GPIO_PIN      GPIO_Pin_9  // PD.09\n#endif\n#define SD_GPIO                         GPIOB\n#define SD_GPIO_PIN_CS                  GPIO_Pin_12 // PB.12\n#define SD_GPIO_PIN_SCK                 GPIO_Pin_13 // PB.13\n#define SD_GPIO_PIN_MISO                GPIO_Pin_14 // PB.14\n#define SD_GPIO_PIN_MOSI                GPIO_Pin_15 // PB.15\n#define SD_GPIO_AF                      GPIO_AF_SPI2\n#define SD_GPIO_PinSource_CS            GPIO_PinSource12\n#define SD_GPIO_PinSource_SCK           GPIO_PinSource13\n#define SD_GPIO_PinSource_MISO          GPIO_PinSource14\n#define SD_GPIO_PinSource_MOSI          GPIO_PinSource15\n#define SD_SPI                          SPI2\n#define SD_SPI_BaudRatePrescaler        SPI_BaudRatePrescaler_4 // 10.5<20MHZ, make sure < 20MHZ\n\n#if !defined(BOOT)\n  #define SD_USE_DMA                    // Enable the DMA for SD\n  #define SD_DMA_Stream_SPI_RX          DMA1_Stream3\n  #define SD_DMA_Stream_SPI_TX          DMA1_Stream4\n  #define SD_DMA_FLAG_SPI_TC_RX         DMA_FLAG_TCIF3\n  #define SD_DMA_FLAG_SPI_TC_TX         DMA_FLAG_TCIF4\n  #define SD_DMA_Channel_SPI            DMA_Channel_0\n#endif\n\n// Audio\n#define AUDIO_RCC_APB1Periph            (RCC_APB1Periph_TIM6 | RCC_APB1Periph_DAC)\n#define AUDIO_OUTPUT_GPIO               GPIOA\n#define AUDIO_OUTPUT_GPIO_PIN           GPIO_Pin_4  // PA.04\n#define AUDIO_DMA_Stream                DMA1_Stream5\n#define AUDIO_DMA_Stream_IRQn           DMA1_Stream5_IRQn\n#define AUDIO_TIM_IRQn                  TIM6_DAC_IRQn\n#define AUDIO_TIM_IRQHandler            TIM6_DAC_IRQHandler\n#define AUDIO_DMA_Stream_IRQHandler     DMA1_Stream5_IRQHandler\n#define AUDIO_TIMER                     TIM6\n#define AUDIO_DMA                       DMA1\n\n#if defined(PCBXLITES)\n  #define AUDIO_RCC_AHB1Periph          (RCC_AHB1Periph_GPIOA | RCC_AHB1Periph_GPIOC | RCC_AHB1Periph_GPIOD | RCC_AHB1Periph_DMA1)\n  #define JACK_DETECT_GPIO              GPIOC\n  #define JACK_DETECT_GPIO_PIN          GPIO_Pin_13 // PC.13\n  #define AUDIO_SPEAKER_ENABLE_GPIO     GPIOD\n  #define AUDIO_SPEAKER_ENABLE_GPIO_PIN GPIO_Pin_14 // PD.14\n  #define HEADPHONE_TRAINER_SWITCH_GPIO      GPIOD\n  #define HEADPHONE_TRAINER_SWITCH_GPIO_PIN  GPIO_Pin_9 // PD.09\n#else\n  #define AUDIO_RCC_AHB1Periph          (RCC_AHB1Periph_GPIOA | RCC_AHB1Periph_DMA1)\n#endif\n\n// Haptic\n#if defined(PCBXLITE) || defined(PCBX9LITE)\n  #define HAPTIC_PWM\n  #define HAPTIC_RCC_AHB1Periph         RCC_AHB1Periph_GPIOB\n  #define HAPTIC_RCC_APB1Periph         RCC_APB1Periph_TIM2\n  #define HAPTIC_RCC_APB2Periph         0\n  #define HAPTIC_GPIO_PinSource         GPIO_PinSource3\n  #define HAPTIC_GPIO                   GPIOB\n  #define HAPTIC_GPIO_PIN               GPIO_Pin_3  // PB.03\n  #define HAPTIC_GPIO_AF                GPIO_AF_TIM2\n  #define HAPTIC_TIMER                  TIM2\n  #define HAPTIC_TIMER_FREQ             (PERI1_FREQUENCY * TIMER_MULT_APB1)\n  #define HAPTIC_COUNTER_REGISTER       HAPTIC_TIMER->CCR2\n  #define HAPTIC_CCMR1                  TIM_CCMR1_OC2M_1 | TIM_CCMR1_OC2M_2\n  #define HAPTIC_CCER                   TIM_CCER_CC2E\n  #define BACKLIGHT_BDTR                TIM_BDTR_MOE\n#elif defined(RADIO_X9DP2019) || defined(RADIO_X7ACCESS)\n  #define HAPTIC_PWM\n  #define HAPTIC_RCC_AHB1Periph         RCC_AHB1Periph_GPIOA\n  #define HAPTIC_RCC_APB2Periph         RCC_APB2Periph_TIM1\n  #define HAPTIC_RCC_APB1Periph         0\n  #define HAPTIC_GPIO_PinSource         GPIO_PinSource10\n  #define HAPTIC_GPIO                   GPIOA\n  #define HAPTIC_GPIO_PIN               GPIO_Pin_10 // PA.10\n  #define HAPTIC_GPIO_AF                GPIO_AF_TIM1\n  #define HAPTIC_TIMER                  TIM1 // Timer1 Channel3\n  #define HAPTIC_TIMER_FREQ             (PERI2_FREQUENCY * TIMER_MULT_APB2)\n  #define HAPTIC_COUNTER_REGISTER       HAPTIC_TIMER->CCR3\n  #define HAPTIC_CCMR2                  TIM_CCMR2_OC3M_1 | TIM_CCMR2_OC3M_2\n  #define HAPTIC_CCER                   TIM_CCER_CC3E\n#elif defined(PCBX9E) || defined(PCBX9DP) || defined(PCBX7)\n  #define HAPTIC_PWM\n  #define HAPTIC_RCC_AHB1Periph         RCC_AHB1Periph_GPIOB\n  #define HAPTIC_RCC_APB2Periph         RCC_APB2Periph_TIM10\n  #define HAPTIC_RCC_APB1Periph         0\n  #define HAPTIC_GPIO_PinSource         GPIO_PinSource8\n  #define HAPTIC_GPIO                   GPIOB\n  #define HAPTIC_GPIO_PIN               GPIO_Pin_8  // PB.08\n  #define HAPTIC_GPIO_AF                GPIO_AF_TIM10\n  #define HAPTIC_TIMER                  TIM10\n  #define HAPTIC_TIMER_FREQ             (PERI2_FREQUENCY * TIMER_MULT_APB2)\n  #define HAPTIC_COUNTER_REGISTER       HAPTIC_TIMER->CCR1\n  #define HAPTIC_CCMR1                  TIM_CCMR1_OC1M_1 | TIM_CCMR1_OC1M_2\n  #define HAPTIC_CCER                   TIM_CCER_CC1E\n#else\n  #define HAPTIC_RCC_AHB1Periph         RCC_AHB1Periph_GPIOC\n  #define HAPTIC_RCC_APB2Periph         0\n  #define HAPTIC_RCC_APB1Periph         0\n  #define HAPTIC_GPIO                   GPIOC\n  #define HAPTIC_GPIO_PIN               GPIO_Pin_12\n#endif\n\n// Top LCD on X9E\n#if defined(PCBX9E)\n  #define TOPLCD_RCC_AHB1Periph         RCC_AHB1Periph_GPIOG\n  #define TOPLCD_GPIO                   GPIOG\n  #define TOPLCD_GPIO_PIN_DATA          GPIO_Pin_5\n  #define TOPLCD_GPIO_PIN_WR            GPIO_Pin_4\n  #define TOPLCD_GPIO_PIN_CS1           GPIO_Pin_3\n  #define TOPLCD_GPIO_PIN_CS2           GPIO_Pin_15\n  #define TOPLCD_GPIO_PIN_BL            GPIO_Pin_2\n#endif\n\n// Bluetooth\n#if defined(PCBX9E)\n  #define STORAGE_BLUETOOTH\n  #define BT_USART                     USART6\n  #define BT_GPIO_AF                   GPIO_AF_USART6\n  #define BT_USART_IRQn                USART6_IRQn\n  #define BT_RCC_AHB1Periph            (RCC_AHB1Periph_GPIOD | RCC_AHB1Periph_GPIOE | RCC_AHB1Periph_GPIOG)\n  #define BT_RCC_APB1Periph            0\n  #define BT_RCC_APB2Periph            RCC_APB2Periph_USART6\n  #define BT_USART_GPIO                GPIOG\n  #define BT_TX_GPIO_PIN               GPIO_Pin_14 // PG.14\n  #define BT_RX_GPIO_PIN               GPIO_Pin_9  // PG.09\n  #define BT_EN_GPIO                   GPIOD\n  #define BT_EN_GPIO_PIN               GPIO_Pin_11 // PD.11\n  #define BT_BRTS_GPIO                 GPIOE\n  #define BT_BRTS_GPIO_PIN             GPIO_Pin_12 // PE.12\n  #define BT_BCTS_GPIO                 GPIOG\n  #define BT_BCTS_GPIO_PIN             GPIO_Pin_6  // PG.06\n  #define BT_TX_GPIO_PinSource         GPIO_PinSource14\n  #define BT_RX_GPIO_PinSource         GPIO_PinSource9\n  #define BT_USART_IRQHandler          USART6_IRQHandler\n#elif defined(PCBX7) || defined(PCBXLITE) || defined(PCBX9LITES) || defined(RADIO_X9DP2019)\n  #define STORAGE_BLUETOOTH\n  #define BT_RCC_APB1Periph             RCC_APB1Periph_USART3\n  #define BT_RCC_APB2Periph             0\n  #if defined(PCBX9DP)\n    #define BT_RCC_AHB1Periph           (RCC_AHB1Periph_GPIOB) // RCC_AHB1Periph_DMA1\n    #define BT_EN_GPIO                  GPIOB\n    #define BT_EN_GPIO_PIN              GPIO_Pin_2  // PB.02\n  #elif defined(PCBXLITE)\n    #define BT_RCC_AHB1Periph           (RCC_AHB1Periph_GPIOB | RCC_AHB1Periph_GPIOE) // RCC_AHB1Periph_DMA1\n    #define BT_EN_GPIO                  GPIOE\n    #define BT_EN_GPIO_PIN              GPIO_Pin_15 // PE.15\n  #elif defined(PCBX9LITES)\n    #define BT_RCC_AHB1Periph           (RCC_AHB1Periph_GPIOB | RCC_AHB1Periph_GPIOD) // RCC_AHB1Periph_DMA1\n    #define BT_EN_GPIO                  GPIOD\n    #define BT_EN_GPIO_PIN              GPIO_Pin_14 // PD.14\n  #else\n    #define BT_RCC_AHB1Periph           (RCC_AHB1Periph_GPIOB | RCC_AHB1Periph_GPIOE) // RCC_AHB1Periph_DMA1\n    #define BT_EN_GPIO                  GPIOE\n    #define BT_EN_GPIO_PIN              GPIO_Pin_12 // PE.12\n  #endif\n  #define BT_USART_GPIO                 GPIOB\n  #define BT_TX_GPIO_PIN                GPIO_Pin_10 // PB.10\n  #define BT_RX_GPIO_PIN                GPIO_Pin_11 // PB.11\n  #define BT_TX_GPIO_PinSource          GPIO_PinSource10\n  #define BT_RX_GPIO_PinSource          GPIO_PinSource11\n  #define BT_GPIO_AF                    GPIO_AF_USART3\n  #define BT_USART                      USART3\n  #define BT_USART_IRQHandler           USART3_IRQHandler\n  #define BT_USART_IRQn                 USART3_IRQn\n  // #define BT_DMA_Stream_RX              DMA1_Stream1\n  // #define BT_DMA_Channel_RX             DMA_Channel_4\n#elif defined(PCBX9D) || defined(PCBX9DP)\n  #define STORAGE_BLUETOOTH\n  #define BT_RCC_AHB1Periph             0\n  #define BT_RCC_APB1Periph             0\n  #define BT_RCC_APB2Periph             0\n#else\n  #define BT_RCC_AHB1Periph             0\n  #define BT_RCC_APB1Periph             0\n  #define BT_RCC_APB2Periph             0\n#endif\n\n// Xms Interrupt\n#define INTERRUPT_xMS_RCC_APB1Periph    RCC_APB1Periph_TIM14\n#define INTERRUPT_xMS_TIMER             TIM14\n#define INTERRUPT_xMS_IRQn              TIM8_TRG_COM_TIM14_IRQn\n#define INTERRUPT_xMS_IRQHandler        TIM8_TRG_COM_TIM14_IRQHandler\n\n// 2MHz Timer\n#define TIMER_2MHz_RCC_APB1Periph       RCC_APB1Periph_TIM7\n#define TIMER_2MHz_TIMER                TIM7\n\n#endif // _HAL_H_\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- radio/src/targets/taranis/hal.h	(revision 82a7223b78b262f6a4c3421414e91babbd73261a)
+++ radio/src/targets/taranis/hal.h	(date 1576578830855)
@@ -1003,6 +1003,7 @@
   #if defined(PCBXLITES)
     #define INTMODULE_BOOTCMD_GPIO      GPIOC
     #define INTMODULE_BOOTCMD_GPIO_PIN  GPIO_Pin_8  // PC.08
+    #define INIT_INTMODULE_BOOTCMD_PIN() GPIO_SetBits(INTMODULE_BOOTCMD_GPIO, INTMODULE_BOOTCMD_GPIO_PIN);
   #endif
 #elif defined(RADIO_X9DP2019)
   #define INTMODULE_RCC_APB1Periph      0
@@ -1374,6 +1375,7 @@
   #define PCBREV_RCC_AHB1Periph         RCC_AHB1Periph_GPIOA
   #define PCBREV_GPIO                   GPIOA
   #define PCBREV_GPIO_PIN               GPIO_Pin_14  // PA.14
+  #define PCBREV_VALUE()                GPIO_ReadInputDataBit(PCBREV_GPIO, PCBREV_GPIO_PIN)
 #else
   #define PCBREV_RCC_AHB1Periph         0
 #endif
