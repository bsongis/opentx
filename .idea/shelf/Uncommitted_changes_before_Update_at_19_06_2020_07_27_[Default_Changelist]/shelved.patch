Index: radio/src/thirdparty/libopenui/src/textedit.cpp
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>/*\n * Copyright (C) OpenTX\n *\n * Source:\n *  https://github.com/opentx/libopenui\n *\n * This file is a part of libopenui library.\n *\n * This library is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This library is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n */\n\n#include \"textedit.h\"\n#include \"font.h\"\n#include \"libopenui_globals.h\"\n\n#if defined(HARDWARE_TOUCH)\n#include \"keyboard_text.h\"\n#endif\n\nvoid TextEdit::paint(BitmapBuffer * dc)\n{\n  FormField::paint(dc);\n\n  if (editMode) {\n    dc->drawSizedText(FIELD_PADDING_LEFT, FIELD_PADDING_TOP, value, length, FOCUS_COLOR);\n    coord_t left = (cursorPos == 0 ? 0 : getTextWidth(value, cursorPos));\n#if defined(HARDWARE_TOUCH)\n    dc->drawSolidFilledRect(left + 2, 2, 2, height() - 4, FOCUS_COLOR);\n#else\n    char s[] = { value[cursorPos], '\\0' };\n    dc->drawSolidFilledRect(FIELD_PADDING_LEFT + left - 1, FIELD_PADDING_TOP - 1, getTextWidth(s, 1) + 1, height() - 2, FOCUS_COLOR);\n    dc->drawText(FIELD_PADDING_LEFT + left, FIELD_PADDING_TOP, s, DEFAULT_COLOR);\n#endif\n  }\n  else {\n    const char * displayedValue = value;\n    LcdFlags textColor;\n    if (hasFocus()) {\n      if (strlen(value) == 0) {\n        displayedValue = \"---\";\n      }\n      textColor = FOCUS_BGCOLOR;\n    }\n    else {\n      if (strlen(value) == 0) {\n        displayedValue = \"---\";\n        textColor = DISABLE_COLOR;\n      }\n      else {\n        textColor = DEFAULT_COLOR;\n      }\n    }\n    dc->drawSizedText(FIELD_PADDING_LEFT, FIELD_PADDING_TOP, displayedValue, length, textColor);\n  }\n}\n\nvoid TextEdit::trim()\n{\n  for (int i = length - 1; i >= 0; i--) {\n    if (value[i] == ' ' || value[i] == '\\0')\n      value[i] = '\\0';\n    else\n      break;\n  }\n}\n\nvoid TextEdit::onEvent(event_t event)\n{\n  TRACE_WINDOWS(\"%s received event 0x%X\", getWindowDebugString().c_str(), event);\n\n#if defined(HARDWARE_TOUCH)\n  if (IS_VIRTUAL_KEY_EVENT(event)) {\n    uint8_t c = event & 0xFF;\n    if (c == (uint8_t)KEYBOARD_BACKSPACE[0]) {\n      if (cursorPos > 0) {\n        memmove(value + cursorPos - 1, value + cursorPos, length - cursorPos);\n        value[length - 1] = '\\0';\n        --cursorPos;\n        invalidate();\n      }\n    }\n    else if (cursorPos < length) {\n      memmove(value + cursorPos + 1, value + cursorPos, length - cursorPos - 1);\n      value[cursorPos++] = c;\n      invalidate();\n    }\n  }\n#endif\n\n#if defined(HARDWARE_KEYS)\n  if (editMode) {\n    int c = value[cursorPos];\n    int v = c;\n\n    switch (event) {\n      case EVT_ROTARY_RIGHT:\n        for (int i = 0; i < rotencSpeed; i++) {\n          v = getNextChar(v);\n        }\n        break;\n\n      case EVT_ROTARY_LEFT:\n        for (int i = 0; i < rotencSpeed; i++) {\n          v = getPreviousChar(v);\n        }\n        break;\n\n      case EVT_KEY_BREAK(KEY_LEFT):\n        if (cursorPos > 0) {\n          cursorPos--;\n          invalidate();\n        }\n        break;\n\n      case EVT_KEY_BREAK(KEY_RIGHT):\n        if (cursorPos < length - 1 && value[cursorPos + 1] != '\\0') {\n          cursorPos++;\n          invalidate();\n        }\n        break;\n\n      case EVT_KEY_BREAK(KEY_ENTER):\n        if (cursorPos < length - 1) {\n          cursorPos++;\n          if (value[cursorPos] == '\\0')\n            value[cursorPos] = ' ';\n          invalidate();\n        }\n        else {\n          changeEnd();\n          FormField::onEvent(event);\n        }\n        break;\n\n      case EVT_KEY_BREAK(KEY_EXIT):\n        changeEnd();\n        FormField::onEvent(event);\n        break;\n\n      case EVT_KEY_LONG(KEY_ENTER):\n        if (v == 0) {\n          killEvents(event);\n          FormField::onEvent(EVT_KEY_BREAK(KEY_ENTER));\n          break;\n        }\n        // no break\n\n      case EVT_KEY_LONG(KEY_LEFT):\n      case EVT_KEY_LONG(KEY_RIGHT):\n        if (v >= -26 && v <= 26) {\n          v = -v; // toggle case\n          if (event == EVT_KEY_LONG(KEY_LEFT)) {\n            killEvents(KEY_LEFT);\n          }\n        }\n        break;\n    }\n\n    if (c != v) {\n      // TRACE(\"value[%d] = %d\", cursorPos, v);\n      value[cursorPos] = v;\n      invalidate();\n      // TODO storageDirty(...);\n    }\n  }\n  else {\n    cursorPos = 0;\n    FormField::onEvent(event);\n  }\n#endif\n}\n\n#if defined(HARDWARE_TOUCH)\nbool TextEdit::onTouchEnd(coord_t x, coord_t y)\n{\n  if (!hasFocus()) {\n    setFocus(SET_FOCUS_DEFAULT);\n  }\n\n#if defined(SOFTWARE_KEYBOARD)\n  TextKeyboard::show(this);\n#endif\n\n  coord_t rest = x;\n  for (cursorPos = 0; cursorPos < length; cursorPos++) {\n    char c = value[cursorPos];\n    if (c == '\\0')\n      break;\n    uint8_t w = getCharWidth(c, fontspecsTable[0]) + 1;\n    if (rest < w)\n      break;\n    rest -= w;\n  }\n\n  invalidate();\n  return true;\n}\n#endif\n\nvoid TextEdit::onFocusLost()\n{\n#if defined(SOFTWARE_KEYBOARD)\n  TextKeyboard::hide();\n#endif\n\n  changeEnd();\n\n  // TODO storageDirty(...);\n  FormField::onFocusLost();\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- radio/src/thirdparty/libopenui/src/textedit.cpp	(revision d1f0d77d9c7b79735103a9af11a5b23cafd7db64)
+++ radio/src/thirdparty/libopenui/src/textedit.cpp	(date 1592489753658)
@@ -155,12 +155,15 @@
 
       case EVT_KEY_LONG(KEY_LEFT):
       case EVT_KEY_LONG(KEY_RIGHT):
-        if (v >= -26 && v <= 26) {
-          v = -v; // toggle case
-          if (event == EVT_KEY_LONG(KEY_LEFT)) {
-            killEvents(KEY_LEFT);
-          }
+        if (event == EVT_KEY_LONG(KEY_LEFT)) {
+          killEvents(KEY_LEFT);
+        }
+        if (v >= 65 && v < 97) { // Upper case
+          v += 32; // tolower
         }
+        else if (v >= 97 && v < 129) { // Lower case
+          v -= 32; // toupper
+        }
         break;
     }
 
